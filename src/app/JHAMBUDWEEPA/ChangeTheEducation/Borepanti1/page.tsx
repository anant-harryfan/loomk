"use client";
import React, { useState } from "react";

const page = () => {
    const [number, setnumber] = useState(0)
    const Component = (element: string, e) => {

            // Get all elements with class 'sv1'  
            const elements = document.getElementsByClassName(element);

            // Add click handler to each  
            Array.from(elements).forEach((element) => {
                let b= e.clientY
                element.style.transform = `translatey(-306px)`
            });
   setnumber(1)
    }
  return (
    <div className="">
      <div className="p-50 bg-slate-900" >
        <h1>
          {" "}
          ab agar ham dekhe 1st class se 10th class ki maths to vo bas 6 mahine
          ki hai, to phir chalo dekhte hai{" "}
        </h1>
        <div className="grid grid-cols-3 gap-2 ">
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725197496750202/image.png?ex=68488f5e&is=68473dde&hm=81ef2c6c2ec4b85595b46f49a94344afecaefaeaa4445b247e729a3ccd92ac71&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725197241159700/image.png?ex=68488f5e&is=68473dde&hm=248cf75c276380652f3c7f6a5b42c55859d5d0427c562c3480ffa81fd56e8cd1&=&format=webp&quality=lossless&width=375&height=505"
            alt=""
          />

          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725197865975959/image.png?ex=68488f5e&is=68473dde&hm=2efc93d472e8c7f5b629c551409036947690b8c0edfe1f560e1ee8c53ed9e071&=&format=webp&quality=lossless&width=251&height=505"
            alt=""
          />

          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725198176227398/image.png?ex=68488f5e&is=68473dde&hm=210e940cd3a69bc70a1f9e24f61e882be27520e54c7a4f2ea1059b4a14c9e6e0&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725198469959730/image.png?ex=68488f5e&is=68473dde&hm=63704ae101c2da9821275f79fb6adb18b7d0aef4dec8ebc9a8e322388ba8d8ce&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725198692388935/image.png?ex=68488f5e&is=68473dde&hm=22c563a94cab036bcf5ff0df7f9eb4fb18ccc62eb7f6967449fb71ee58d467d5&=&format=webp&quality=lossless&width=346&height=505"
            alt=""
          />
        </div>
        to actually isme se adhha kam ka hi nahi hai, jabran ke chapter hai. to
        bas dekho ki kaha scam panti chal rahi or usse bhul jao usse vasta bhi
        mat rakho kam ka nahi hai to dekho inme jo bhi bataya hai vo bilkul
        kamka nahi hai, to iske jo aaju baju wale solution hai bhhot achha hai
        vo karte hai
        <br />
        <br />
        <div>
          abacus <br />
          <p className=" ">
            {" "}
            ye bas jo british create popular numbers hai usme teji se karne ke
            liye hai. to basically jisko tum 1 2 3 4 bolte usko ab kuch or
            define kardo
            <div className="   inline-flex flex-row items-center">
              <svg
                className="scale-80 inline"
                xmlns="http://www.w3.org/2000/svg"
                width="40"
                height="12"
                viewBox="0 0 685 262"
                fill="none"
              >
                <mask id="path-1-inside-1_14_873" fill="white">
                  <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                </mask>
                <path
                  d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                  fill="#6B4747"
                />
                <path
                  d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                  fill="black"
                  mask="url(#path-1-inside-1_14_873)"
                />
              </svg>
              ,
              <div className=" scale-80 inline-grid grid-cols-1 ">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="12"
                  viewBox="0 0 685 262"
                  fill="none"
                  className="group"
                >
                  <mask id="path-1-inside-1_14_873" fill="white">
                    <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                  </mask>
                  <path
                    d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                    fill="#6B4747"
                  />
                  <path
                    d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                    fill="black"
                    mask="url(#path-1-inside-1_14_873)"
                  />
                </svg>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="12"
                  viewBox="0 0 685 262"
                  fill="none"
                >
                  <mask id="path-1-inside-1_14_873" fill="white">
                    <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                  </mask>
                  <path
                    d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                    fill="#6B4747"
                  />
                  <path
                    d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                    fill="black"
                    mask="url(#path-1-inside-1_14_873)"
                  />
                </svg>
              </div>
              ,
              <div className=" scale-80 inline-grid grid-cols-1 ">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="12"
                  viewBox="0 0 685 262"
                  fill="none"
                >
                  <mask id="path-1-inside-1_14_873" fill="white">
                    <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                  </mask>
                  <path
                    d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                    fill="#6B4747"
                  />
                  <path
                    d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                    fill="black"
                    mask="url(#path-1-inside-1_14_873)"
                  />
                </svg>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="12"
                  viewBox="0 0 685 262"
                  fill="none"
                >
                  <mask id="path-1-inside-1_14_873" fill="white">
                    <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                  </mask>
                  <path
                    d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                    fill="#6B4747"
                  />
                  <path
                    d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                    fill="black"
                    mask="url(#path-1-inside-1_14_873)"
                  />
                </svg>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="40"
                  height="12"
                  viewBox="0 0 685 262"
                  fill="none"
                >
                  <mask id="path-1-inside-1_14_873" fill="white">
                    <path d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z" />
                  </mask>
                  <path
                    d="M342 0C435.156 0 515.652 16.2706 553.67 39.8604C633.482 60.4526 684.828 92.5925 685 128.82C685.167 163.923 637.254 195.419 561.852 216.429C528.263 243.063 442.499 262 342 262C242.606 262 157.624 243.478 123.273 217.306C48.0793 196.663 0.167452 165.486 0.000921539 130.492C-0.16889 94.7202 49.5906 62.6902 127.49 41.6904C164.228 17.1167 246.454 3.1898e-05 342 0Z"
                    fill="#6B4747"
                  />
                  <path
                    d="M342 0L342 -19L342 -19L342 0ZM553.67 39.8604L543.652 56.0049L546.116 57.5335L548.923 58.2579L553.67 39.8604ZM685 128.82L704 128.73L704 128.73L685 128.82ZM561.852 216.429L556.753 198.126L553.055 199.156L550.048 201.541L561.852 216.429ZM342 262L342 281H342V262ZM123.273 217.306L134.788 202.193L131.857 199.959L128.303 198.984L123.273 217.306ZM0.000921539 130.492L-18.9989 130.582L-18.9989 130.583L0.000921539 130.492ZM127.49 41.6904L132.436 60.0355L135.455 59.2216L138.054 57.4831L127.49 41.6904ZM342 0V19C387.532 19 429.732 22.9812 464.927 29.7428C500.51 36.579 527.515 45.9919 543.652 56.0049L553.67 39.8604L563.688 23.7158C541.807 10.1391 509.555 -0.378217 472.097 -7.57473C434.25 -14.8459 389.624 -19 342 -19V0ZM553.67 39.8604L548.923 58.2579C587.753 68.2762 618.305 80.7916 638.702 94.3133C659.74 108.26 665.96 120.407 666 128.911L685 128.82L704 128.73C703.868 101.005 684.329 78.969 659.698 62.6407C634.426 45.8875 599.4 32.0368 558.417 21.4628L553.67 39.8604ZM685 128.82L666 128.911C666.039 137.111 660.385 148.755 640.908 162.317C621.953 175.514 593.375 187.922 556.753 198.126L561.852 216.429L566.952 234.732C605.732 223.926 638.81 210.081 662.621 193.502C685.909 177.288 704.128 155.632 704 128.73L685 128.82ZM561.852 216.429L550.048 201.541C536.794 212.05 510.515 222.713 473.093 230.612C436.368 238.364 391.136 243 342 243V262V281C393.363 281 441.263 276.168 480.941 267.792C519.923 259.564 553.321 247.442 573.657 231.317L561.852 216.429ZM342 262L342 243C293.407 243 248.628 238.466 212.117 230.866C174.968 223.134 148.526 212.66 134.788 202.193L123.273 217.306L111.758 232.419C132.371 248.124 165.595 259.997 204.373 268.069C243.79 276.273 291.199 281 342 281L342 262ZM123.273 217.306L128.303 198.984C91.7855 188.959 63.2547 176.712 44.2846 163.637C24.7916 150.201 19.0397 138.599 19.0007 130.402L0.000921539 130.492L-18.9989 130.583C-18.8713 157.378 -0.583985 178.863 22.7191 194.925C46.5451 211.347 79.5672 225.01 118.244 235.628L123.273 217.306ZM0.000921539 130.492L19.0007 130.402C18.961 122.037 24.8632 110.095 45.1718 96.2508C64.8942 82.8059 94.563 70.245 132.436 60.0355L127.49 41.6904L122.545 23.3453C82.5178 34.1356 48.357 48.0896 23.7673 64.8526C-0.236311 81.216 -19.129 103.176 -18.9989 130.582L0.000921539 130.492ZM127.49 41.6904L138.054 57.4831C153.341 47.2576 180.197 37.4394 216.386 30.2676C252.104 23.1889 295.296 19 342 19L342 0L342 -19C293.158 -19 247.464 -14.6306 208.998 -7.00746C171.003 0.522468 138.377 11.5495 116.926 25.8978L127.49 41.6904Z"
                    fill="black"
                    mask="url(#path-1-inside-1_14_873)"
                  />
                </svg>
              </div>
            </div>
            ab dekh, 
            <div className=" mb-10 w-[50%] flex flex-row items-center justify-items-center ">
                          <div className="flex flex-col p-4 items-center">
                          
<p>5</p>
                              <p className="z-10  text-3xl">↑</p>
              <svg
                className="z-[0] mt-[-32] mb-[-47] w-full ml-10"
                xmlns="http://www.w3.org/2000/svg"
                width="5171"
                height="136"
                viewBox="0 0 5730 1936"
                fill="none"
              >
                <path
                  d="M5146 249V1511H25V249H5146Z"
                  stroke="black"
                  stroke-width="50"
                />
                <rect y="595.923" width="5171" height="35.5321" fill="black" />
                <rect
                  x="2540.51"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                {/* <mask id="path-4-inside-1_17_636" fill="white">
                  <path
                    className="hover:fill-amber-700"
                    d="M2576.78 257C2620.43 257 2658.15 266.191 2675.97 279.516C2713.37 291.148 2737.43 309.304 2737.51 329.769C2737.59 349.598 2715.14 367.39 2679.8 379.258C2664.06 394.303 2623.87 405 2576.78 405C2530.2 405 2490.38 394.537 2474.28 379.752C2439.04 368.091 2416.59 350.48 2416.51 330.713C2416.43 310.506 2439.75 292.412 2476.26 280.55C2493.47 266.669 2532.01 257 2576.78 257Z"
                  />
                </mask> */}
                <path
                  className="hover:fill-amber-700"
                  d="M2576.78 257C2620.43 257 2658.15 266.191 2675.97 279.516C2713.37 291.148 2737.43 309.304 2737.51 329.769C2737.59 349.598 2715.14 367.39 2679.8 379.258C2664.06 394.303 2623.87 405 2576.78 405C2530.2 405 2490.38 394.537 2474.28 379.752C2439.04 368.091 2416.59 350.48 2416.51 330.713C2416.43 310.506 2439.75 292.412 2476.26 280.55C2493.47 266.669 2532.01 257 2576.78 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M2576.78 257L2576.78 238L2576.78 238L2576.78 257ZM2675.97 279.516L2664.59 294.731L2667.21 296.688L2670.33 297.658L2675.97 279.516ZM2737.51 329.769L2756.51 329.694L2756.51 329.694L2737.51 329.769ZM2679.8 379.258L2673.75 361.247L2669.74 362.595L2666.68 365.523L2679.8 379.258ZM2576.78 405L2576.78 424H2576.78V405ZM2474.28 379.752L2487.13 365.759L2484.13 362.997L2480.25 361.714L2474.28 379.752ZM2416.51 330.713L2397.51 330.788L2397.51 330.788L2416.51 330.713ZM2476.26 280.55L2482.13 298.62L2485.46 297.538L2488.18 295.341L2476.26 280.55ZM2576.78 257V276C2597.34 276 2616.23 278.171 2631.78 281.771C2647.69 285.456 2658.68 290.311 2664.59 294.731L2675.97 279.516L2687.35 264.301C2675.44 255.395 2658.67 248.993 2640.35 244.751C2621.67 240.425 2599.87 238 2576.78 238V257ZM2675.97 279.516L2670.33 297.658C2687.71 303.064 2700.66 309.61 2708.88 316.173C2717.22 322.844 2718.5 327.631 2718.51 329.844L2737.51 329.769L2756.51 329.694C2756.44 311.441 2745.65 296.918 2732.6 286.487C2719.41 275.947 2701.63 267.599 2681.61 261.373L2675.97 279.516ZM2737.51 329.769L2718.51 329.843C2718.52 331.984 2717.38 336.522 2709.72 342.945C2702.15 349.3 2690.11 355.755 2673.75 361.247L2679.8 379.258L2685.85 397.269C2704.84 390.893 2721.68 382.518 2734.15 372.052C2746.54 361.655 2756.58 347.382 2756.51 329.694L2737.51 329.769ZM2679.8 379.258L2666.68 365.523C2662.34 369.67 2652.15 375.086 2635.36 379.357C2619.2 383.47 2598.98 386 2576.78 386V405V424C2601.68 424 2625.09 421.182 2644.73 416.184C2663.75 411.345 2681.53 403.89 2692.93 392.993L2679.8 379.258ZM2576.78 405L2576.78 386C2554.83 386 2534.8 383.526 2518.72 379.492C2502.07 375.313 2491.73 369.978 2487.13 365.759L2474.28 379.752L2461.43 393.745C2472.93 404.31 2490.55 411.6 2509.47 416.349C2528.98 421.243 2552.15 424 2576.78 424L2576.78 405ZM2474.28 379.752L2480.25 361.714C2463.95 356.32 2451.93 349.95 2444.35 343.658C2436.7 337.299 2435.52 332.779 2435.51 330.638L2416.51 330.713L2397.51 330.788C2397.58 348.414 2407.67 362.583 2420.07 372.886C2432.55 383.258 2449.37 391.523 2468.31 397.79L2474.28 379.752ZM2416.51 330.713L2435.51 330.638C2435.5 328.459 2436.7 323.777 2444.73 317.182C2452.64 310.677 2465.19 304.123 2482.13 298.62L2476.26 280.55L2470.39 262.48C2450.82 268.839 2433.45 277.263 2420.6 287.823C2407.86 298.291 2397.44 312.76 2397.51 330.788L2416.51 330.713ZM2476.26 280.55L2488.18 295.341C2493.62 290.96 2504.4 285.918 2520.6 282.049C2536.36 278.285 2555.69 276 2576.78 276L2576.78 257L2576.78 238C2553.1 238 2530.77 240.55 2511.77 245.089C2493.2 249.525 2476.11 256.258 2464.33 265.759L2476.26 280.55Z"
                  fill="black"
                  mask="url(#path-4-inside-1_17_636)"
                />
                {/* <mask
                  
                  id="path-6-inside-2_17_636"
                  fill="white"
                >
                  <path d="M2576.78 963C2620.43 963 2658.15 972.191 2675.97 985.516C2713.37 997.148 2737.43 1015.3 2737.51 1035.77C2737.59 1055.6 2715.14 1073.39 2679.8 1085.26C2664.06 1100.3 2623.87 1111 2576.78 1111C2530.2 1111 2490.38 1100.54 2474.28 1085.75C2439.04 1074.09 2416.59 1056.48 2416.51 1036.71C2416.43 1016.51 2439.75 998.412 2476.26 986.55C2493.47 972.669 2532.01 963 2576.78 963Z" />
                </mask> */}
                
                <path
                        
                                  onMouseMove={(e) => { Component("sv1", e) }}        
                                  className="hover:fill-amber-700  sv1 duration-300"
                  d="M2576.78 963C2620.43 963 2658.15 972.191 2675.97 985.516C2713.37 997.148 2737.43 1015.3 2737.51 1035.77C2737.59 1055.6 2715.14 1073.39 2679.8 1085.26C2664.06 1100.3 2623.87 1111 2576.78 1111C2530.2 1111 2490.38 1100.54 2474.28 1085.75C2439.04 1074.09 2416.59 1056.48 2416.51 1036.71C2416.43 1016.51 2439.75 998.412 2476.26 986.55C2493.47 972.669 2532.01 963 2576.78 963Z"
                  fill="#6B4747"
                />
                <path
                                  className="sv1"
                  d="M2576.78 963L2576.78 944L2576.78 944L2576.78 963ZM2675.97 985.516L2664.59 1000.73L2667.21 1002.69L2670.33 1003.66L2675.97 985.516ZM2737.51 1035.77L2756.51 1035.69L2756.51 1035.69L2737.51 1035.77ZM2679.8 1085.26L2673.75 1067.25L2669.74 1068.6L2666.68 1071.52L2679.8 1085.26ZM2576.78 1111L2576.78 1130H2576.78V1111ZM2474.28 1085.75L2487.13 1071.76L2484.13 1069L2480.25 1067.71L2474.28 1085.75ZM2416.51 1036.71L2397.51 1036.79L2397.51 1036.79L2416.51 1036.71ZM2476.26 986.55L2482.13 1004.62L2485.46 1003.54L2488.18 1001.34L2476.26 986.55ZM2576.78 963V982C2597.34 982 2616.23 984.171 2631.78 987.771C2647.69 991.456 2658.68 996.311 2664.59 1000.73L2675.97 985.516L2687.35 970.301C2675.44 961.395 2658.67 954.993 2640.35 950.751C2621.67 946.425 2599.87 944 2576.78 944V963ZM2675.97 985.516L2670.33 1003.66C2687.71 1009.06 2700.66 1015.61 2708.88 1022.17C2717.22 1028.84 2718.5 1033.63 2718.51 1035.84L2737.51 1035.77L2756.51 1035.69C2756.44 1017.44 2745.65 1002.92 2732.6 992.487C2719.41 981.947 2701.63 973.599 2681.61 967.373L2675.97 985.516ZM2737.51 1035.77L2718.51 1035.84C2718.52 1037.98 2717.38 1042.52 2709.72 1048.95C2702.15 1055.3 2690.11 1061.75 2673.75 1067.25L2679.8 1085.26L2685.85 1103.27C2704.84 1096.89 2721.68 1088.52 2734.15 1078.05C2746.54 1067.65 2756.58 1053.38 2756.51 1035.69L2737.51 1035.77ZM2679.8 1085.26L2666.68 1071.52C2662.34 1075.67 2652.15 1081.09 2635.36 1085.36C2619.2 1089.47 2598.98 1092 2576.78 1092V1111V1130C2601.68 1130 2625.09 1127.18 2644.73 1122.18C2663.75 1117.35 2681.53 1109.89 2692.93 1098.99L2679.8 1085.26ZM2576.78 1111L2576.78 1092C2554.83 1092 2534.8 1089.53 2518.72 1085.49C2502.07 1081.31 2491.73 1075.98 2487.13 1071.76L2474.28 1085.75L2461.43 1099.74C2472.93 1110.31 2490.55 1117.6 2509.47 1122.35C2528.98 1127.24 2552.15 1130 2576.78 1130L2576.78 1111ZM2474.28 1085.75L2480.25 1067.71C2463.95 1062.32 2451.93 1055.95 2444.35 1049.66C2436.7 1043.3 2435.52 1038.78 2435.51 1036.64L2416.51 1036.71L2397.51 1036.79C2397.58 1054.41 2407.67 1068.58 2420.07 1078.89C2432.55 1089.26 2449.37 1097.52 2468.31 1103.79L2474.28 1085.75ZM2416.51 1036.71L2435.51 1036.64C2435.5 1034.46 2436.7 1029.78 2444.73 1023.18C2452.64 1016.68 2465.19 1010.12 2482.13 1004.62L2476.26 986.55L2470.39 968.48C2450.82 974.839 2433.45 983.263 2420.6 993.823C2407.86 1004.29 2397.44 1018.76 2397.51 1036.79L2416.51 1036.71ZM2476.26 986.55L2488.18 1001.34C2493.62 996.96 2504.4 991.918 2520.6 988.049C2536.36 984.285 2555.69 982 2576.78 982L2576.78 963L2576.78 944C2553.1 944 2530.77 946.55 2511.77 951.089C2493.2 955.525 2476.11 962.258 2464.33 971.759L2476.26 986.55Z"
                  fill="black"
                  mask="url(#path-6-inside-2_17_636)"
                />
                              <mask className="sv1" id="path-8-inside-3_17_636" fill="white">
                  <path d="M2576.78 1089C2620.43 1089 2658.15 1098.19 2675.97 1111.52C2713.37 1123.15 2737.43 1141.3 2737.51 1161.77C2737.59 1181.6 2715.14 1199.39 2679.8 1211.26C2664.06 1226.3 2623.87 1237 2576.78 1237C2530.2 1237 2490.38 1226.54 2474.28 1211.75C2439.04 1200.09 2416.59 1182.48 2416.51 1162.71C2416.43 1142.51 2439.75 1124.41 2476.26 1112.55C2493.47 1098.67 2532 1089 2576.78 1089Z" />
                </mask>
                <path
                  d="M2576.78 1089C2620.43 1089 2658.15 1098.19 2675.97 1111.52C2713.37 1123.15 2737.43 1141.3 2737.51 1161.77C2737.59 1181.6 2715.14 1199.39 2679.8 1211.26C2664.06 1226.3 2623.87 1237 2576.78 1237C2530.2 1237 2490.38 1226.54 2474.28 1211.75C2439.04 1200.09 2416.59 1182.48 2416.51 1162.71C2416.43 1142.51 2439.75 1124.41 2476.26 1112.55C2493.47 1098.67 2532 1089 2576.78 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M2576.78 1089L2576.78 1070H2576.78V1089ZM2675.97 1111.52L2664.59 1126.73L2667.21 1128.69L2670.33 1129.66L2675.97 1111.52ZM2737.51 1161.77L2756.51 1161.69L2756.51 1161.69L2737.51 1161.77ZM2679.8 1211.26L2673.75 1193.25L2669.74 1194.6L2666.68 1197.52L2679.8 1211.26ZM2576.78 1237L2576.78 1256H2576.78L2576.78 1237ZM2474.28 1211.75L2487.13 1197.76L2484.13 1195L2480.25 1193.71L2474.28 1211.75ZM2416.51 1162.71L2397.51 1162.79L2397.51 1162.79L2416.51 1162.71ZM2476.26 1112.55L2482.13 1130.62L2485.46 1129.54L2488.18 1127.34L2476.26 1112.55ZM2576.78 1089L2576.78 1108C2597.34 1108 2616.23 1110.17 2631.78 1113.77C2647.69 1117.46 2658.68 1122.31 2664.59 1126.73L2675.97 1111.52L2687.35 1096.3C2675.44 1087.39 2658.67 1080.99 2640.35 1076.75C2621.67 1072.42 2599.87 1070 2576.78 1070L2576.78 1089ZM2675.97 1111.52L2670.33 1129.66C2687.71 1135.06 2700.66 1141.61 2708.88 1148.17C2717.22 1154.84 2718.5 1159.63 2718.51 1161.84L2737.51 1161.77L2756.51 1161.69C2756.44 1143.44 2745.65 1128.92 2732.6 1118.49C2719.41 1107.95 2701.63 1099.6 2681.61 1093.37L2675.97 1111.52ZM2737.51 1161.77L2718.51 1161.84C2718.52 1163.98 2717.38 1168.52 2709.72 1174.95C2702.15 1181.3 2690.1 1187.75 2673.75 1193.25L2679.8 1211.26L2685.85 1229.27C2704.84 1222.89 2721.68 1214.52 2734.15 1204.05C2746.54 1193.66 2756.58 1179.38 2756.51 1161.69L2737.51 1161.77ZM2679.8 1211.26L2666.68 1197.52C2662.34 1201.67 2652.15 1207.09 2635.36 1211.36C2619.2 1215.47 2598.98 1218 2576.78 1218L2576.78 1237L2576.78 1256C2601.68 1256 2625.09 1253.18 2644.73 1248.18C2663.75 1243.35 2681.53 1235.89 2692.93 1224.99L2679.8 1211.26ZM2576.78 1237V1218C2554.83 1218 2534.8 1215.53 2518.72 1211.49C2502.07 1207.31 2491.73 1201.98 2487.13 1197.76L2474.28 1211.75L2461.43 1225.75C2472.93 1236.31 2490.55 1243.6 2509.47 1248.35C2528.98 1253.24 2552.15 1256 2576.78 1256V1237ZM2474.28 1211.75L2480.25 1193.71C2463.95 1188.32 2451.93 1181.95 2444.35 1175.66C2436.7 1169.3 2435.52 1164.78 2435.51 1162.64L2416.51 1162.71L2397.51 1162.79C2397.58 1180.42 2407.67 1194.58 2420.07 1204.89C2432.55 1215.26 2449.37 1223.52 2468.31 1229.79L2474.28 1211.75ZM2416.51 1162.71L2435.51 1162.64C2435.5 1160.46 2436.7 1155.78 2444.73 1149.18C2452.64 1142.68 2465.19 1136.12 2482.13 1130.62L2476.26 1112.55L2470.38 1094.48C2450.81 1100.84 2433.45 1109.26 2420.6 1119.82C2407.86 1130.29 2397.44 1144.76 2397.51 1162.79L2416.51 1162.71ZM2476.26 1112.55L2488.18 1127.34C2493.61 1122.96 2504.4 1117.92 2520.6 1114.05C2536.36 1110.28 2555.69 1108 2576.78 1108V1089V1070C2553.1 1070 2530.77 1072.55 2511.77 1077.09C2493.2 1081.53 2476.11 1088.26 2464.33 1097.76L2476.26 1112.55Z"
                  fill="black"
                  mask="url(#path-8-inside-3_17_636)"
                />
                <mask id="path-10-inside-4_17_636" fill="white">
                  <path d="M2576.78 1215C2620.43 1215 2658.15 1224.19 2675.97 1237.52C2713.37 1249.15 2737.43 1267.3 2737.51 1287.77C2737.59 1307.6 2715.14 1325.39 2679.8 1337.26C2664.06 1352.3 2623.87 1363 2576.78 1363C2530.2 1363 2490.38 1352.54 2474.28 1337.75C2439.04 1326.09 2416.59 1308.48 2416.51 1288.71C2416.43 1268.51 2439.75 1250.41 2476.26 1238.55C2493.47 1224.67 2532 1215 2576.78 1215Z" />
                </mask>
                <path
                  d="M2576.78 1215C2620.43 1215 2658.15 1224.19 2675.97 1237.52C2713.37 1249.15 2737.43 1267.3 2737.51 1287.77C2737.59 1307.6 2715.14 1325.39 2679.8 1337.26C2664.06 1352.3 2623.87 1363 2576.78 1363C2530.2 1363 2490.38 1352.54 2474.28 1337.75C2439.04 1326.09 2416.59 1308.48 2416.51 1288.71C2416.43 1268.51 2439.75 1250.41 2476.26 1238.55C2493.47 1224.67 2532 1215 2576.78 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M2576.78 1215L2576.78 1196H2576.78V1215ZM2675.97 1237.52L2664.59 1252.73L2667.21 1254.69L2670.33 1255.66L2675.97 1237.52ZM2737.51 1287.77L2756.51 1287.69L2756.51 1287.69L2737.51 1287.77ZM2679.8 1337.26L2673.75 1319.25L2669.74 1320.6L2666.68 1323.52L2679.8 1337.26ZM2576.78 1363L2576.78 1382H2576.78L2576.78 1363ZM2474.28 1337.75L2487.13 1323.76L2484.13 1321L2480.25 1319.71L2474.28 1337.75ZM2416.51 1288.71L2397.51 1288.79L2397.51 1288.79L2416.51 1288.71ZM2476.26 1238.55L2482.13 1256.62L2485.46 1255.54L2488.18 1253.34L2476.26 1238.55ZM2576.78 1215L2576.78 1234C2597.34 1234 2616.23 1236.17 2631.78 1239.77C2647.69 1243.46 2658.68 1248.31 2664.59 1252.73L2675.97 1237.52L2687.35 1222.3C2675.44 1213.39 2658.67 1206.99 2640.35 1202.75C2621.67 1198.42 2599.87 1196 2576.78 1196L2576.78 1215ZM2675.97 1237.52L2670.33 1255.66C2687.71 1261.06 2700.66 1267.61 2708.88 1274.17C2717.22 1280.84 2718.5 1285.63 2718.51 1287.84L2737.51 1287.77L2756.51 1287.69C2756.44 1269.44 2745.65 1254.92 2732.6 1244.49C2719.41 1233.95 2701.63 1225.6 2681.61 1219.37L2675.97 1237.52ZM2737.51 1287.77L2718.51 1287.84C2718.52 1289.98 2717.38 1294.52 2709.72 1300.95C2702.15 1307.3 2690.1 1313.75 2673.75 1319.25L2679.8 1337.26L2685.85 1355.27C2704.84 1348.89 2721.68 1340.52 2734.15 1330.05C2746.54 1319.66 2756.58 1305.38 2756.51 1287.69L2737.51 1287.77ZM2679.8 1337.26L2666.68 1323.52C2662.34 1327.67 2652.15 1333.09 2635.36 1337.36C2619.2 1341.47 2598.98 1344 2576.78 1344L2576.78 1363L2576.78 1382C2601.68 1382 2625.09 1379.18 2644.73 1374.18C2663.75 1369.35 2681.53 1361.89 2692.93 1350.99L2679.8 1337.26ZM2576.78 1363V1344C2554.83 1344 2534.8 1341.53 2518.72 1337.49C2502.07 1333.31 2491.73 1327.98 2487.13 1323.76L2474.28 1337.75L2461.43 1351.75C2472.93 1362.31 2490.55 1369.6 2509.47 1374.35C2528.98 1379.24 2552.15 1382 2576.78 1382V1363ZM2474.28 1337.75L2480.25 1319.71C2463.95 1314.32 2451.93 1307.95 2444.35 1301.66C2436.7 1295.3 2435.52 1290.78 2435.51 1288.64L2416.51 1288.71L2397.51 1288.79C2397.58 1306.42 2407.67 1320.58 2420.07 1330.89C2432.55 1341.26 2449.37 1349.52 2468.31 1355.79L2474.28 1337.75ZM2416.51 1288.71L2435.51 1288.64C2435.5 1286.46 2436.7 1281.78 2444.73 1275.18C2452.64 1268.68 2465.19 1262.12 2482.13 1256.62L2476.26 1238.55L2470.38 1220.48C2450.81 1226.84 2433.45 1235.26 2420.6 1245.82C2407.86 1256.29 2397.44 1270.76 2397.51 1288.79L2416.51 1288.71ZM2476.26 1238.55L2488.18 1253.34C2493.61 1248.96 2504.4 1243.92 2520.6 1240.05C2536.36 1236.28 2555.69 1234 2576.78 1234V1215V1196C2553.1 1196 2530.77 1198.55 2511.77 1203.09C2493.2 1207.53 2476.11 1214.26 2464.33 1223.76L2476.26 1238.55Z"
                  fill="black"
                  mask="url(#path-10-inside-4_17_636)"
                />
                <mask id="path-12-inside-5_17_636" fill="white">
                  <path d="M2576.78 1341C2620.43 1341 2658.15 1350.19 2675.97 1363.52C2713.37 1375.15 2737.43 1393.3 2737.51 1413.77C2737.59 1433.6 2715.14 1451.39 2679.8 1463.26C2664.06 1478.3 2623.87 1489 2576.78 1489C2530.2 1489 2490.38 1478.54 2474.28 1463.75C2439.04 1452.09 2416.59 1434.48 2416.51 1414.71C2416.43 1394.51 2439.75 1376.41 2476.26 1364.55C2493.47 1350.67 2532 1341 2576.78 1341Z" />
                </mask>
                <path
                  d="M2576.78 1341C2620.43 1341 2658.15 1350.19 2675.97 1363.52C2713.37 1375.15 2737.43 1393.3 2737.51 1413.77C2737.59 1433.6 2715.14 1451.39 2679.8 1463.26C2664.06 1478.3 2623.87 1489 2576.78 1489C2530.2 1489 2490.38 1478.54 2474.28 1463.75C2439.04 1452.09 2416.59 1434.48 2416.51 1414.71C2416.43 1394.51 2439.75 1376.41 2476.26 1364.55C2493.47 1350.67 2532 1341 2576.78 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M2576.78 1341L2576.78 1322H2576.78V1341ZM2675.97 1363.52L2664.59 1378.73L2667.21 1380.69L2670.33 1381.66L2675.97 1363.52ZM2737.51 1413.77L2756.51 1413.69L2756.51 1413.69L2737.51 1413.77ZM2679.8 1463.26L2673.75 1445.25L2669.74 1446.6L2666.68 1449.52L2679.8 1463.26ZM2576.78 1489L2576.78 1508H2576.78L2576.78 1489ZM2474.28 1463.75L2487.13 1449.76L2484.13 1447L2480.25 1445.71L2474.28 1463.75ZM2416.51 1414.71L2397.51 1414.79L2397.51 1414.79L2416.51 1414.71ZM2476.26 1364.55L2482.13 1382.62L2485.46 1381.54L2488.18 1379.34L2476.26 1364.55ZM2576.78 1341L2576.78 1360C2597.34 1360 2616.23 1362.17 2631.78 1365.77C2647.69 1369.46 2658.68 1374.31 2664.59 1378.73L2675.97 1363.52L2687.35 1348.3C2675.44 1339.39 2658.67 1332.99 2640.35 1328.75C2621.67 1324.42 2599.87 1322 2576.78 1322L2576.78 1341ZM2675.97 1363.52L2670.33 1381.66C2687.71 1387.06 2700.66 1393.61 2708.88 1400.17C2717.22 1406.84 2718.5 1411.63 2718.51 1413.84L2737.51 1413.77L2756.51 1413.69C2756.44 1395.44 2745.65 1380.92 2732.6 1370.49C2719.41 1359.95 2701.63 1351.6 2681.61 1345.37L2675.97 1363.52ZM2737.51 1413.77L2718.51 1413.84C2718.52 1415.98 2717.38 1420.52 2709.72 1426.95C2702.15 1433.3 2690.1 1439.75 2673.75 1445.25L2679.8 1463.26L2685.85 1481.27C2704.84 1474.89 2721.68 1466.52 2734.15 1456.05C2746.54 1445.66 2756.58 1431.38 2756.51 1413.69L2737.51 1413.77ZM2679.8 1463.26L2666.68 1449.52C2662.34 1453.67 2652.15 1459.09 2635.36 1463.36C2619.2 1467.47 2598.98 1470 2576.78 1470L2576.78 1489L2576.78 1508C2601.68 1508 2625.09 1505.18 2644.73 1500.18C2663.75 1495.35 2681.53 1487.89 2692.93 1476.99L2679.8 1463.26ZM2576.78 1489V1470C2554.83 1470 2534.8 1467.53 2518.72 1463.49C2502.07 1459.31 2491.73 1453.98 2487.13 1449.76L2474.28 1463.75L2461.43 1477.75C2472.93 1488.31 2490.55 1495.6 2509.47 1500.35C2528.98 1505.24 2552.15 1508 2576.78 1508V1489ZM2474.28 1463.75L2480.25 1445.71C2463.95 1440.32 2451.93 1433.95 2444.35 1427.66C2436.7 1421.3 2435.52 1416.78 2435.51 1414.64L2416.51 1414.71L2397.51 1414.79C2397.58 1432.42 2407.67 1446.58 2420.07 1456.89C2432.55 1467.26 2449.37 1475.52 2468.31 1481.79L2474.28 1463.75ZM2416.51 1414.71L2435.51 1414.64C2435.5 1412.46 2436.7 1407.78 2444.73 1401.18C2452.64 1394.68 2465.19 1388.12 2482.13 1382.62L2476.26 1364.55L2470.38 1346.48C2450.81 1352.84 2433.45 1361.26 2420.6 1371.82C2407.86 1382.29 2397.44 1396.76 2397.51 1414.79L2416.51 1414.71ZM2476.26 1364.55L2488.18 1379.34C2493.61 1374.96 2504.4 1369.92 2520.6 1366.05C2536.36 1362.28 2555.69 1360 2576.78 1360V1341V1322C2553.1 1322 2530.77 1324.55 2511.77 1329.09C2493.2 1333.53 2476.11 1340.26 2464.33 1349.76L2476.26 1364.55Z"
                  fill="black"
                  mask="url(#path-12-inside-5_17_636)"
                />
                <ellipse
                  cx="2571.83"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <rect
                  x="2879.54"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-16-inside-6_17_636" fill="white">
                  <path d="M2915.81 257C2959.46 257 2997.18 266.191 3015 279.516C3052.4 291.148 3076.46 309.304 3076.54 329.769C3076.62 349.598 3054.17 367.39 3018.83 379.258C3003.09 394.303 2962.9 405 2915.81 405C2869.23 405 2829.41 394.537 2813.31 379.752C2778.07 368.091 2755.62 350.48 2755.54 330.713C2755.46 310.506 2778.78 292.412 2815.29 280.55C2832.5 266.669 2871.04 257 2915.81 257Z" />
                </mask>
                <path
                  d="M2915.81 257C2959.46 257 2997.18 266.191 3015 279.516C3052.4 291.148 3076.46 309.304 3076.54 329.769C3076.62 349.598 3054.17 367.39 3018.83 379.258C3003.09 394.303 2962.9 405 2915.81 405C2869.23 405 2829.41 394.537 2813.31 379.752C2778.07 368.091 2755.62 350.48 2755.54 330.713C2755.46 310.506 2778.78 292.412 2815.29 280.55C2832.5 266.669 2871.04 257 2915.81 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M2915.81 257L2915.81 238L2915.81 238L2915.81 257ZM3015 279.516L3003.62 294.731L3006.24 296.688L3009.36 297.658L3015 279.516ZM3076.54 329.769L3095.54 329.694L3095.54 329.694L3076.54 329.769ZM3018.83 379.258L3012.79 361.247L3008.77 362.595L3005.71 365.523L3018.83 379.258ZM2915.81 405L2915.81 424H2915.81V405ZM2813.31 379.752L2826.16 365.759L2823.16 362.997L2819.28 361.714L2813.31 379.752ZM2755.54 330.713L2736.54 330.788L2736.54 330.788L2755.54 330.713ZM2815.29 280.55L2821.16 298.62L2824.49 297.538L2827.21 295.341L2815.29 280.55ZM2915.81 257V276C2936.37 276 2955.26 278.171 2970.81 281.771C2986.72 285.456 2997.71 290.311 3003.62 294.731L3015 279.516L3026.38 264.301C3014.47 255.395 2997.7 248.993 2979.38 244.751C2960.7 240.425 2938.9 238 2915.81 238V257ZM3015 279.516L3009.36 297.658C3026.74 303.064 3039.69 309.61 3047.91 316.173C3056.25 322.844 3057.54 327.631 3057.54 329.844L3076.54 329.769L3095.54 329.694C3095.47 311.441 3084.68 296.918 3071.63 286.487C3058.44 275.947 3040.66 267.599 3020.64 261.373L3015 279.516ZM3076.54 329.769L3057.54 329.843C3057.55 331.984 3056.41 336.522 3048.75 342.945C3041.18 349.3 3029.14 355.755 3012.79 361.247L3018.83 379.258L3024.88 397.269C3043.87 390.893 3060.71 382.518 3073.18 372.052C3085.57 361.655 3095.61 347.382 3095.54 329.694L3076.54 329.769ZM3018.83 379.258L3005.71 365.523C3001.37 369.67 2991.18 375.086 2974.39 379.357C2958.23 383.47 2938.01 386 2915.81 386V405V424C2940.71 424 2964.12 421.182 2983.76 416.184C3002.78 411.345 3020.56 403.89 3031.96 392.993L3018.83 379.258ZM2915.81 405L2915.81 386C2893.86 386 2873.83 383.526 2857.75 379.492C2841.1 375.313 2830.76 369.978 2826.16 365.759L2813.31 379.752L2800.46 393.745C2811.96 404.31 2829.58 411.6 2848.51 416.349C2868.01 421.243 2891.18 424 2915.81 424L2915.81 405ZM2813.31 379.752L2819.28 361.714C2802.98 356.32 2790.96 349.95 2783.38 343.658C2775.73 337.299 2774.55 332.779 2774.54 330.638L2755.54 330.713L2736.54 330.788C2736.61 348.414 2746.7 362.583 2759.1 372.886C2771.58 383.258 2788.4 391.523 2807.34 397.79L2813.31 379.752ZM2755.54 330.713L2774.54 330.638C2774.54 328.459 2775.73 323.777 2783.76 317.182C2791.67 310.677 2804.22 304.123 2821.16 298.62L2815.29 280.55L2809.42 262.48C2789.85 268.839 2772.48 277.263 2759.63 287.823C2746.89 298.291 2736.47 312.76 2736.54 330.788L2755.54 330.713ZM2815.29 280.55L2827.21 295.341C2832.65 290.96 2843.44 285.918 2859.63 282.049C2875.39 278.285 2894.72 276 2915.81 276L2915.81 257L2915.81 238C2892.13 238 2869.8 240.55 2850.8 245.089C2832.23 249.525 2815.14 256.258 2803.36 265.759L2815.29 280.55Z"
                  fill="black"
                  mask="url(#path-16-inside-6_17_636)"
                />
                <mask id="path-18-inside-7_17_636" fill="white">
                  <path d="M2915.81 963C2959.46 963 2997.18 972.191 3015 985.516C3052.4 997.148 3076.46 1015.3 3076.54 1035.77C3076.62 1055.6 3054.17 1073.39 3018.83 1085.26C3003.09 1100.3 2962.9 1111 2915.81 1111C2869.23 1111 2829.41 1100.54 2813.31 1085.75C2778.07 1074.09 2755.62 1056.48 2755.54 1036.71C2755.46 1016.51 2778.78 998.412 2815.29 986.55C2832.5 972.669 2871.04 963 2915.81 963Z" />
                </mask>
                <path
                  d="M2915.81 963C2959.46 963 2997.18 972.191 3015 985.516C3052.4 997.148 3076.46 1015.3 3076.54 1035.77C3076.62 1055.6 3054.17 1073.39 3018.83 1085.26C3003.09 1100.3 2962.9 1111 2915.81 1111C2869.23 1111 2829.41 1100.54 2813.31 1085.75C2778.07 1074.09 2755.62 1056.48 2755.54 1036.71C2755.46 1016.51 2778.78 998.412 2815.29 986.55C2832.5 972.669 2871.04 963 2915.81 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M2915.81 963L2915.81 944L2915.81 944L2915.81 963ZM3015 985.516L3003.62 1000.73L3006.24 1002.69L3009.36 1003.66L3015 985.516ZM3076.54 1035.77L3095.54 1035.69L3095.54 1035.69L3076.54 1035.77ZM3018.83 1085.26L3012.79 1067.25L3008.77 1068.6L3005.71 1071.52L3018.83 1085.26ZM2915.81 1111L2915.81 1130H2915.81V1111ZM2813.31 1085.75L2826.16 1071.76L2823.16 1069L2819.28 1067.71L2813.31 1085.75ZM2755.54 1036.71L2736.54 1036.79L2736.54 1036.79L2755.54 1036.71ZM2815.29 986.55L2821.16 1004.62L2824.49 1003.54L2827.21 1001.34L2815.29 986.55ZM2915.81 963V982C2936.37 982 2955.26 984.171 2970.81 987.771C2986.72 991.456 2997.71 996.311 3003.62 1000.73L3015 985.516L3026.38 970.301C3014.47 961.395 2997.7 954.993 2979.38 950.751C2960.7 946.425 2938.9 944 2915.81 944V963ZM3015 985.516L3009.36 1003.66C3026.74 1009.06 3039.69 1015.61 3047.91 1022.17C3056.25 1028.84 3057.54 1033.63 3057.54 1035.84L3076.54 1035.77L3095.54 1035.69C3095.47 1017.44 3084.68 1002.92 3071.63 992.487C3058.44 981.947 3040.66 973.599 3020.64 967.373L3015 985.516ZM3076.54 1035.77L3057.54 1035.84C3057.55 1037.98 3056.41 1042.52 3048.75 1048.95C3041.18 1055.3 3029.14 1061.75 3012.79 1067.25L3018.83 1085.26L3024.88 1103.27C3043.87 1096.89 3060.71 1088.52 3073.18 1078.05C3085.57 1067.65 3095.61 1053.38 3095.54 1035.69L3076.54 1035.77ZM3018.83 1085.26L3005.71 1071.52C3001.37 1075.67 2991.18 1081.09 2974.39 1085.36C2958.23 1089.47 2938.01 1092 2915.81 1092V1111V1130C2940.71 1130 2964.12 1127.18 2983.76 1122.18C3002.78 1117.35 3020.56 1109.89 3031.96 1098.99L3018.83 1085.26ZM2915.81 1111L2915.81 1092C2893.86 1092 2873.83 1089.53 2857.75 1085.49C2841.1 1081.31 2830.76 1075.98 2826.16 1071.76L2813.31 1085.75L2800.46 1099.74C2811.96 1110.31 2829.58 1117.6 2848.51 1122.35C2868.01 1127.24 2891.18 1130 2915.81 1130L2915.81 1111ZM2813.31 1085.75L2819.28 1067.71C2802.98 1062.32 2790.96 1055.95 2783.38 1049.66C2775.73 1043.3 2774.55 1038.78 2774.54 1036.64L2755.54 1036.71L2736.54 1036.79C2736.61 1054.41 2746.7 1068.58 2759.1 1078.89C2771.58 1089.26 2788.4 1097.52 2807.34 1103.79L2813.31 1085.75ZM2755.54 1036.71L2774.54 1036.64C2774.54 1034.46 2775.73 1029.78 2783.76 1023.18C2791.67 1016.68 2804.22 1010.12 2821.16 1004.62L2815.29 986.55L2809.42 968.48C2789.85 974.839 2772.48 983.263 2759.63 993.823C2746.89 1004.29 2736.47 1018.76 2736.54 1036.79L2755.54 1036.71ZM2815.29 986.55L2827.21 1001.34C2832.65 996.96 2843.44 991.918 2859.63 988.049C2875.39 984.285 2894.72 982 2915.81 982L2915.81 963L2915.81 944C2892.13 944 2869.8 946.55 2850.8 951.089C2832.23 955.525 2815.14 962.258 2803.36 971.759L2815.29 986.55Z"
                  fill="black"
                  mask="url(#path-18-inside-7_17_636)"
                />
                <mask id="path-20-inside-8_17_636" fill="white">
                  <path d="M2915.81 1089C2959.46 1089 2997.18 1098.19 3015 1111.52C3052.4 1123.15 3076.46 1141.3 3076.54 1161.77C3076.62 1181.6 3054.17 1199.39 3018.83 1211.26C3003.09 1226.3 2962.9 1237 2915.81 1237C2869.23 1237 2829.41 1226.54 2813.31 1211.75C2778.07 1200.09 2755.62 1182.48 2755.54 1162.71C2755.46 1142.51 2778.78 1124.41 2815.29 1112.55C2832.5 1098.67 2871.04 1089 2915.81 1089Z" />
                </mask>
                <path
                  d="M2915.81 1089C2959.46 1089 2997.18 1098.19 3015 1111.52C3052.4 1123.15 3076.46 1141.3 3076.54 1161.77C3076.62 1181.6 3054.17 1199.39 3018.83 1211.26C3003.09 1226.3 2962.9 1237 2915.81 1237C2869.23 1237 2829.41 1226.54 2813.31 1211.75C2778.07 1200.09 2755.62 1182.48 2755.54 1162.71C2755.46 1142.51 2778.78 1124.41 2815.29 1112.55C2832.5 1098.67 2871.04 1089 2915.81 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M2915.81 1089L2915.81 1070H2915.81V1089ZM3015 1111.52L3003.62 1126.73L3006.24 1128.69L3009.36 1129.66L3015 1111.52ZM3076.54 1161.77L3095.54 1161.69L3095.54 1161.69L3076.54 1161.77ZM3018.83 1211.26L3012.78 1193.25L3008.77 1194.6L3005.71 1197.52L3018.83 1211.26ZM2915.81 1237L2915.81 1256H2915.81L2915.81 1237ZM2813.31 1211.75L2826.16 1197.76L2823.16 1195L2819.28 1193.71L2813.31 1211.75ZM2755.54 1162.71L2736.54 1162.79L2736.54 1162.79L2755.54 1162.71ZM2815.29 1112.55L2821.16 1130.62L2824.49 1129.54L2827.21 1127.34L2815.29 1112.55ZM2915.81 1089L2915.81 1108C2936.37 1108 2955.26 1110.17 2970.81 1113.77C2986.72 1117.46 2997.71 1122.31 3003.62 1126.73L3015 1111.52L3026.38 1096.3C3014.47 1087.39 2997.7 1080.99 2979.38 1076.75C2960.7 1072.42 2938.9 1070 2915.81 1070L2915.81 1089ZM3015 1111.52L3009.36 1129.66C3026.74 1135.06 3039.69 1141.61 3047.91 1148.17C3056.25 1154.84 3057.54 1159.63 3057.54 1161.84L3076.54 1161.77L3095.54 1161.69C3095.47 1143.44 3084.68 1128.92 3071.63 1118.49C3058.44 1107.95 3040.66 1099.6 3020.64 1093.37L3015 1111.52ZM3076.54 1161.77L3057.54 1161.84C3057.55 1163.98 3056.41 1168.52 3048.75 1174.95C3041.18 1181.3 3029.14 1187.75 3012.78 1193.25L3018.83 1211.26L3024.88 1229.27C3043.87 1222.89 3060.71 1214.52 3073.18 1204.05C3085.57 1193.66 3095.61 1179.38 3095.54 1161.69L3076.54 1161.77ZM3018.83 1211.26L3005.71 1197.52C3001.37 1201.67 2991.18 1207.09 2974.39 1211.36C2958.23 1215.47 2938.01 1218 2915.81 1218L2915.81 1237L2915.81 1256C2940.71 1256 2964.12 1253.18 2983.76 1248.18C3002.78 1243.35 3020.56 1235.89 3031.96 1224.99L3018.83 1211.26ZM2915.81 1237V1218C2893.86 1218 2873.83 1215.53 2857.75 1211.49C2841.1 1207.31 2830.76 1201.98 2826.16 1197.76L2813.31 1211.75L2800.46 1225.75C2811.96 1236.31 2829.58 1243.6 2848.51 1248.35C2868.01 1253.24 2891.18 1256 2915.81 1256V1237ZM2813.31 1211.75L2819.28 1193.71C2802.98 1188.32 2790.96 1181.95 2783.38 1175.66C2775.73 1169.3 2774.55 1164.78 2774.54 1162.64L2755.54 1162.71L2736.54 1162.79C2736.61 1180.42 2746.7 1194.58 2759.1 1204.89C2771.58 1215.26 2788.41 1223.52 2807.34 1229.79L2813.31 1211.75ZM2755.54 1162.71L2774.54 1162.64C2774.54 1160.46 2775.73 1155.78 2783.76 1149.18C2791.67 1142.68 2804.22 1136.12 2821.16 1130.62L2815.29 1112.55L2809.42 1094.48C2789.85 1100.84 2772.48 1109.26 2759.63 1119.82C2746.89 1130.29 2736.47 1144.76 2736.54 1162.79L2755.54 1162.71ZM2815.29 1112.55L2827.21 1127.34C2832.65 1122.96 2843.43 1117.92 2859.63 1114.05C2875.39 1110.28 2894.72 1108 2915.81 1108V1089V1070C2892.13 1070 2869.8 1072.55 2850.8 1077.09C2832.23 1081.53 2815.14 1088.26 2803.36 1097.76L2815.29 1112.55Z"
                  fill="black"
                  mask="url(#path-20-inside-8_17_636)"
                />
                <mask id="path-22-inside-9_17_636" fill="white">
                  <path d="M2915.81 1215C2959.46 1215 2997.18 1224.19 3015 1237.52C3052.4 1249.15 3076.46 1267.3 3076.54 1287.77C3076.62 1307.6 3054.17 1325.39 3018.83 1337.26C3003.09 1352.3 2962.9 1363 2915.81 1363C2869.23 1363 2829.41 1352.54 2813.31 1337.75C2778.07 1326.09 2755.62 1308.48 2755.54 1288.71C2755.46 1268.51 2778.78 1250.41 2815.29 1238.55C2832.5 1224.67 2871.04 1215 2915.81 1215Z" />
                </mask>
                <path
                  d="M2915.81 1215C2959.46 1215 2997.18 1224.19 3015 1237.52C3052.4 1249.15 3076.46 1267.3 3076.54 1287.77C3076.62 1307.6 3054.17 1325.39 3018.83 1337.26C3003.09 1352.3 2962.9 1363 2915.81 1363C2869.23 1363 2829.41 1352.54 2813.31 1337.75C2778.07 1326.09 2755.62 1308.48 2755.54 1288.71C2755.46 1268.51 2778.78 1250.41 2815.29 1238.55C2832.5 1224.67 2871.04 1215 2915.81 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M2915.81 1215L2915.81 1196H2915.81V1215ZM3015 1237.52L3003.62 1252.73L3006.24 1254.69L3009.36 1255.66L3015 1237.52ZM3076.54 1287.77L3095.54 1287.69L3095.54 1287.69L3076.54 1287.77ZM3018.83 1337.26L3012.78 1319.25L3008.77 1320.6L3005.71 1323.52L3018.83 1337.26ZM2915.81 1363L2915.81 1382H2915.81L2915.81 1363ZM2813.31 1337.75L2826.16 1323.76L2823.16 1321L2819.28 1319.71L2813.31 1337.75ZM2755.54 1288.71L2736.54 1288.79L2736.54 1288.79L2755.54 1288.71ZM2815.29 1238.55L2821.16 1256.62L2824.49 1255.54L2827.21 1253.34L2815.29 1238.55ZM2915.81 1215L2915.81 1234C2936.37 1234 2955.26 1236.17 2970.81 1239.77C2986.72 1243.46 2997.71 1248.31 3003.62 1252.73L3015 1237.52L3026.38 1222.3C3014.47 1213.39 2997.7 1206.99 2979.38 1202.75C2960.7 1198.42 2938.9 1196 2915.81 1196L2915.81 1215ZM3015 1237.52L3009.36 1255.66C3026.74 1261.06 3039.69 1267.61 3047.91 1274.17C3056.25 1280.84 3057.54 1285.63 3057.54 1287.84L3076.54 1287.77L3095.54 1287.69C3095.47 1269.44 3084.68 1254.92 3071.63 1244.49C3058.44 1233.95 3040.66 1225.6 3020.64 1219.37L3015 1237.52ZM3076.54 1287.77L3057.54 1287.84C3057.55 1289.98 3056.41 1294.52 3048.75 1300.95C3041.18 1307.3 3029.14 1313.75 3012.78 1319.25L3018.83 1337.26L3024.88 1355.27C3043.87 1348.89 3060.71 1340.52 3073.18 1330.05C3085.57 1319.66 3095.61 1305.38 3095.54 1287.69L3076.54 1287.77ZM3018.83 1337.26L3005.71 1323.52C3001.37 1327.67 2991.18 1333.09 2974.39 1337.36C2958.23 1341.47 2938.01 1344 2915.81 1344L2915.81 1363L2915.81 1382C2940.71 1382 2964.12 1379.18 2983.76 1374.18C3002.78 1369.35 3020.56 1361.89 3031.96 1350.99L3018.83 1337.26ZM2915.81 1363V1344C2893.86 1344 2873.83 1341.53 2857.75 1337.49C2841.1 1333.31 2830.76 1327.98 2826.16 1323.76L2813.31 1337.75L2800.46 1351.75C2811.96 1362.31 2829.58 1369.6 2848.51 1374.35C2868.01 1379.24 2891.18 1382 2915.81 1382V1363ZM2813.31 1337.75L2819.28 1319.71C2802.98 1314.32 2790.96 1307.95 2783.38 1301.66C2775.73 1295.3 2774.55 1290.78 2774.54 1288.64L2755.54 1288.71L2736.54 1288.79C2736.61 1306.42 2746.7 1320.58 2759.1 1330.89C2771.58 1341.26 2788.41 1349.52 2807.34 1355.79L2813.31 1337.75ZM2755.54 1288.71L2774.54 1288.64C2774.54 1286.46 2775.73 1281.78 2783.76 1275.18C2791.67 1268.68 2804.22 1262.12 2821.16 1256.62L2815.29 1238.55L2809.42 1220.48C2789.85 1226.84 2772.48 1235.26 2759.63 1245.82C2746.89 1256.29 2736.47 1270.76 2736.54 1288.79L2755.54 1288.71ZM2815.29 1238.55L2827.21 1253.34C2832.65 1248.96 2843.43 1243.92 2859.63 1240.05C2875.39 1236.28 2894.72 1234 2915.81 1234V1215V1196C2892.13 1196 2869.8 1198.55 2850.8 1203.09C2832.23 1207.53 2815.14 1214.26 2803.36 1223.76L2815.29 1238.55Z"
                  fill="black"
                  mask="url(#path-22-inside-9_17_636)"
                />
                <mask id="path-24-inside-10_17_636" fill="white">
                  <path d="M2915.81 1341C2959.46 1341 2997.18 1350.19 3015 1363.52C3052.4 1375.15 3076.46 1393.3 3076.54 1413.77C3076.62 1433.6 3054.17 1451.39 3018.83 1463.26C3003.09 1478.3 2962.9 1489 2915.81 1489C2869.23 1489 2829.41 1478.54 2813.31 1463.75C2778.07 1452.09 2755.62 1434.48 2755.54 1414.71C2755.46 1394.51 2778.78 1376.41 2815.29 1364.55C2832.5 1350.67 2871.04 1341 2915.81 1341Z" />
                </mask>
                <path
                  d="M2915.81 1341C2959.46 1341 2997.18 1350.19 3015 1363.52C3052.4 1375.15 3076.46 1393.3 3076.54 1413.77C3076.62 1433.6 3054.17 1451.39 3018.83 1463.26C3003.09 1478.3 2962.9 1489 2915.81 1489C2869.23 1489 2829.41 1478.54 2813.31 1463.75C2778.07 1452.09 2755.62 1434.48 2755.54 1414.71C2755.46 1394.51 2778.78 1376.41 2815.29 1364.55C2832.5 1350.67 2871.04 1341 2915.81 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M2915.81 1341L2915.81 1322H2915.81V1341ZM3015 1363.52L3003.62 1378.73L3006.24 1380.69L3009.36 1381.66L3015 1363.52ZM3076.54 1413.77L3095.54 1413.69L3095.54 1413.69L3076.54 1413.77ZM3018.83 1463.26L3012.78 1445.25L3008.77 1446.6L3005.71 1449.52L3018.83 1463.26ZM2915.81 1489L2915.81 1508H2915.81L2915.81 1489ZM2813.31 1463.75L2826.16 1449.76L2823.16 1447L2819.28 1445.71L2813.31 1463.75ZM2755.54 1414.71L2736.54 1414.79L2736.54 1414.79L2755.54 1414.71ZM2815.29 1364.55L2821.16 1382.62L2824.49 1381.54L2827.21 1379.34L2815.29 1364.55ZM2915.81 1341L2915.81 1360C2936.37 1360 2955.26 1362.17 2970.81 1365.77C2986.72 1369.46 2997.71 1374.31 3003.62 1378.73L3015 1363.52L3026.38 1348.3C3014.47 1339.39 2997.7 1332.99 2979.38 1328.75C2960.7 1324.42 2938.9 1322 2915.81 1322L2915.81 1341ZM3015 1363.52L3009.36 1381.66C3026.74 1387.06 3039.69 1393.61 3047.91 1400.17C3056.25 1406.84 3057.54 1411.63 3057.54 1413.84L3076.54 1413.77L3095.54 1413.69C3095.47 1395.44 3084.68 1380.92 3071.63 1370.49C3058.44 1359.95 3040.66 1351.6 3020.64 1345.37L3015 1363.52ZM3076.54 1413.77L3057.54 1413.84C3057.55 1415.98 3056.41 1420.52 3048.75 1426.95C3041.18 1433.3 3029.14 1439.75 3012.78 1445.25L3018.83 1463.26L3024.88 1481.27C3043.87 1474.89 3060.71 1466.52 3073.18 1456.05C3085.57 1445.66 3095.61 1431.38 3095.54 1413.69L3076.54 1413.77ZM3018.83 1463.26L3005.71 1449.52C3001.37 1453.67 2991.18 1459.09 2974.39 1463.36C2958.23 1467.47 2938.01 1470 2915.81 1470L2915.81 1489L2915.81 1508C2940.71 1508 2964.12 1505.18 2983.76 1500.18C3002.78 1495.35 3020.56 1487.89 3031.96 1476.99L3018.83 1463.26ZM2915.81 1489V1470C2893.86 1470 2873.83 1467.53 2857.75 1463.49C2841.1 1459.31 2830.76 1453.98 2826.16 1449.76L2813.31 1463.75L2800.46 1477.75C2811.96 1488.31 2829.58 1495.6 2848.51 1500.35C2868.01 1505.24 2891.18 1508 2915.81 1508V1489ZM2813.31 1463.75L2819.28 1445.71C2802.98 1440.32 2790.96 1433.95 2783.38 1427.66C2775.73 1421.3 2774.55 1416.78 2774.54 1414.64L2755.54 1414.71L2736.54 1414.79C2736.61 1432.42 2746.7 1446.58 2759.1 1456.89C2771.58 1467.26 2788.41 1475.52 2807.34 1481.79L2813.31 1463.75ZM2755.54 1414.71L2774.54 1414.64C2774.54 1412.46 2775.73 1407.78 2783.76 1401.18C2791.67 1394.68 2804.22 1388.12 2821.16 1382.62L2815.29 1364.55L2809.42 1346.48C2789.85 1352.84 2772.48 1361.26 2759.63 1371.82C2746.89 1382.29 2736.47 1396.76 2736.54 1414.79L2755.54 1414.71ZM2815.29 1364.55L2827.21 1379.34C2832.65 1374.96 2843.43 1369.92 2859.63 1366.05C2875.39 1362.28 2894.72 1360 2915.81 1360V1341V1322C2892.13 1322 2869.8 1324.55 2850.8 1329.09C2832.23 1333.53 2815.14 1340.26 2803.36 1349.76L2815.29 1364.55Z"
                  fill="black"
                  mask="url(#path-24-inside-10_17_636)"
                />
                <rect
                  x="2201.48"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-27-inside-11_17_636" fill="white">
                  <path d="M2237.75 257C2281.4 257 2319.12 266.191 2336.94 279.516C2374.34 291.148 2398.4 309.304 2398.48 329.769C2398.56 349.598 2376.11 367.39 2340.77 379.258C2325.03 394.303 2284.84 405 2237.75 405C2191.17 405 2151.35 394.537 2135.25 379.752C2100.01 368.091 2077.56 350.48 2077.48 330.713C2077.4 310.506 2100.72 292.412 2137.23 280.55C2154.44 266.669 2192.98 257 2237.75 257Z" />
                </mask>
                <path
                  d="M2237.75 257C2281.4 257 2319.12 266.191 2336.94 279.516C2374.34 291.148 2398.4 309.304 2398.48 329.769C2398.56 349.598 2376.11 367.39 2340.77 379.258C2325.03 394.303 2284.84 405 2237.75 405C2191.17 405 2151.35 394.537 2135.25 379.752C2100.01 368.091 2077.56 350.48 2077.48 330.713C2077.4 310.506 2100.72 292.412 2137.23 280.55C2154.44 266.669 2192.98 257 2237.75 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M2237.75 257L2237.75 238L2237.75 238L2237.75 257ZM2336.94 279.516L2325.56 294.731L2328.18 296.688L2331.3 297.658L2336.94 279.516ZM2398.48 329.769L2417.48 329.694L2417.48 329.694L2398.48 329.769ZM2340.77 379.258L2334.73 361.247L2330.71 362.595L2327.65 365.523L2340.77 379.258ZM2237.75 405L2237.75 424H2237.75V405ZM2135.25 379.752L2148.1 365.759L2145.1 362.997L2141.22 361.714L2135.25 379.752ZM2077.48 330.713L2058.48 330.788L2058.48 330.788L2077.48 330.713ZM2137.23 280.55L2143.1 298.62L2146.43 297.538L2149.15 295.341L2137.23 280.55ZM2237.75 257V276C2258.31 276 2277.2 278.171 2292.75 281.771C2308.66 285.456 2319.65 290.311 2325.56 294.731L2336.94 279.516L2348.32 264.301C2336.41 255.395 2319.64 248.993 2301.32 244.751C2282.64 240.425 2260.84 238 2237.75 238V257ZM2336.94 279.516L2331.3 297.658C2348.68 303.064 2361.63 309.61 2369.85 316.173C2378.19 322.844 2379.48 327.631 2379.48 329.844L2398.48 329.769L2417.48 329.694C2417.41 311.441 2406.62 296.918 2393.57 286.487C2380.38 275.947 2362.6 267.599 2342.58 261.373L2336.94 279.516ZM2398.48 329.769L2379.48 329.843C2379.49 331.984 2378.35 336.522 2370.69 342.945C2363.12 349.3 2351.08 355.755 2334.73 361.247L2340.77 379.258L2346.82 397.269C2365.81 390.893 2382.65 382.518 2395.12 372.052C2407.51 361.655 2417.55 347.382 2417.48 329.694L2398.48 329.769ZM2340.77 379.258L2327.65 365.523C2323.31 369.67 2313.12 375.086 2296.33 379.357C2280.17 383.47 2259.95 386 2237.75 386V405V424C2262.65 424 2286.06 421.182 2305.7 416.184C2324.72 411.345 2342.5 403.89 2353.9 392.993L2340.77 379.258ZM2237.75 405L2237.75 386C2215.8 386 2195.77 383.526 2179.69 379.492C2163.04 375.313 2152.7 369.978 2148.1 365.759L2135.25 379.752L2122.4 393.745C2133.9 404.31 2151.52 411.6 2170.45 416.349C2189.95 421.243 2213.12 424 2237.75 424L2237.75 405ZM2135.25 379.752L2141.22 361.714C2124.92 356.32 2112.9 349.95 2105.32 343.658C2097.67 337.299 2096.49 332.779 2096.48 330.638L2077.48 330.713L2058.48 330.788C2058.55 348.414 2068.64 362.583 2081.04 372.886C2093.52 383.258 2110.34 391.523 2129.28 397.79L2135.25 379.752ZM2077.48 330.713L2096.48 330.638C2096.47 328.459 2097.67 323.777 2105.7 317.182C2113.61 310.677 2126.16 304.123 2143.1 298.62L2137.23 280.55L2131.36 262.48C2111.79 268.839 2094.42 277.263 2081.57 287.823C2068.83 298.291 2058.41 312.76 2058.48 330.788L2077.48 330.713ZM2137.23 280.55L2149.15 295.341C2154.59 290.96 2165.38 285.918 2181.57 282.049C2197.33 278.285 2216.66 276 2237.75 276L2237.75 257L2237.75 238C2214.07 238 2191.74 240.55 2172.74 245.089C2154.17 249.525 2137.08 256.258 2125.3 265.759L2137.23 280.55Z"
                  fill="black"
                  mask="url(#path-27-inside-11_17_636)"
                />
                <mask id="path-29-inside-12_17_636" fill="white">
                  <path d="M2237.75 963C2281.4 963 2319.12 972.191 2336.94 985.516C2374.34 997.148 2398.4 1015.3 2398.48 1035.77C2398.56 1055.6 2376.11 1073.39 2340.77 1085.26C2325.03 1100.3 2284.84 1111 2237.75 1111C2191.17 1111 2151.35 1100.54 2135.25 1085.75C2100.01 1074.09 2077.56 1056.48 2077.48 1036.71C2077.4 1016.51 2100.72 998.412 2137.23 986.55C2154.44 972.669 2192.98 963 2237.75 963Z" />
                </mask>
                <path
                  d="M2237.75 963C2281.4 963 2319.12 972.191 2336.94 985.516C2374.34 997.148 2398.4 1015.3 2398.48 1035.77C2398.56 1055.6 2376.11 1073.39 2340.77 1085.26C2325.03 1100.3 2284.84 1111 2237.75 1111C2191.17 1111 2151.35 1100.54 2135.25 1085.75C2100.01 1074.09 2077.56 1056.48 2077.48 1036.71C2077.4 1016.51 2100.72 998.412 2137.23 986.55C2154.44 972.669 2192.98 963 2237.75 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M2237.75 963L2237.75 944L2237.75 944L2237.75 963ZM2336.94 985.516L2325.56 1000.73L2328.18 1002.69L2331.3 1003.66L2336.94 985.516ZM2398.48 1035.77L2417.48 1035.69L2417.48 1035.69L2398.48 1035.77ZM2340.77 1085.26L2334.73 1067.25L2330.71 1068.6L2327.65 1071.52L2340.77 1085.26ZM2237.75 1111L2237.75 1130H2237.75V1111ZM2135.25 1085.75L2148.1 1071.76L2145.1 1069L2141.22 1067.71L2135.25 1085.75ZM2077.48 1036.71L2058.48 1036.79L2058.48 1036.79L2077.48 1036.71ZM2137.23 986.55L2143.1 1004.62L2146.43 1003.54L2149.15 1001.34L2137.23 986.55ZM2237.75 963V982C2258.31 982 2277.2 984.171 2292.75 987.771C2308.66 991.456 2319.65 996.311 2325.56 1000.73L2336.94 985.516L2348.32 970.301C2336.41 961.395 2319.64 954.993 2301.32 950.751C2282.64 946.425 2260.84 944 2237.75 944V963ZM2336.94 985.516L2331.3 1003.66C2348.68 1009.06 2361.63 1015.61 2369.85 1022.17C2378.19 1028.84 2379.48 1033.63 2379.48 1035.84L2398.48 1035.77L2417.48 1035.69C2417.41 1017.44 2406.62 1002.92 2393.57 992.487C2380.38 981.947 2362.6 973.599 2342.58 967.373L2336.94 985.516ZM2398.48 1035.77L2379.48 1035.84C2379.49 1037.98 2378.35 1042.52 2370.69 1048.95C2363.12 1055.3 2351.08 1061.75 2334.73 1067.25L2340.77 1085.26L2346.82 1103.27C2365.81 1096.89 2382.65 1088.52 2395.12 1078.05C2407.51 1067.65 2417.55 1053.38 2417.48 1035.69L2398.48 1035.77ZM2340.77 1085.26L2327.65 1071.52C2323.31 1075.67 2313.12 1081.09 2296.33 1085.36C2280.17 1089.47 2259.95 1092 2237.75 1092V1111V1130C2262.65 1130 2286.06 1127.18 2305.7 1122.18C2324.72 1117.35 2342.5 1109.89 2353.9 1098.99L2340.77 1085.26ZM2237.75 1111L2237.75 1092C2215.8 1092 2195.77 1089.53 2179.69 1085.49C2163.04 1081.31 2152.7 1075.98 2148.1 1071.76L2135.25 1085.75L2122.4 1099.74C2133.9 1110.31 2151.52 1117.6 2170.45 1122.35C2189.95 1127.24 2213.12 1130 2237.75 1130L2237.75 1111ZM2135.25 1085.75L2141.22 1067.71C2124.92 1062.32 2112.9 1055.95 2105.32 1049.66C2097.67 1043.3 2096.49 1038.78 2096.48 1036.64L2077.48 1036.71L2058.48 1036.79C2058.55 1054.41 2068.64 1068.58 2081.04 1078.89C2093.52 1089.26 2110.34 1097.52 2129.28 1103.79L2135.25 1085.75ZM2077.48 1036.71L2096.48 1036.64C2096.48 1034.46 2097.67 1029.78 2105.7 1023.18C2113.61 1016.68 2126.16 1010.12 2143.1 1004.62L2137.23 986.55L2131.36 968.48C2111.79 974.839 2094.42 983.263 2081.57 993.823C2068.83 1004.29 2058.41 1018.76 2058.48 1036.79L2077.48 1036.71ZM2137.23 986.55L2149.15 1001.34C2154.59 996.96 2165.38 991.918 2181.57 988.049C2197.33 984.285 2216.66 982 2237.75 982L2237.75 963L2237.75 944C2214.07 944 2191.74 946.55 2172.74 951.089C2154.17 955.525 2137.08 962.258 2125.3 971.759L2137.23 986.55Z"
                  fill="black"
                  mask="url(#path-29-inside-12_17_636)"
                />
                <mask id="path-31-inside-13_17_636" fill="white">
                  <path d="M2237.75 1089C2281.4 1089 2319.12 1098.19 2336.94 1111.52C2374.34 1123.15 2398.4 1141.3 2398.48 1161.77C2398.56 1181.6 2376.11 1199.39 2340.77 1211.26C2325.03 1226.3 2284.84 1237 2237.75 1237C2191.17 1237 2151.35 1226.54 2135.25 1211.75C2100.01 1200.09 2077.56 1182.48 2077.48 1162.71C2077.4 1142.51 2100.72 1124.41 2137.23 1112.55C2154.44 1098.67 2192.98 1089 2237.75 1089Z" />
                </mask>
                <path
                  d="M2237.75 1089C2281.4 1089 2319.12 1098.19 2336.94 1111.52C2374.34 1123.15 2398.4 1141.3 2398.48 1161.77C2398.56 1181.6 2376.11 1199.39 2340.77 1211.26C2325.03 1226.3 2284.84 1237 2237.75 1237C2191.17 1237 2151.35 1226.54 2135.25 1211.75C2100.01 1200.09 2077.56 1182.48 2077.48 1162.71C2077.4 1142.51 2100.72 1124.41 2137.23 1112.55C2154.44 1098.67 2192.98 1089 2237.75 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M2237.75 1089L2237.75 1070H2237.75V1089ZM2336.94 1111.52L2325.56 1126.73L2328.18 1128.69L2331.3 1129.66L2336.94 1111.52ZM2398.48 1161.77L2417.48 1161.69L2417.48 1161.69L2398.48 1161.77ZM2340.77 1211.26L2334.72 1193.25L2330.71 1194.6L2327.65 1197.52L2340.77 1211.26ZM2237.75 1237L2237.75 1256H2237.75L2237.75 1237ZM2135.25 1211.75L2148.1 1197.76L2145.1 1195L2141.22 1193.71L2135.25 1211.75ZM2077.48 1162.71L2058.48 1162.79L2058.48 1162.79L2077.48 1162.71ZM2137.23 1112.55L2143.1 1130.62L2146.43 1129.54L2149.15 1127.34L2137.23 1112.55ZM2237.75 1089L2237.75 1108C2258.31 1108 2277.2 1110.17 2292.75 1113.77C2308.66 1117.46 2319.65 1122.31 2325.56 1126.73L2336.94 1111.52L2348.32 1096.3C2336.41 1087.39 2319.64 1080.99 2301.32 1076.75C2282.64 1072.42 2260.84 1070 2237.75 1070L2237.75 1089ZM2336.94 1111.52L2331.3 1129.66C2348.68 1135.06 2361.63 1141.61 2369.85 1148.17C2378.19 1154.84 2379.48 1159.63 2379.48 1161.84L2398.48 1161.77L2417.48 1161.69C2417.41 1143.44 2406.62 1128.92 2393.57 1118.49C2380.38 1107.95 2362.6 1099.6 2342.58 1093.37L2336.94 1111.52ZM2398.48 1161.77L2379.48 1161.84C2379.49 1163.98 2378.35 1168.52 2370.69 1174.95C2363.12 1181.3 2351.08 1187.75 2334.72 1193.25L2340.77 1211.26L2346.82 1229.27C2365.81 1222.89 2382.65 1214.52 2395.12 1204.05C2407.51 1193.66 2417.55 1179.38 2417.48 1161.69L2398.48 1161.77ZM2340.77 1211.26L2327.65 1197.52C2323.31 1201.67 2313.12 1207.09 2296.33 1211.36C2280.17 1215.47 2259.95 1218 2237.75 1218L2237.75 1237L2237.75 1256C2262.65 1256 2286.06 1253.18 2305.7 1248.18C2324.72 1243.35 2342.5 1235.89 2353.9 1224.99L2340.77 1211.26ZM2237.75 1237V1218C2215.8 1218 2195.77 1215.53 2179.69 1211.49C2163.04 1207.31 2152.7 1201.98 2148.1 1197.76L2135.25 1211.75L2122.4 1225.75C2133.9 1236.31 2151.52 1243.6 2170.45 1248.35C2189.95 1253.24 2213.12 1256 2237.75 1256V1237ZM2135.25 1211.75L2141.22 1193.71C2124.92 1188.32 2112.9 1181.95 2105.32 1175.66C2097.67 1169.3 2096.49 1164.78 2096.48 1162.64L2077.48 1162.71L2058.48 1162.79C2058.55 1180.42 2068.64 1194.58 2081.04 1204.89C2093.52 1215.26 2110.35 1223.52 2129.28 1229.79L2135.25 1211.75ZM2077.48 1162.71L2096.48 1162.64C2096.47 1160.46 2097.67 1155.78 2105.7 1149.18C2113.61 1142.68 2126.16 1136.12 2143.1 1130.62L2137.23 1112.55L2131.35 1094.48C2111.79 1100.84 2094.42 1109.26 2081.57 1119.82C2068.83 1130.29 2058.41 1144.76 2058.48 1162.79L2077.48 1162.71ZM2137.23 1112.55L2149.15 1127.34C2154.59 1122.96 2165.37 1117.92 2181.57 1114.05C2197.33 1110.28 2216.66 1108 2237.75 1108V1089V1070C2214.07 1070 2191.74 1072.55 2172.74 1077.09C2154.17 1081.53 2137.08 1088.26 2125.3 1097.76L2137.23 1112.55Z"
                  fill="black"
                  mask="url(#path-31-inside-13_17_636)"
                />
                <mask id="path-33-inside-14_17_636" fill="white">
                  <path d="M2237.75 1215C2281.4 1215 2319.12 1224.19 2336.94 1237.52C2374.34 1249.15 2398.4 1267.3 2398.48 1287.77C2398.56 1307.6 2376.11 1325.39 2340.77 1337.26C2325.03 1352.3 2284.84 1363 2237.75 1363C2191.17 1363 2151.35 1352.54 2135.25 1337.75C2100.01 1326.09 2077.56 1308.48 2077.48 1288.71C2077.4 1268.51 2100.72 1250.41 2137.23 1238.55C2154.44 1224.67 2192.98 1215 2237.75 1215Z" />
                </mask>
                <path
                  d="M2237.75 1215C2281.4 1215 2319.12 1224.19 2336.94 1237.52C2374.34 1249.15 2398.4 1267.3 2398.48 1287.77C2398.56 1307.6 2376.11 1325.39 2340.77 1337.26C2325.03 1352.3 2284.84 1363 2237.75 1363C2191.17 1363 2151.35 1352.54 2135.25 1337.75C2100.01 1326.09 2077.56 1308.48 2077.48 1288.71C2077.4 1268.51 2100.72 1250.41 2137.23 1238.55C2154.44 1224.67 2192.98 1215 2237.75 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M2237.75 1215L2237.75 1196H2237.75V1215ZM2336.94 1237.52L2325.56 1252.73L2328.18 1254.69L2331.3 1255.66L2336.94 1237.52ZM2398.48 1287.77L2417.48 1287.69L2417.48 1287.69L2398.48 1287.77ZM2340.77 1337.26L2334.72 1319.25L2330.71 1320.6L2327.65 1323.52L2340.77 1337.26ZM2237.75 1363L2237.75 1382H2237.75L2237.75 1363ZM2135.25 1337.75L2148.1 1323.76L2145.1 1321L2141.22 1319.71L2135.25 1337.75ZM2077.48 1288.71L2058.48 1288.79L2058.48 1288.79L2077.48 1288.71ZM2137.23 1238.55L2143.1 1256.62L2146.43 1255.54L2149.15 1253.34L2137.23 1238.55ZM2237.75 1215L2237.75 1234C2258.31 1234 2277.2 1236.17 2292.75 1239.77C2308.66 1243.46 2319.65 1248.31 2325.56 1252.73L2336.94 1237.52L2348.32 1222.3C2336.41 1213.39 2319.64 1206.99 2301.32 1202.75C2282.64 1198.42 2260.84 1196 2237.75 1196L2237.75 1215ZM2336.94 1237.52L2331.3 1255.66C2348.68 1261.06 2361.63 1267.61 2369.85 1274.17C2378.19 1280.84 2379.48 1285.63 2379.48 1287.84L2398.48 1287.77L2417.48 1287.69C2417.41 1269.44 2406.62 1254.92 2393.57 1244.49C2380.38 1233.95 2362.6 1225.6 2342.58 1219.37L2336.94 1237.52ZM2398.48 1287.77L2379.48 1287.84C2379.49 1289.98 2378.35 1294.52 2370.69 1300.95C2363.12 1307.3 2351.08 1313.75 2334.72 1319.25L2340.77 1337.26L2346.82 1355.27C2365.81 1348.89 2382.65 1340.52 2395.12 1330.05C2407.51 1319.66 2417.55 1305.38 2417.48 1287.69L2398.48 1287.77ZM2340.77 1337.26L2327.65 1323.52C2323.31 1327.67 2313.12 1333.09 2296.33 1337.36C2280.17 1341.47 2259.95 1344 2237.75 1344L2237.75 1363L2237.75 1382C2262.65 1382 2286.06 1379.18 2305.7 1374.18C2324.72 1369.35 2342.5 1361.89 2353.9 1350.99L2340.77 1337.26ZM2237.75 1363V1344C2215.8 1344 2195.77 1341.53 2179.69 1337.49C2163.04 1333.31 2152.7 1327.98 2148.1 1323.76L2135.25 1337.75L2122.4 1351.75C2133.9 1362.31 2151.52 1369.6 2170.45 1374.35C2189.95 1379.24 2213.12 1382 2237.75 1382V1363ZM2135.25 1337.75L2141.22 1319.71C2124.92 1314.32 2112.9 1307.95 2105.32 1301.66C2097.67 1295.3 2096.49 1290.78 2096.48 1288.64L2077.48 1288.71L2058.48 1288.79C2058.55 1306.42 2068.64 1320.58 2081.04 1330.89C2093.52 1341.26 2110.35 1349.52 2129.28 1355.79L2135.25 1337.75ZM2077.48 1288.71L2096.48 1288.64C2096.47 1286.46 2097.67 1281.78 2105.7 1275.18C2113.61 1268.68 2126.16 1262.12 2143.1 1256.62L2137.23 1238.55L2131.35 1220.48C2111.79 1226.84 2094.42 1235.26 2081.57 1245.82C2068.83 1256.29 2058.41 1270.76 2058.48 1288.79L2077.48 1288.71ZM2137.23 1238.55L2149.15 1253.34C2154.59 1248.96 2165.37 1243.92 2181.57 1240.05C2197.33 1236.28 2216.66 1234 2237.75 1234V1215V1196C2214.07 1196 2191.74 1198.55 2172.74 1203.09C2154.17 1207.53 2137.08 1214.26 2125.3 1223.76L2137.23 1238.55Z"
                  fill="black"
                  mask="url(#path-33-inside-14_17_636)"
                />
                <mask id="path-35-inside-15_17_636" fill="white">
                  <path d="M2237.75 1341C2281.4 1341 2319.12 1350.19 2336.94 1363.52C2374.34 1375.15 2398.4 1393.3 2398.48 1413.77C2398.56 1433.6 2376.11 1451.39 2340.77 1463.26C2325.03 1478.3 2284.84 1489 2237.75 1489C2191.17 1489 2151.35 1478.54 2135.25 1463.75C2100.01 1452.09 2077.56 1434.48 2077.48 1414.71C2077.4 1394.51 2100.72 1376.41 2137.23 1364.55C2154.44 1350.67 2192.98 1341 2237.75 1341Z" />
                </mask>
                <path
                  d="M2237.75 1341C2281.4 1341 2319.12 1350.19 2336.94 1363.52C2374.34 1375.15 2398.4 1393.3 2398.48 1413.77C2398.56 1433.6 2376.11 1451.39 2340.77 1463.26C2325.03 1478.3 2284.84 1489 2237.75 1489C2191.17 1489 2151.35 1478.54 2135.25 1463.75C2100.01 1452.09 2077.56 1434.48 2077.48 1414.71C2077.4 1394.51 2100.72 1376.41 2137.23 1364.55C2154.44 1350.67 2192.98 1341 2237.75 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M2237.75 1341L2237.75 1322H2237.75V1341ZM2336.94 1363.52L2325.56 1378.73L2328.18 1380.69L2331.3 1381.66L2336.94 1363.52ZM2398.48 1413.77L2417.48 1413.69L2417.48 1413.69L2398.48 1413.77ZM2340.77 1463.26L2334.72 1445.25L2330.71 1446.6L2327.65 1449.52L2340.77 1463.26ZM2237.75 1489L2237.75 1508H2237.75L2237.75 1489ZM2135.25 1463.75L2148.1 1449.76L2145.1 1447L2141.22 1445.71L2135.25 1463.75ZM2077.48 1414.71L2058.48 1414.79L2058.48 1414.79L2077.48 1414.71ZM2137.23 1364.55L2143.1 1382.62L2146.43 1381.54L2149.15 1379.34L2137.23 1364.55ZM2237.75 1341L2237.75 1360C2258.31 1360 2277.2 1362.17 2292.75 1365.77C2308.66 1369.46 2319.65 1374.31 2325.56 1378.73L2336.94 1363.52L2348.32 1348.3C2336.41 1339.39 2319.64 1332.99 2301.32 1328.75C2282.64 1324.42 2260.84 1322 2237.75 1322L2237.75 1341ZM2336.94 1363.52L2331.3 1381.66C2348.68 1387.06 2361.63 1393.61 2369.85 1400.17C2378.19 1406.84 2379.48 1411.63 2379.48 1413.84L2398.48 1413.77L2417.48 1413.69C2417.41 1395.44 2406.62 1380.92 2393.57 1370.49C2380.38 1359.95 2362.6 1351.6 2342.58 1345.37L2336.94 1363.52ZM2398.48 1413.77L2379.48 1413.84C2379.49 1415.98 2378.35 1420.52 2370.69 1426.95C2363.12 1433.3 2351.08 1439.75 2334.72 1445.25L2340.77 1463.26L2346.82 1481.27C2365.81 1474.89 2382.65 1466.52 2395.12 1456.05C2407.51 1445.66 2417.55 1431.38 2417.48 1413.69L2398.48 1413.77ZM2340.77 1463.26L2327.65 1449.52C2323.31 1453.67 2313.12 1459.09 2296.33 1463.36C2280.17 1467.47 2259.95 1470 2237.75 1470L2237.75 1489L2237.75 1508C2262.65 1508 2286.06 1505.18 2305.7 1500.18C2324.72 1495.35 2342.5 1487.89 2353.9 1476.99L2340.77 1463.26ZM2237.75 1489V1470C2215.8 1470 2195.77 1467.53 2179.69 1463.49C2163.04 1459.31 2152.7 1453.98 2148.1 1449.76L2135.25 1463.75L2122.4 1477.75C2133.9 1488.31 2151.52 1495.6 2170.45 1500.35C2189.95 1505.24 2213.12 1508 2237.75 1508V1489ZM2135.25 1463.75L2141.22 1445.71C2124.92 1440.32 2112.9 1433.95 2105.32 1427.66C2097.67 1421.3 2096.49 1416.78 2096.48 1414.64L2077.48 1414.71L2058.48 1414.79C2058.55 1432.42 2068.64 1446.58 2081.04 1456.89C2093.52 1467.26 2110.35 1475.52 2129.28 1481.79L2135.25 1463.75ZM2077.48 1414.71L2096.48 1414.64C2096.47 1412.46 2097.67 1407.78 2105.7 1401.18C2113.61 1394.68 2126.16 1388.12 2143.1 1382.62L2137.23 1364.55L2131.35 1346.48C2111.79 1352.84 2094.42 1361.26 2081.57 1371.82C2068.83 1382.29 2058.41 1396.76 2058.48 1414.79L2077.48 1414.71ZM2137.23 1364.55L2149.15 1379.34C2154.59 1374.96 2165.37 1369.92 2181.57 1366.05C2197.33 1362.28 2216.66 1360 2237.75 1360V1341V1322C2214.07 1322 2191.74 1324.55 2172.74 1329.09C2154.17 1333.53 2137.08 1340.26 2125.3 1349.76L2137.23 1364.55Z"
                  fill="black"
                  mask="url(#path-35-inside-15_17_636)"
                />
                <rect
                  x="1862.45"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="1893.77"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-39-inside-16_17_636" fill="white">
                  <path d="M1898.72 257C1942.37 257 1980.09 266.191 1997.91 279.516C2035.31 291.148 2059.37 309.304 2059.45 329.769C2059.53 349.598 2037.08 367.39 2001.74 379.258C1986 394.303 1945.81 405 1898.72 405C1852.14 405 1812.32 394.537 1796.22 379.752C1760.98 368.091 1738.53 350.48 1738.45 330.713C1738.37 310.506 1761.69 292.412 1798.2 280.55C1815.41 266.669 1853.95 257 1898.72 257Z" />
                </mask>
                <path
                  d="M1898.72 257C1942.37 257 1980.09 266.191 1997.91 279.516C2035.31 291.148 2059.37 309.304 2059.45 329.769C2059.53 349.598 2037.08 367.39 2001.74 379.258C1986 394.303 1945.81 405 1898.72 405C1852.14 405 1812.32 394.537 1796.22 379.752C1760.98 368.091 1738.53 350.48 1738.45 330.713C1738.37 310.506 1761.69 292.412 1798.2 280.55C1815.41 266.669 1853.95 257 1898.72 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M1898.72 257L1898.72 238L1898.72 238L1898.72 257ZM1997.91 279.516L1986.53 294.731L1989.15 296.688L1992.27 297.658L1997.91 279.516ZM2059.45 329.769L2078.45 329.694L2078.45 329.694L2059.45 329.769ZM2001.74 379.258L1995.7 361.247L1991.68 362.595L1988.62 365.523L2001.74 379.258ZM1898.72 405L1898.72 424H1898.72V405ZM1796.22 379.752L1809.07 365.759L1806.07 362.997L1802.19 361.714L1796.22 379.752ZM1738.45 330.713L1719.45 330.788L1719.45 330.788L1738.45 330.713ZM1798.2 280.55L1804.07 298.62L1807.4 297.538L1810.12 295.341L1798.2 280.55ZM1898.72 257V276C1919.28 276 1938.17 278.171 1953.72 281.771C1969.63 285.456 1980.62 290.311 1986.53 294.731L1997.91 279.516L2009.29 264.301C1997.38 255.395 1980.61 248.993 1962.29 244.751C1943.61 240.425 1921.81 238 1898.72 238V257ZM1997.91 279.516L1992.27 297.658C2009.65 303.064 2022.6 309.61 2030.82 316.173C2039.16 322.844 2040.44 327.631 2040.45 329.844L2059.45 329.769L2078.45 329.694C2078.38 311.441 2067.59 296.918 2054.54 286.487C2041.35 275.947 2023.57 267.599 2003.55 261.373L1997.91 279.516ZM2059.45 329.769L2040.45 329.843C2040.46 331.984 2039.32 336.522 2031.66 342.945C2024.09 349.3 2012.05 355.755 1995.7 361.247L2001.74 379.258L2007.79 397.269C2026.78 390.893 2043.62 382.518 2056.09 372.052C2068.48 361.655 2078.52 347.382 2078.45 329.694L2059.45 329.769ZM2001.74 379.258L1988.62 365.523C1984.28 369.67 1974.09 375.086 1957.3 379.357C1941.14 383.47 1920.92 386 1898.72 386V405V424C1923.62 424 1947.03 421.182 1966.67 416.184C1985.69 411.345 2003.47 403.89 2014.87 392.993L2001.74 379.258ZM1898.72 405L1898.72 386C1876.77 386 1856.74 383.526 1840.66 379.492C1824.01 375.313 1813.67 369.978 1809.07 365.759L1796.22 379.752L1783.37 393.745C1794.87 404.31 1812.49 411.6 1831.41 416.349C1850.92 421.243 1874.09 424 1898.72 424L1898.72 405ZM1796.22 379.752L1802.19 361.714C1785.89 356.32 1773.87 349.95 1766.29 343.658C1758.64 337.299 1757.46 332.779 1757.45 330.638L1738.45 330.713L1719.45 330.788C1719.52 348.414 1729.61 362.583 1742.01 372.886C1754.49 383.258 1771.31 391.523 1790.25 397.79L1796.22 379.752ZM1738.45 330.713L1757.45 330.638C1757.44 328.459 1758.64 323.777 1766.67 317.182C1774.58 310.677 1787.13 304.123 1804.07 298.62L1798.2 280.55L1792.33 262.48C1772.76 268.839 1755.39 277.263 1742.54 287.823C1729.8 298.291 1719.38 312.76 1719.45 330.788L1738.45 330.713ZM1798.2 280.55L1810.12 295.341C1815.56 290.96 1826.34 285.918 1842.54 282.049C1858.3 278.285 1877.63 276 1898.72 276L1898.72 257L1898.72 238C1875.04 238 1852.71 240.55 1833.71 245.089C1815.14 249.525 1798.05 256.258 1786.27 265.759L1798.2 280.55Z"
                  fill="black"
                  mask="url(#path-39-inside-16_17_636)"
                />
                <mask id="path-41-inside-17_17_636" fill="white">
                  <path d="M1898.72 963C1942.37 963 1980.09 972.191 1997.91 985.516C2035.31 997.148 2059.37 1015.3 2059.45 1035.77C2059.53 1055.6 2037.08 1073.39 2001.74 1085.26C1986 1100.3 1945.81 1111 1898.72 1111C1852.14 1111 1812.32 1100.54 1796.22 1085.75C1760.98 1074.09 1738.53 1056.48 1738.45 1036.71C1738.37 1016.51 1761.69 998.412 1798.2 986.55C1815.41 972.669 1853.95 963 1898.72 963Z" />
                </mask>
                <path
                  d="M1898.72 963C1942.37 963 1980.09 972.191 1997.91 985.516C2035.31 997.148 2059.37 1015.3 2059.45 1035.77C2059.53 1055.6 2037.08 1073.39 2001.74 1085.26C1986 1100.3 1945.81 1111 1898.72 1111C1852.14 1111 1812.32 1100.54 1796.22 1085.75C1760.98 1074.09 1738.53 1056.48 1738.45 1036.71C1738.37 1016.51 1761.69 998.412 1798.2 986.55C1815.41 972.669 1853.95 963 1898.72 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M1898.72 963L1898.72 944L1898.72 944L1898.72 963ZM1997.91 985.516L1986.53 1000.73L1989.15 1002.69L1992.27 1003.66L1997.91 985.516ZM2059.45 1035.77L2078.45 1035.69L2078.45 1035.69L2059.45 1035.77ZM2001.74 1085.26L1995.7 1067.25L1991.68 1068.6L1988.62 1071.52L2001.74 1085.26ZM1898.72 1111L1898.72 1130H1898.72V1111ZM1796.22 1085.75L1809.07 1071.76L1806.07 1069L1802.19 1067.71L1796.22 1085.75ZM1738.45 1036.71L1719.45 1036.79L1719.45 1036.79L1738.45 1036.71ZM1798.2 986.55L1804.07 1004.62L1807.4 1003.54L1810.12 1001.34L1798.2 986.55ZM1898.72 963V982C1919.28 982 1938.17 984.171 1953.72 987.771C1969.63 991.456 1980.62 996.311 1986.53 1000.73L1997.91 985.516L2009.29 970.301C1997.38 961.395 1980.61 954.993 1962.29 950.751C1943.61 946.425 1921.81 944 1898.72 944V963ZM1997.91 985.516L1992.27 1003.66C2009.65 1009.06 2022.6 1015.61 2030.82 1022.17C2039.16 1028.84 2040.44 1033.63 2040.45 1035.84L2059.45 1035.77L2078.45 1035.69C2078.38 1017.44 2067.59 1002.92 2054.54 992.487C2041.35 981.947 2023.57 973.599 2003.55 967.373L1997.91 985.516ZM2059.45 1035.77L2040.45 1035.84C2040.46 1037.98 2039.32 1042.52 2031.66 1048.95C2024.09 1055.3 2012.05 1061.75 1995.7 1067.25L2001.74 1085.26L2007.79 1103.27C2026.78 1096.89 2043.62 1088.52 2056.09 1078.05C2068.48 1067.65 2078.52 1053.38 2078.45 1035.69L2059.45 1035.77ZM2001.74 1085.26L1988.62 1071.52C1984.28 1075.67 1974.09 1081.09 1957.3 1085.36C1941.14 1089.47 1920.92 1092 1898.72 1092V1111V1130C1923.62 1130 1947.03 1127.18 1966.67 1122.18C1985.69 1117.35 2003.47 1109.89 2014.87 1098.99L2001.74 1085.26ZM1898.72 1111L1898.72 1092C1876.77 1092 1856.74 1089.53 1840.66 1085.49C1824.01 1081.31 1813.67 1075.98 1809.07 1071.76L1796.22 1085.75L1783.37 1099.74C1794.87 1110.31 1812.49 1117.6 1831.41 1122.35C1850.92 1127.24 1874.09 1130 1898.72 1130L1898.72 1111ZM1796.22 1085.75L1802.19 1067.71C1785.89 1062.32 1773.87 1055.95 1766.29 1049.66C1758.64 1043.3 1757.46 1038.78 1757.45 1036.64L1738.45 1036.71L1719.45 1036.79C1719.52 1054.41 1729.61 1068.58 1742.01 1078.89C1754.49 1089.26 1771.31 1097.52 1790.25 1103.79L1796.22 1085.75ZM1738.45 1036.71L1757.45 1036.64C1757.44 1034.46 1758.64 1029.78 1766.67 1023.18C1774.58 1016.68 1787.13 1010.12 1804.07 1004.62L1798.2 986.55L1792.33 968.48C1772.76 974.839 1755.39 983.263 1742.54 993.823C1729.8 1004.29 1719.38 1018.76 1719.45 1036.79L1738.45 1036.71ZM1798.2 986.55L1810.12 1001.34C1815.56 996.96 1826.34 991.918 1842.54 988.049C1858.3 984.285 1877.63 982 1898.72 982L1898.72 963L1898.72 944C1875.04 944 1852.71 946.55 1833.71 951.089C1815.14 955.525 1798.05 962.258 1786.27 971.759L1798.2 986.55Z"
                  fill="black"
                  mask="url(#path-41-inside-17_17_636)"
                />
                <mask id="path-43-inside-18_17_636" fill="white">
                  <path d="M1898.72 1089C1942.37 1089 1980.09 1098.19 1997.91 1111.52C2035.31 1123.15 2059.37 1141.3 2059.45 1161.77C2059.53 1181.6 2037.08 1199.39 2001.74 1211.26C1986 1226.3 1945.81 1237 1898.72 1237C1852.14 1237 1812.32 1226.54 1796.22 1211.75C1760.98 1200.09 1738.53 1182.48 1738.45 1162.71C1738.37 1142.51 1761.69 1124.41 1798.2 1112.55C1815.41 1098.67 1853.95 1089 1898.72 1089Z" />
                </mask>
                <path
                  d="M1898.72 1089C1942.37 1089 1980.09 1098.19 1997.91 1111.52C2035.31 1123.15 2059.37 1141.3 2059.45 1161.77C2059.53 1181.6 2037.08 1199.39 2001.74 1211.26C1986 1226.3 1945.81 1237 1898.72 1237C1852.14 1237 1812.32 1226.54 1796.22 1211.75C1760.98 1200.09 1738.53 1182.48 1738.45 1162.71C1738.37 1142.51 1761.69 1124.41 1798.2 1112.55C1815.41 1098.67 1853.95 1089 1898.72 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M1898.72 1089L1898.72 1070H1898.72V1089ZM1997.91 1111.52L1986.53 1126.73L1989.15 1128.69L1992.27 1129.66L1997.91 1111.52ZM2059.45 1161.77L2078.45 1161.69L2078.45 1161.69L2059.45 1161.77ZM2001.74 1211.26L1995.69 1193.25L1991.68 1194.6L1988.62 1197.52L2001.74 1211.26ZM1898.72 1237L1898.72 1256H1898.72L1898.72 1237ZM1796.22 1211.75L1809.07 1197.76L1806.07 1195L1802.19 1193.71L1796.22 1211.75ZM1738.45 1162.71L1719.45 1162.79L1719.45 1162.79L1738.45 1162.71ZM1798.2 1112.55L1804.07 1130.62L1807.4 1129.54L1810.12 1127.34L1798.2 1112.55ZM1898.72 1089L1898.72 1108C1919.28 1108 1938.17 1110.17 1953.72 1113.77C1969.63 1117.46 1980.62 1122.31 1986.53 1126.73L1997.91 1111.52L2009.29 1096.3C1997.38 1087.39 1980.61 1080.99 1962.29 1076.75C1943.61 1072.42 1921.81 1070 1898.72 1070L1898.72 1089ZM1997.91 1111.52L1992.27 1129.66C2009.65 1135.06 2022.6 1141.61 2030.82 1148.17C2039.16 1154.84 2040.44 1159.63 2040.45 1161.84L2059.45 1161.77L2078.45 1161.69C2078.38 1143.44 2067.59 1128.92 2054.54 1118.49C2041.35 1107.95 2023.57 1099.6 2003.55 1093.37L1997.91 1111.52ZM2059.45 1161.77L2040.45 1161.84C2040.46 1163.98 2039.32 1168.52 2031.66 1174.95C2024.09 1181.3 2012.05 1187.75 1995.69 1193.25L2001.74 1211.26L2007.79 1229.27C2026.78 1222.89 2043.62 1214.52 2056.09 1204.05C2068.48 1193.66 2078.52 1179.38 2078.45 1161.69L2059.45 1161.77ZM2001.74 1211.26L1988.62 1197.52C1984.28 1201.67 1974.09 1207.09 1957.3 1211.36C1941.14 1215.47 1920.92 1218 1898.72 1218L1898.72 1237L1898.72 1256C1923.62 1256 1947.03 1253.18 1966.67 1248.18C1985.69 1243.35 2003.47 1235.89 2014.87 1224.99L2001.74 1211.26ZM1898.72 1237V1218C1876.77 1218 1856.74 1215.53 1840.66 1211.49C1824.01 1207.31 1813.67 1201.98 1809.07 1197.76L1796.22 1211.75L1783.37 1225.75C1794.87 1236.31 1812.49 1243.6 1831.41 1248.35C1850.92 1253.24 1874.09 1256 1898.72 1256V1237ZM1796.22 1211.75L1802.19 1193.71C1785.89 1188.32 1773.87 1181.95 1766.29 1175.66C1758.64 1169.3 1757.46 1164.78 1757.45 1162.64L1738.45 1162.71L1719.45 1162.79C1719.52 1180.42 1729.61 1194.58 1742.01 1204.89C1754.49 1215.26 1771.31 1223.52 1790.25 1229.79L1796.22 1211.75ZM1738.45 1162.71L1757.45 1162.64C1757.44 1160.46 1758.64 1155.78 1766.67 1149.18C1774.58 1142.68 1787.13 1136.12 1804.07 1130.62L1798.2 1112.55L1792.32 1094.48C1772.75 1100.84 1755.39 1109.26 1742.54 1119.82C1729.8 1130.29 1719.38 1144.76 1719.45 1162.79L1738.45 1162.71ZM1798.2 1112.55L1810.12 1127.34C1815.56 1122.96 1826.34 1117.92 1842.54 1114.05C1858.3 1110.28 1877.63 1108 1898.72 1108V1089V1070C1875.04 1070 1852.71 1072.55 1833.71 1077.09C1815.14 1081.53 1798.05 1088.26 1786.27 1097.76L1798.2 1112.55Z"
                  fill="black"
                  mask="url(#path-43-inside-18_17_636)"
                />
                <mask id="path-45-inside-19_17_636" fill="white">
                  <path d="M1898.72 1215C1942.37 1215 1980.09 1224.19 1997.91 1237.52C2035.31 1249.15 2059.37 1267.3 2059.45 1287.77C2059.53 1307.6 2037.08 1325.39 2001.74 1337.26C1986 1352.3 1945.81 1363 1898.72 1363C1852.14 1363 1812.32 1352.54 1796.22 1337.75C1760.98 1326.09 1738.53 1308.48 1738.45 1288.71C1738.37 1268.51 1761.69 1250.41 1798.2 1238.55C1815.41 1224.67 1853.95 1215 1898.72 1215Z" />
                </mask>
                <path
                  d="M1898.72 1215C1942.37 1215 1980.09 1224.19 1997.91 1237.52C2035.31 1249.15 2059.37 1267.3 2059.45 1287.77C2059.53 1307.6 2037.08 1325.39 2001.74 1337.26C1986 1352.3 1945.81 1363 1898.72 1363C1852.14 1363 1812.32 1352.54 1796.22 1337.75C1760.98 1326.09 1738.53 1308.48 1738.45 1288.71C1738.37 1268.51 1761.69 1250.41 1798.2 1238.55C1815.41 1224.67 1853.95 1215 1898.72 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M1898.72 1215L1898.72 1196H1898.72V1215ZM1997.91 1237.52L1986.53 1252.73L1989.15 1254.69L1992.27 1255.66L1997.91 1237.52ZM2059.45 1287.77L2078.45 1287.69L2078.45 1287.69L2059.45 1287.77ZM2001.74 1337.26L1995.69 1319.25L1991.68 1320.6L1988.62 1323.52L2001.74 1337.26ZM1898.72 1363L1898.72 1382H1898.72L1898.72 1363ZM1796.22 1337.75L1809.07 1323.76L1806.07 1321L1802.19 1319.71L1796.22 1337.75ZM1738.45 1288.71L1719.45 1288.79L1719.45 1288.79L1738.45 1288.71ZM1798.2 1238.55L1804.07 1256.62L1807.4 1255.54L1810.12 1253.34L1798.2 1238.55ZM1898.72 1215L1898.72 1234C1919.28 1234 1938.17 1236.17 1953.72 1239.77C1969.63 1243.46 1980.62 1248.31 1986.53 1252.73L1997.91 1237.52L2009.29 1222.3C1997.38 1213.39 1980.61 1206.99 1962.29 1202.75C1943.61 1198.42 1921.81 1196 1898.72 1196L1898.72 1215ZM1997.91 1237.52L1992.27 1255.66C2009.65 1261.06 2022.6 1267.61 2030.82 1274.17C2039.16 1280.84 2040.44 1285.63 2040.45 1287.84L2059.45 1287.77L2078.45 1287.69C2078.38 1269.44 2067.59 1254.92 2054.54 1244.49C2041.35 1233.95 2023.57 1225.6 2003.55 1219.37L1997.91 1237.52ZM2059.45 1287.77L2040.45 1287.84C2040.46 1289.98 2039.32 1294.52 2031.66 1300.95C2024.09 1307.3 2012.05 1313.75 1995.69 1319.25L2001.74 1337.26L2007.79 1355.27C2026.78 1348.89 2043.62 1340.52 2056.09 1330.05C2068.48 1319.66 2078.52 1305.38 2078.45 1287.69L2059.45 1287.77ZM2001.74 1337.26L1988.62 1323.52C1984.28 1327.67 1974.09 1333.09 1957.3 1337.36C1941.14 1341.47 1920.92 1344 1898.72 1344L1898.72 1363L1898.72 1382C1923.62 1382 1947.03 1379.18 1966.67 1374.18C1985.69 1369.35 2003.47 1361.89 2014.87 1350.99L2001.74 1337.26ZM1898.72 1363V1344C1876.77 1344 1856.74 1341.53 1840.66 1337.49C1824.01 1333.31 1813.67 1327.98 1809.07 1323.76L1796.22 1337.75L1783.37 1351.75C1794.87 1362.31 1812.49 1369.6 1831.41 1374.35C1850.92 1379.24 1874.09 1382 1898.72 1382V1363ZM1796.22 1337.75L1802.19 1319.71C1785.89 1314.32 1773.87 1307.95 1766.29 1301.66C1758.64 1295.3 1757.46 1290.78 1757.45 1288.64L1738.45 1288.71L1719.45 1288.79C1719.52 1306.42 1729.61 1320.58 1742.01 1330.89C1754.49 1341.26 1771.31 1349.52 1790.25 1355.79L1796.22 1337.75ZM1738.45 1288.71L1757.45 1288.64C1757.44 1286.46 1758.64 1281.78 1766.67 1275.18C1774.58 1268.68 1787.13 1262.12 1804.07 1256.62L1798.2 1238.55L1792.32 1220.48C1772.75 1226.84 1755.39 1235.26 1742.54 1245.82C1729.8 1256.29 1719.38 1270.76 1719.45 1288.79L1738.45 1288.71ZM1798.2 1238.55L1810.12 1253.34C1815.56 1248.96 1826.34 1243.92 1842.54 1240.05C1858.3 1236.28 1877.63 1234 1898.72 1234V1215V1196C1875.04 1196 1852.71 1198.55 1833.71 1203.09C1815.14 1207.53 1798.05 1214.26 1786.27 1223.76L1798.2 1238.55Z"
                  fill="black"
                  mask="url(#path-45-inside-19_17_636)"
                />
                <mask id="path-47-inside-20_17_636" fill="white">
                  <path d="M1898.72 1341C1942.37 1341 1980.09 1350.19 1997.91 1363.52C2035.31 1375.15 2059.37 1393.3 2059.45 1413.77C2059.53 1433.6 2037.08 1451.39 2001.74 1463.26C1986 1478.3 1945.81 1489 1898.72 1489C1852.14 1489 1812.32 1478.54 1796.22 1463.75C1760.98 1452.09 1738.53 1434.48 1738.45 1414.71C1738.37 1394.51 1761.69 1376.41 1798.2 1364.55C1815.41 1350.67 1853.95 1341 1898.72 1341Z" />
                </mask>
                <path
                  d="M1898.72 1341C1942.37 1341 1980.09 1350.19 1997.91 1363.52C2035.31 1375.15 2059.37 1393.3 2059.45 1413.77C2059.53 1433.6 2037.08 1451.39 2001.74 1463.26C1986 1478.3 1945.81 1489 1898.72 1489C1852.14 1489 1812.32 1478.54 1796.22 1463.75C1760.98 1452.09 1738.53 1434.48 1738.45 1414.71C1738.37 1394.51 1761.69 1376.41 1798.2 1364.55C1815.41 1350.67 1853.95 1341 1898.72 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M1898.72 1341L1898.72 1322H1898.72V1341ZM1997.91 1363.52L1986.53 1378.73L1989.15 1380.69L1992.27 1381.66L1997.91 1363.52ZM2059.45 1413.77L2078.45 1413.69L2078.45 1413.69L2059.45 1413.77ZM2001.74 1463.26L1995.69 1445.25L1991.68 1446.6L1988.62 1449.52L2001.74 1463.26ZM1898.72 1489L1898.72 1508H1898.72L1898.72 1489ZM1796.22 1463.75L1809.07 1449.76L1806.07 1447L1802.19 1445.71L1796.22 1463.75ZM1738.45 1414.71L1719.45 1414.79L1719.45 1414.79L1738.45 1414.71ZM1798.2 1364.55L1804.07 1382.62L1807.4 1381.54L1810.12 1379.34L1798.2 1364.55ZM1898.72 1341L1898.72 1360C1919.28 1360 1938.17 1362.17 1953.72 1365.77C1969.63 1369.46 1980.62 1374.31 1986.53 1378.73L1997.91 1363.52L2009.29 1348.3C1997.38 1339.39 1980.61 1332.99 1962.29 1328.75C1943.61 1324.42 1921.81 1322 1898.72 1322L1898.72 1341ZM1997.91 1363.52L1992.27 1381.66C2009.65 1387.06 2022.6 1393.61 2030.82 1400.17C2039.16 1406.84 2040.44 1411.63 2040.45 1413.84L2059.45 1413.77L2078.45 1413.69C2078.38 1395.44 2067.59 1380.92 2054.54 1370.49C2041.35 1359.95 2023.57 1351.6 2003.55 1345.37L1997.91 1363.52ZM2059.45 1413.77L2040.45 1413.84C2040.46 1415.98 2039.32 1420.52 2031.66 1426.95C2024.09 1433.3 2012.05 1439.75 1995.69 1445.25L2001.74 1463.26L2007.79 1481.27C2026.78 1474.89 2043.62 1466.52 2056.09 1456.05C2068.48 1445.66 2078.52 1431.38 2078.45 1413.69L2059.45 1413.77ZM2001.74 1463.26L1988.62 1449.52C1984.28 1453.67 1974.09 1459.09 1957.3 1463.36C1941.14 1467.47 1920.92 1470 1898.72 1470L1898.72 1489L1898.72 1508C1923.62 1508 1947.03 1505.18 1966.67 1500.18C1985.69 1495.35 2003.47 1487.89 2014.87 1476.99L2001.74 1463.26ZM1898.72 1489V1470C1876.77 1470 1856.74 1467.53 1840.66 1463.49C1824.01 1459.31 1813.67 1453.98 1809.07 1449.76L1796.22 1463.75L1783.37 1477.75C1794.87 1488.31 1812.49 1495.6 1831.41 1500.35C1850.92 1505.24 1874.09 1508 1898.72 1508V1489ZM1796.22 1463.75L1802.19 1445.71C1785.89 1440.32 1773.87 1433.95 1766.29 1427.66C1758.64 1421.3 1757.46 1416.78 1757.45 1414.64L1738.45 1414.71L1719.45 1414.79C1719.52 1432.42 1729.61 1446.58 1742.01 1456.89C1754.49 1467.26 1771.31 1475.52 1790.25 1481.79L1796.22 1463.75ZM1738.45 1414.71L1757.45 1414.64C1757.44 1412.46 1758.64 1407.78 1766.67 1401.18C1774.58 1394.68 1787.13 1388.12 1804.07 1382.62L1798.2 1364.55L1792.32 1346.48C1772.75 1352.84 1755.39 1361.26 1742.54 1371.82C1729.8 1382.29 1719.38 1396.76 1719.45 1414.79L1738.45 1414.71ZM1798.2 1364.55L1810.12 1379.34C1815.56 1374.96 1826.34 1369.92 1842.54 1366.05C1858.3 1362.28 1877.63 1360 1898.72 1360V1341V1322C1875.04 1322 1852.71 1324.55 1833.71 1329.09C1815.14 1333.53 1798.05 1340.26 1786.27 1349.76L1798.2 1364.55Z"
                  fill="black"
                  mask="url(#path-47-inside-20_17_636)"
                />
                <rect
                  x="1523.42"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-50-inside-21_17_636" fill="white">
                  <path d="M1559.69 257C1603.34 257 1641.06 266.191 1658.88 279.516C1696.28 291.148 1720.34 309.304 1720.42 329.769C1720.5 349.598 1698.05 367.39 1662.71 379.258C1646.97 394.303 1606.78 405 1559.69 405C1513.11 405 1473.29 394.537 1457.19 379.752C1421.95 368.091 1399.5 350.48 1399.42 330.713C1399.34 310.506 1422.66 292.412 1459.17 280.55C1476.38 266.669 1514.92 257 1559.69 257Z" />
                </mask>
                <path
                  d="M1559.69 257C1603.34 257 1641.06 266.191 1658.88 279.516C1696.28 291.148 1720.34 309.304 1720.42 329.769C1720.5 349.598 1698.05 367.39 1662.71 379.258C1646.97 394.303 1606.78 405 1559.69 405C1513.11 405 1473.29 394.537 1457.19 379.752C1421.95 368.091 1399.5 350.48 1399.42 330.713C1399.34 310.506 1422.66 292.412 1459.17 280.55C1476.38 266.669 1514.92 257 1559.69 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M1559.69 257L1559.69 238L1559.69 238L1559.69 257ZM1658.88 279.516L1647.5 294.731L1650.12 296.688L1653.24 297.658L1658.88 279.516ZM1720.42 329.769L1739.42 329.694L1739.42 329.694L1720.42 329.769ZM1662.71 379.258L1656.67 361.247L1652.65 362.595L1649.59 365.523L1662.71 379.258ZM1559.69 405L1559.69 424H1559.69V405ZM1457.19 379.752L1470.04 365.759L1467.04 362.997L1463.16 361.714L1457.19 379.752ZM1399.42 330.713L1380.42 330.788L1380.42 330.788L1399.42 330.713ZM1459.17 280.55L1465.04 298.62L1468.37 297.538L1471.09 295.341L1459.17 280.55ZM1559.69 257V276C1580.25 276 1599.14 278.171 1614.69 281.771C1630.6 285.456 1641.59 290.311 1647.5 294.731L1658.88 279.516L1670.26 264.301C1658.35 255.395 1641.58 248.993 1623.26 244.751C1604.58 240.425 1582.78 238 1559.69 238V257ZM1658.88 279.516L1653.24 297.658C1670.62 303.064 1683.57 309.61 1691.79 316.173C1700.13 322.844 1701.41 327.631 1701.42 329.844L1720.42 329.769L1739.42 329.694C1739.35 311.441 1728.56 296.918 1715.51 286.487C1702.32 275.947 1684.54 267.599 1664.52 261.373L1658.88 279.516ZM1720.42 329.769L1701.42 329.843C1701.43 331.984 1700.29 336.522 1692.63 342.945C1685.06 349.3 1673.02 355.755 1656.67 361.247L1662.71 379.258L1668.76 397.269C1687.75 390.893 1704.59 382.518 1717.06 372.052C1729.45 361.655 1739.49 347.382 1739.42 329.694L1720.42 329.769ZM1662.71 379.258L1649.59 365.523C1645.25 369.67 1635.06 375.086 1618.27 379.357C1602.11 383.47 1581.89 386 1559.69 386V405V424C1584.59 424 1608 421.182 1627.64 416.184C1646.66 411.345 1664.44 403.89 1675.84 392.993L1662.71 379.258ZM1559.69 405L1559.69 386C1537.74 386 1517.71 383.526 1501.63 379.492C1484.98 375.313 1474.64 369.978 1470.04 365.759L1457.19 379.752L1444.34 393.745C1455.84 404.31 1473.46 411.6 1492.38 416.349C1511.89 421.243 1535.06 424 1559.69 424L1559.69 405ZM1457.19 379.752L1463.16 361.714C1446.86 356.32 1434.84 349.95 1427.26 343.658C1419.61 337.299 1418.43 332.779 1418.42 330.638L1399.42 330.713L1380.42 330.788C1380.49 348.414 1390.58 362.583 1402.98 372.886C1415.46 383.258 1432.28 391.523 1451.22 397.79L1457.19 379.752ZM1399.42 330.713L1418.42 330.638C1418.41 328.459 1419.61 323.777 1427.64 317.182C1435.55 310.677 1448.1 304.123 1465.04 298.62L1459.17 280.55L1453.3 262.48C1433.73 268.839 1416.36 277.263 1403.51 287.823C1390.77 298.291 1380.35 312.76 1380.42 330.788L1399.42 330.713ZM1459.17 280.55L1471.09 295.341C1476.53 290.96 1487.31 285.918 1503.51 282.049C1519.27 278.285 1538.6 276 1559.69 276L1559.69 257L1559.69 238C1536.01 238 1513.68 240.55 1494.68 245.089C1476.11 249.525 1459.02 256.258 1447.24 265.759L1459.17 280.55Z"
                  fill="black"
                  mask="url(#path-50-inside-21_17_636)"
                />
                <mask id="path-52-inside-22_17_636" fill="white">
                  <path d="M1559.69 963C1603.34 963 1641.06 972.191 1658.88 985.516C1696.28 997.148 1720.34 1015.3 1720.42 1035.77C1720.5 1055.6 1698.05 1073.39 1662.71 1085.26C1646.97 1100.3 1606.78 1111 1559.69 1111C1513.11 1111 1473.29 1100.54 1457.19 1085.75C1421.95 1074.09 1399.5 1056.48 1399.42 1036.71C1399.34 1016.51 1422.66 998.412 1459.17 986.55C1476.38 972.669 1514.92 963 1559.69 963Z" />
                </mask>
                <path
                  d="M1559.69 963C1603.34 963 1641.06 972.191 1658.88 985.516C1696.28 997.148 1720.34 1015.3 1720.42 1035.77C1720.5 1055.6 1698.05 1073.39 1662.71 1085.26C1646.97 1100.3 1606.78 1111 1559.69 1111C1513.11 1111 1473.29 1100.54 1457.19 1085.75C1421.95 1074.09 1399.5 1056.48 1399.42 1036.71C1399.34 1016.51 1422.66 998.412 1459.17 986.55C1476.38 972.669 1514.92 963 1559.69 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M1559.69 963L1559.69 944L1559.69 944L1559.69 963ZM1658.88 985.516L1647.5 1000.73L1650.12 1002.69L1653.24 1003.66L1658.88 985.516ZM1720.42 1035.77L1739.42 1035.69L1739.42 1035.69L1720.42 1035.77ZM1662.71 1085.26L1656.67 1067.25L1652.65 1068.6L1649.59 1071.52L1662.71 1085.26ZM1559.69 1111L1559.69 1130H1559.69V1111ZM1457.19 1085.75L1470.04 1071.76L1467.04 1069L1463.16 1067.71L1457.19 1085.75ZM1399.42 1036.71L1380.42 1036.79L1380.42 1036.79L1399.42 1036.71ZM1459.17 986.55L1465.04 1004.62L1468.37 1003.54L1471.09 1001.34L1459.17 986.55ZM1559.69 963V982C1580.25 982 1599.14 984.171 1614.69 987.771C1630.6 991.456 1641.59 996.311 1647.5 1000.73L1658.88 985.516L1670.26 970.301C1658.35 961.395 1641.58 954.993 1623.26 950.751C1604.58 946.425 1582.78 944 1559.69 944V963ZM1658.88 985.516L1653.24 1003.66C1670.62 1009.06 1683.57 1015.61 1691.79 1022.17C1700.13 1028.84 1701.41 1033.63 1701.42 1035.84L1720.42 1035.77L1739.42 1035.69C1739.35 1017.44 1728.56 1002.92 1715.51 992.487C1702.32 981.947 1684.54 973.599 1664.52 967.373L1658.88 985.516ZM1720.42 1035.77L1701.42 1035.84C1701.43 1037.98 1700.29 1042.52 1692.63 1048.95C1685.06 1055.3 1673.02 1061.75 1656.67 1067.25L1662.71 1085.26L1668.76 1103.27C1687.75 1096.89 1704.59 1088.52 1717.06 1078.05C1729.45 1067.65 1739.49 1053.38 1739.42 1035.69L1720.42 1035.77ZM1662.71 1085.26L1649.59 1071.52C1645.25 1075.67 1635.06 1081.09 1618.27 1085.36C1602.11 1089.47 1581.89 1092 1559.69 1092V1111V1130C1584.59 1130 1608 1127.18 1627.64 1122.18C1646.66 1117.35 1664.44 1109.89 1675.84 1098.99L1662.71 1085.26ZM1559.69 1111L1559.69 1092C1537.74 1092 1517.71 1089.53 1501.63 1085.49C1484.98 1081.31 1474.64 1075.98 1470.04 1071.76L1457.19 1085.75L1444.34 1099.74C1455.84 1110.31 1473.46 1117.6 1492.38 1122.35C1511.89 1127.24 1535.06 1130 1559.69 1130L1559.69 1111ZM1457.19 1085.75L1463.16 1067.71C1446.86 1062.32 1434.84 1055.95 1427.26 1049.66C1419.61 1043.3 1418.43 1038.78 1418.42 1036.64L1399.42 1036.71L1380.42 1036.79C1380.49 1054.41 1390.58 1068.58 1402.98 1078.89C1415.46 1089.26 1432.28 1097.52 1451.22 1103.79L1457.19 1085.75ZM1399.42 1036.71L1418.42 1036.64C1418.41 1034.46 1419.61 1029.78 1427.64 1023.18C1435.55 1016.68 1448.1 1010.12 1465.04 1004.62L1459.17 986.55L1453.3 968.48C1433.73 974.839 1416.36 983.263 1403.51 993.823C1390.77 1004.29 1380.35 1018.76 1380.42 1036.79L1399.42 1036.71ZM1459.17 986.55L1471.09 1001.34C1476.53 996.96 1487.31 991.918 1503.51 988.049C1519.27 984.285 1538.6 982 1559.69 982L1559.69 963L1559.69 944C1536.01 944 1513.68 946.55 1494.68 951.089C1476.11 955.525 1459.02 962.258 1447.24 971.759L1459.17 986.55Z"
                  fill="black"
                  mask="url(#path-52-inside-22_17_636)"
                />
                <mask id="path-54-inside-23_17_636" fill="white">
                  <path d="M1559.69 1089C1603.34 1089 1641.06 1098.19 1658.88 1111.52C1696.28 1123.15 1720.34 1141.3 1720.42 1161.77C1720.5 1181.6 1698.05 1199.39 1662.71 1211.26C1646.97 1226.3 1606.78 1237 1559.69 1237C1513.11 1237 1473.29 1226.54 1457.19 1211.75C1421.95 1200.09 1399.5 1182.48 1399.42 1162.71C1399.34 1142.51 1422.66 1124.41 1459.17 1112.55C1476.38 1098.67 1514.92 1089 1559.69 1089Z" />
                </mask>
                <path
                  d="M1559.69 1089C1603.34 1089 1641.06 1098.19 1658.88 1111.52C1696.28 1123.15 1720.34 1141.3 1720.42 1161.77C1720.5 1181.6 1698.05 1199.39 1662.71 1211.26C1646.97 1226.3 1606.78 1237 1559.69 1237C1513.11 1237 1473.29 1226.54 1457.19 1211.75C1421.95 1200.09 1399.5 1182.48 1399.42 1162.71C1399.34 1142.51 1422.66 1124.41 1459.17 1112.55C1476.38 1098.67 1514.92 1089 1559.69 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M1559.69 1089L1559.69 1070H1559.69V1089ZM1658.88 1111.52L1647.5 1126.73L1650.12 1128.69L1653.24 1129.66L1658.88 1111.52ZM1720.42 1161.77L1739.42 1161.69L1739.42 1161.69L1720.42 1161.77ZM1662.71 1211.26L1656.66 1193.25L1652.65 1194.6L1649.59 1197.52L1662.71 1211.26ZM1559.69 1237L1559.69 1256H1559.69L1559.69 1237ZM1457.19 1211.75L1470.04 1197.76L1467.04 1195L1463.16 1193.71L1457.19 1211.75ZM1399.42 1162.71L1380.42 1162.79L1380.42 1162.79L1399.42 1162.71ZM1459.17 1112.55L1465.04 1130.62L1468.37 1129.54L1471.09 1127.34L1459.17 1112.55ZM1559.69 1089L1559.69 1108C1580.25 1108 1599.14 1110.17 1614.69 1113.77C1630.6 1117.46 1641.59 1122.31 1647.5 1126.73L1658.88 1111.52L1670.26 1096.3C1658.35 1087.39 1641.58 1080.99 1623.26 1076.75C1604.58 1072.42 1582.78 1070 1559.69 1070L1559.69 1089ZM1658.88 1111.52L1653.24 1129.66C1670.62 1135.06 1683.57 1141.61 1691.79 1148.17C1700.13 1154.84 1701.41 1159.63 1701.42 1161.84L1720.42 1161.77L1739.42 1161.69C1739.35 1143.44 1728.56 1128.92 1715.51 1118.49C1702.32 1107.95 1684.54 1099.6 1664.52 1093.37L1658.88 1111.52ZM1720.42 1161.77L1701.42 1161.84C1701.43 1163.98 1700.29 1168.52 1692.63 1174.95C1685.06 1181.3 1673.02 1187.75 1656.66 1193.25L1662.71 1211.26L1668.76 1229.27C1687.75 1222.89 1704.59 1214.52 1717.06 1204.05C1729.45 1193.66 1739.49 1179.38 1739.42 1161.69L1720.42 1161.77ZM1662.71 1211.26L1649.59 1197.52C1645.25 1201.67 1635.06 1207.09 1618.27 1211.36C1602.11 1215.47 1581.89 1218 1559.69 1218L1559.69 1237L1559.69 1256C1584.59 1256 1608 1253.18 1627.64 1248.18C1646.66 1243.35 1664.44 1235.89 1675.84 1224.99L1662.71 1211.26ZM1559.69 1237V1218C1537.74 1218 1517.71 1215.53 1501.63 1211.49C1484.98 1207.31 1474.64 1201.98 1470.04 1197.76L1457.19 1211.75L1444.34 1225.75C1455.84 1236.31 1473.46 1243.6 1492.38 1248.35C1511.89 1253.24 1535.06 1256 1559.69 1256V1237ZM1457.19 1211.75L1463.16 1193.71C1446.86 1188.32 1434.84 1181.95 1427.26 1175.66C1419.61 1169.3 1418.43 1164.78 1418.42 1162.64L1399.42 1162.71L1380.42 1162.79C1380.49 1180.42 1390.58 1194.58 1402.98 1204.89C1415.46 1215.26 1432.28 1223.52 1451.22 1229.79L1457.19 1211.75ZM1399.42 1162.71L1418.42 1162.64C1418.41 1160.46 1419.61 1155.78 1427.64 1149.18C1435.55 1142.68 1448.1 1136.12 1465.04 1130.62L1459.17 1112.55L1453.29 1094.48C1433.72 1100.84 1416.36 1109.26 1403.51 1119.82C1390.77 1130.29 1380.35 1144.76 1380.42 1162.79L1399.42 1162.71ZM1459.17 1112.55L1471.09 1127.34C1476.53 1122.96 1487.31 1117.92 1503.51 1114.05C1519.27 1110.28 1538.6 1108 1559.69 1108V1089V1070C1536.01 1070 1513.68 1072.55 1494.68 1077.09C1476.11 1081.53 1459.02 1088.26 1447.24 1097.76L1459.17 1112.55Z"
                  fill="black"
                  mask="url(#path-54-inside-23_17_636)"
                />
                <mask id="path-56-inside-24_17_636" fill="white">
                  <path d="M1559.69 1215C1603.34 1215 1641.06 1224.19 1658.88 1237.52C1696.28 1249.15 1720.34 1267.3 1720.42 1287.77C1720.5 1307.6 1698.05 1325.39 1662.71 1337.26C1646.97 1352.3 1606.78 1363 1559.69 1363C1513.11 1363 1473.29 1352.54 1457.19 1337.75C1421.95 1326.09 1399.5 1308.48 1399.42 1288.71C1399.34 1268.51 1422.66 1250.41 1459.17 1238.55C1476.38 1224.67 1514.92 1215 1559.69 1215Z" />
                </mask>
                <path
                  d="M1559.69 1215C1603.34 1215 1641.06 1224.19 1658.88 1237.52C1696.28 1249.15 1720.34 1267.3 1720.42 1287.77C1720.5 1307.6 1698.05 1325.39 1662.71 1337.26C1646.97 1352.3 1606.78 1363 1559.69 1363C1513.11 1363 1473.29 1352.54 1457.19 1337.75C1421.95 1326.09 1399.5 1308.48 1399.42 1288.71C1399.34 1268.51 1422.66 1250.41 1459.17 1238.55C1476.38 1224.67 1514.92 1215 1559.69 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M1559.69 1215L1559.69 1196H1559.69V1215ZM1658.88 1237.52L1647.5 1252.73L1650.12 1254.69L1653.24 1255.66L1658.88 1237.52ZM1720.42 1287.77L1739.42 1287.69L1739.42 1287.69L1720.42 1287.77ZM1662.71 1337.26L1656.66 1319.25L1652.65 1320.6L1649.59 1323.52L1662.71 1337.26ZM1559.69 1363L1559.69 1382H1559.69L1559.69 1363ZM1457.19 1337.75L1470.04 1323.76L1467.04 1321L1463.16 1319.71L1457.19 1337.75ZM1399.42 1288.71L1380.42 1288.79L1380.42 1288.79L1399.42 1288.71ZM1459.17 1238.55L1465.04 1256.62L1468.37 1255.54L1471.09 1253.34L1459.17 1238.55ZM1559.69 1215L1559.69 1234C1580.25 1234 1599.14 1236.17 1614.69 1239.77C1630.6 1243.46 1641.59 1248.31 1647.5 1252.73L1658.88 1237.52L1670.26 1222.3C1658.35 1213.39 1641.58 1206.99 1623.26 1202.75C1604.58 1198.42 1582.78 1196 1559.69 1196L1559.69 1215ZM1658.88 1237.52L1653.24 1255.66C1670.62 1261.06 1683.57 1267.61 1691.79 1274.17C1700.13 1280.84 1701.41 1285.63 1701.42 1287.84L1720.42 1287.77L1739.42 1287.69C1739.35 1269.44 1728.56 1254.92 1715.51 1244.49C1702.32 1233.95 1684.54 1225.6 1664.52 1219.37L1658.88 1237.52ZM1720.42 1287.77L1701.42 1287.84C1701.43 1289.98 1700.29 1294.52 1692.63 1300.95C1685.06 1307.3 1673.02 1313.75 1656.66 1319.25L1662.71 1337.26L1668.76 1355.27C1687.75 1348.89 1704.59 1340.52 1717.06 1330.05C1729.45 1319.66 1739.49 1305.38 1739.42 1287.69L1720.42 1287.77ZM1662.71 1337.26L1649.59 1323.52C1645.25 1327.67 1635.06 1333.09 1618.27 1337.36C1602.11 1341.47 1581.89 1344 1559.69 1344L1559.69 1363L1559.69 1382C1584.59 1382 1608 1379.18 1627.64 1374.18C1646.66 1369.35 1664.44 1361.89 1675.84 1350.99L1662.71 1337.26ZM1559.69 1363V1344C1537.74 1344 1517.71 1341.53 1501.63 1337.49C1484.98 1333.31 1474.64 1327.98 1470.04 1323.76L1457.19 1337.75L1444.34 1351.75C1455.84 1362.31 1473.46 1369.6 1492.38 1374.35C1511.89 1379.24 1535.06 1382 1559.69 1382V1363ZM1457.19 1337.75L1463.16 1319.71C1446.86 1314.32 1434.84 1307.95 1427.26 1301.66C1419.61 1295.3 1418.43 1290.78 1418.42 1288.64L1399.42 1288.71L1380.42 1288.79C1380.49 1306.42 1390.58 1320.58 1402.98 1330.89C1415.46 1341.26 1432.28 1349.52 1451.22 1355.79L1457.19 1337.75ZM1399.42 1288.71L1418.42 1288.64C1418.41 1286.46 1419.61 1281.78 1427.64 1275.18C1435.55 1268.68 1448.1 1262.12 1465.04 1256.62L1459.17 1238.55L1453.29 1220.48C1433.72 1226.84 1416.36 1235.26 1403.51 1245.82C1390.77 1256.29 1380.35 1270.76 1380.42 1288.79L1399.42 1288.71ZM1459.17 1238.55L1471.09 1253.34C1476.53 1248.96 1487.31 1243.92 1503.51 1240.05C1519.27 1236.28 1538.6 1234 1559.69 1234V1215V1196C1536.01 1196 1513.68 1198.55 1494.68 1203.09C1476.11 1207.53 1459.02 1214.26 1447.24 1223.76L1459.17 1238.55Z"
                  fill="black"
                  mask="url(#path-56-inside-24_17_636)"
                />
                <mask id="path-58-inside-25_17_636" fill="white">
                  <path d="M1559.69 1341C1603.34 1341 1641.06 1350.19 1658.88 1363.52C1696.28 1375.15 1720.34 1393.3 1720.42 1413.77C1720.5 1433.6 1698.05 1451.39 1662.71 1463.26C1646.97 1478.3 1606.78 1489 1559.69 1489C1513.11 1489 1473.29 1478.54 1457.19 1463.75C1421.95 1452.09 1399.5 1434.48 1399.42 1414.71C1399.34 1394.51 1422.66 1376.41 1459.17 1364.55C1476.38 1350.67 1514.92 1341 1559.69 1341Z" />
                </mask>
                <path
                  d="M1559.69 1341C1603.34 1341 1641.06 1350.19 1658.88 1363.52C1696.28 1375.15 1720.34 1393.3 1720.42 1413.77C1720.5 1433.6 1698.05 1451.39 1662.71 1463.26C1646.97 1478.3 1606.78 1489 1559.69 1489C1513.11 1489 1473.29 1478.54 1457.19 1463.75C1421.95 1452.09 1399.5 1434.48 1399.42 1414.71C1399.34 1394.51 1422.66 1376.41 1459.17 1364.55C1476.38 1350.67 1514.92 1341 1559.69 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M1559.69 1341L1559.69 1322H1559.69V1341ZM1658.88 1363.52L1647.5 1378.73L1650.12 1380.69L1653.24 1381.66L1658.88 1363.52ZM1720.42 1413.77L1739.42 1413.69L1739.42 1413.69L1720.42 1413.77ZM1662.71 1463.26L1656.66 1445.25L1652.65 1446.6L1649.59 1449.52L1662.71 1463.26ZM1559.69 1489L1559.69 1508H1559.69L1559.69 1489ZM1457.19 1463.75L1470.04 1449.76L1467.04 1447L1463.16 1445.71L1457.19 1463.75ZM1399.42 1414.71L1380.42 1414.79L1380.42 1414.79L1399.42 1414.71ZM1459.17 1364.55L1465.04 1382.62L1468.37 1381.54L1471.09 1379.34L1459.17 1364.55ZM1559.69 1341L1559.69 1360C1580.25 1360 1599.14 1362.17 1614.69 1365.77C1630.6 1369.46 1641.59 1374.31 1647.5 1378.73L1658.88 1363.52L1670.26 1348.3C1658.35 1339.39 1641.58 1332.99 1623.26 1328.75C1604.58 1324.42 1582.78 1322 1559.69 1322L1559.69 1341ZM1658.88 1363.52L1653.24 1381.66C1670.62 1387.06 1683.57 1393.61 1691.79 1400.17C1700.13 1406.84 1701.41 1411.63 1701.42 1413.84L1720.42 1413.77L1739.42 1413.69C1739.35 1395.44 1728.56 1380.92 1715.51 1370.49C1702.32 1359.95 1684.54 1351.6 1664.52 1345.37L1658.88 1363.52ZM1720.42 1413.77L1701.42 1413.84C1701.43 1415.98 1700.29 1420.52 1692.63 1426.95C1685.06 1433.3 1673.02 1439.75 1656.66 1445.25L1662.71 1463.26L1668.76 1481.27C1687.75 1474.89 1704.59 1466.52 1717.06 1456.05C1729.45 1445.66 1739.49 1431.38 1739.42 1413.69L1720.42 1413.77ZM1662.71 1463.26L1649.59 1449.52C1645.25 1453.67 1635.06 1459.09 1618.27 1463.36C1602.11 1467.47 1581.89 1470 1559.69 1470L1559.69 1489L1559.69 1508C1584.59 1508 1608 1505.18 1627.64 1500.18C1646.66 1495.35 1664.44 1487.89 1675.84 1476.99L1662.71 1463.26ZM1559.69 1489V1470C1537.74 1470 1517.71 1467.53 1501.63 1463.49C1484.98 1459.31 1474.64 1453.98 1470.04 1449.76L1457.19 1463.75L1444.34 1477.75C1455.84 1488.31 1473.46 1495.6 1492.38 1500.35C1511.89 1505.24 1535.06 1508 1559.69 1508V1489ZM1457.19 1463.75L1463.16 1445.71C1446.86 1440.32 1434.84 1433.95 1427.26 1427.66C1419.61 1421.3 1418.43 1416.78 1418.42 1414.64L1399.42 1414.71L1380.42 1414.79C1380.49 1432.42 1390.58 1446.58 1402.98 1456.89C1415.46 1467.26 1432.28 1475.52 1451.22 1481.79L1457.19 1463.75ZM1399.42 1414.71L1418.42 1414.64C1418.41 1412.46 1419.61 1407.78 1427.64 1401.18C1435.55 1394.68 1448.1 1388.12 1465.04 1382.62L1459.17 1364.55L1453.29 1346.48C1433.72 1352.84 1416.36 1361.26 1403.51 1371.82C1390.77 1382.29 1380.35 1396.76 1380.42 1414.79L1399.42 1414.71ZM1459.17 1364.55L1471.09 1379.34C1476.53 1374.96 1487.31 1369.92 1503.51 1366.05C1519.27 1362.28 1538.6 1360 1559.69 1360V1341V1322C1536.01 1322 1513.68 1324.55 1494.68 1329.09C1476.11 1333.53 1459.02 1340.26 1447.24 1349.76L1459.17 1364.55Z"
                  fill="black"
                  mask="url(#path-58-inside-25_17_636)"
                />
                <rect
                  x="1184.39"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="1215.71"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-62-inside-26_17_636" fill="white">
                  <path d="M1220.66 257C1264.31 257 1302.03 266.191 1319.85 279.516C1357.25 291.148 1381.31 309.304 1381.39 329.769C1381.47 349.598 1359.02 367.39 1323.68 379.258C1307.94 394.303 1267.75 405 1220.66 405C1174.08 405 1134.26 394.537 1118.16 379.752C1082.92 368.091 1060.47 350.48 1060.39 330.713C1060.31 310.506 1083.63 292.412 1120.14 280.55C1137.35 266.669 1175.89 257 1220.66 257Z" />
                </mask>
                <path
                  d="M1220.66 257C1264.31 257 1302.03 266.191 1319.85 279.516C1357.25 291.148 1381.31 309.304 1381.39 329.769C1381.47 349.598 1359.02 367.39 1323.68 379.258C1307.94 394.303 1267.75 405 1220.66 405C1174.08 405 1134.26 394.537 1118.16 379.752C1082.92 368.091 1060.47 350.48 1060.39 330.713C1060.31 310.506 1083.63 292.412 1120.14 280.55C1137.35 266.669 1175.89 257 1220.66 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M1220.66 257L1220.66 238L1220.66 238L1220.66 257ZM1319.85 279.516L1308.47 294.731L1311.09 296.688L1314.21 297.658L1319.85 279.516ZM1381.39 329.769L1400.39 329.694L1400.39 329.694L1381.39 329.769ZM1323.68 379.258L1317.64 361.247L1313.62 362.595L1310.56 365.523L1323.68 379.258ZM1220.66 405L1220.66 424H1220.66V405ZM1118.16 379.752L1131.01 365.759L1128.01 362.997L1124.13 361.714L1118.16 379.752ZM1060.39 330.713L1041.39 330.788L1041.39 330.788L1060.39 330.713ZM1120.14 280.55L1126.01 298.62L1129.34 297.538L1132.06 295.341L1120.14 280.55ZM1220.66 257V276C1241.22 276 1260.11 278.171 1275.66 281.771C1291.57 285.456 1302.56 290.311 1308.47 294.731L1319.85 279.516L1331.23 264.301C1319.32 255.395 1302.55 248.993 1284.23 244.751C1265.55 240.425 1243.75 238 1220.66 238V257ZM1319.85 279.516L1314.21 297.658C1331.59 303.064 1344.54 309.61 1352.76 316.173C1361.1 322.844 1362.38 327.631 1362.39 329.844L1381.39 329.769L1400.39 329.694C1400.32 311.441 1389.53 296.918 1376.48 286.487C1363.29 275.947 1345.51 267.599 1325.49 261.373L1319.85 279.516ZM1381.39 329.769L1362.39 329.843C1362.4 331.984 1361.26 336.522 1353.6 342.945C1346.03 349.3 1333.99 355.755 1317.64 361.247L1323.68 379.258L1329.73 397.269C1348.72 390.893 1365.56 382.518 1378.03 372.052C1390.42 361.655 1400.46 347.382 1400.39 329.694L1381.39 329.769ZM1323.68 379.258L1310.56 365.523C1306.22 369.67 1296.03 375.086 1279.24 379.357C1263.08 383.47 1242.86 386 1220.66 386V405V424C1245.56 424 1268.97 421.182 1288.61 416.184C1307.63 411.345 1325.41 403.89 1336.81 392.993L1323.68 379.258ZM1220.66 405L1220.66 386C1198.71 386 1178.68 383.526 1162.6 379.492C1145.95 375.313 1135.61 369.978 1131.01 365.759L1118.16 379.752L1105.31 393.745C1116.81 404.31 1134.43 411.6 1153.35 416.349C1172.86 421.243 1196.03 424 1220.66 424L1220.66 405ZM1118.16 379.752L1124.13 361.714C1107.83 356.32 1095.81 349.95 1088.23 343.658C1080.58 337.299 1079.4 332.779 1079.39 330.638L1060.39 330.713L1041.39 330.788C1041.46 348.414 1051.55 362.583 1063.95 372.886C1076.43 383.258 1093.25 391.523 1112.19 397.79L1118.16 379.752ZM1060.39 330.713L1079.39 330.638C1079.38 328.459 1080.58 323.777 1088.61 317.182C1096.52 310.677 1109.07 304.123 1126.01 298.62L1120.14 280.55L1114.27 262.48C1094.7 268.839 1077.33 277.263 1064.48 287.823C1051.74 298.291 1041.32 312.76 1041.39 330.788L1060.39 330.713ZM1120.14 280.55L1132.06 295.341C1137.5 290.96 1148.28 285.918 1164.48 282.049C1180.24 278.285 1199.57 276 1220.66 276L1220.66 257L1220.66 238C1196.98 238 1174.65 240.55 1155.65 245.089C1137.08 249.525 1119.99 256.258 1108.21 265.759L1120.14 280.55Z"
                  fill="black"
                  mask="url(#path-62-inside-26_17_636)"
                />
                <mask id="path-64-inside-27_17_636" fill="white">
                  <path d="M1220.66 963C1264.31 963 1302.03 972.191 1319.85 985.516C1357.25 997.148 1381.31 1015.3 1381.39 1035.77C1381.47 1055.6 1359.02 1073.39 1323.68 1085.26C1307.94 1100.3 1267.75 1111 1220.66 1111C1174.08 1111 1134.26 1100.54 1118.16 1085.75C1082.92 1074.09 1060.47 1056.48 1060.39 1036.71C1060.31 1016.51 1083.63 998.412 1120.14 986.55C1137.35 972.669 1175.89 963 1220.66 963Z" />
                </mask>
                <path
                  d="M1220.66 963C1264.31 963 1302.03 972.191 1319.85 985.516C1357.25 997.148 1381.31 1015.3 1381.39 1035.77C1381.47 1055.6 1359.02 1073.39 1323.68 1085.26C1307.94 1100.3 1267.75 1111 1220.66 1111C1174.08 1111 1134.26 1100.54 1118.16 1085.75C1082.92 1074.09 1060.47 1056.48 1060.39 1036.71C1060.31 1016.51 1083.63 998.412 1120.14 986.55C1137.35 972.669 1175.89 963 1220.66 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M1220.66 963L1220.66 944L1220.66 944L1220.66 963ZM1319.85 985.516L1308.47 1000.73L1311.09 1002.69L1314.21 1003.66L1319.85 985.516ZM1381.39 1035.77L1400.39 1035.69L1400.39 1035.69L1381.39 1035.77ZM1323.68 1085.26L1317.64 1067.25L1313.62 1068.6L1310.56 1071.52L1323.68 1085.26ZM1220.66 1111L1220.66 1130H1220.66V1111ZM1118.16 1085.75L1131.01 1071.76L1128.01 1069L1124.13 1067.71L1118.16 1085.75ZM1060.39 1036.71L1041.39 1036.79L1041.39 1036.79L1060.39 1036.71ZM1120.14 986.55L1126.01 1004.62L1129.34 1003.54L1132.06 1001.34L1120.14 986.55ZM1220.66 963V982C1241.22 982 1260.11 984.171 1275.66 987.771C1291.57 991.456 1302.56 996.311 1308.47 1000.73L1319.85 985.516L1331.23 970.301C1319.32 961.395 1302.55 954.993 1284.23 950.751C1265.55 946.425 1243.75 944 1220.66 944V963ZM1319.85 985.516L1314.21 1003.66C1331.59 1009.06 1344.54 1015.61 1352.76 1022.17C1361.1 1028.84 1362.38 1033.63 1362.39 1035.84L1381.39 1035.77L1400.39 1035.69C1400.32 1017.44 1389.53 1002.92 1376.48 992.487C1363.29 981.947 1345.51 973.599 1325.49 967.373L1319.85 985.516ZM1381.39 1035.77L1362.39 1035.84C1362.4 1037.98 1361.26 1042.52 1353.6 1048.95C1346.03 1055.3 1333.99 1061.75 1317.64 1067.25L1323.68 1085.26L1329.73 1103.27C1348.72 1096.89 1365.56 1088.52 1378.03 1078.05C1390.42 1067.65 1400.46 1053.38 1400.39 1035.69L1381.39 1035.77ZM1323.68 1085.26L1310.56 1071.52C1306.22 1075.67 1296.03 1081.09 1279.24 1085.36C1263.08 1089.47 1242.86 1092 1220.66 1092V1111V1130C1245.56 1130 1268.97 1127.18 1288.61 1122.18C1307.63 1117.35 1325.41 1109.89 1336.81 1098.99L1323.68 1085.26ZM1220.66 1111L1220.66 1092C1198.71 1092 1178.68 1089.53 1162.6 1085.49C1145.95 1081.31 1135.61 1075.98 1131.01 1071.76L1118.16 1085.75L1105.31 1099.74C1116.81 1110.31 1134.43 1117.6 1153.35 1122.35C1172.86 1127.24 1196.03 1130 1220.66 1130L1220.66 1111ZM1118.16 1085.75L1124.13 1067.71C1107.83 1062.32 1095.81 1055.95 1088.23 1049.66C1080.58 1043.3 1079.4 1038.78 1079.39 1036.64L1060.39 1036.71L1041.39 1036.79C1041.46 1054.41 1051.55 1068.58 1063.95 1078.89C1076.43 1089.26 1093.25 1097.52 1112.19 1103.79L1118.16 1085.75ZM1060.39 1036.71L1079.39 1036.64C1079.38 1034.46 1080.58 1029.78 1088.61 1023.18C1096.52 1016.68 1109.07 1010.12 1126.01 1004.62L1120.14 986.55L1114.27 968.48C1094.7 974.839 1077.33 983.263 1064.48 993.823C1051.74 1004.29 1041.32 1018.76 1041.39 1036.79L1060.39 1036.71ZM1120.14 986.55L1132.06 1001.34C1137.5 996.96 1148.28 991.918 1164.48 988.049C1180.24 984.285 1199.57 982 1220.66 982L1220.66 963L1220.66 944C1196.98 944 1174.65 946.55 1155.65 951.089C1137.08 955.525 1119.99 962.258 1108.21 971.759L1120.14 986.55Z"
                  fill="black"
                  mask="url(#path-64-inside-27_17_636)"
                />
                <mask id="path-66-inside-28_17_636" fill="white">
                  <path d="M1220.66 1089C1264.31 1089 1302.03 1098.19 1319.85 1111.52C1357.25 1123.15 1381.31 1141.3 1381.39 1161.77C1381.47 1181.6 1359.02 1199.39 1323.68 1211.26C1307.94 1226.3 1267.75 1237 1220.66 1237C1174.08 1237 1134.26 1226.54 1118.16 1211.75C1082.92 1200.09 1060.47 1182.48 1060.39 1162.71C1060.31 1142.51 1083.63 1124.41 1120.14 1112.55C1137.35 1098.67 1175.89 1089 1220.66 1089Z" />
                </mask>
                <path
                  d="M1220.66 1089C1264.31 1089 1302.03 1098.19 1319.85 1111.52C1357.25 1123.15 1381.31 1141.3 1381.39 1161.77C1381.47 1181.6 1359.02 1199.39 1323.68 1211.26C1307.94 1226.3 1267.75 1237 1220.66 1237C1174.08 1237 1134.26 1226.54 1118.16 1211.75C1082.92 1200.09 1060.47 1182.48 1060.39 1162.71C1060.31 1142.51 1083.63 1124.41 1120.14 1112.55C1137.35 1098.67 1175.89 1089 1220.66 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M1220.66 1089L1220.66 1070H1220.66V1089ZM1319.85 1111.52L1308.47 1126.73L1311.09 1128.69L1314.21 1129.66L1319.85 1111.52ZM1381.39 1161.77L1400.39 1161.69L1400.39 1161.69L1381.39 1161.77ZM1323.68 1211.26L1317.63 1193.25L1313.62 1194.6L1310.56 1197.52L1323.68 1211.26ZM1220.66 1237L1220.66 1256H1220.66L1220.66 1237ZM1118.16 1211.75L1131.01 1197.76L1128.01 1195L1124.13 1193.71L1118.16 1211.75ZM1060.39 1162.71L1041.39 1162.79L1041.39 1162.79L1060.39 1162.71ZM1120.14 1112.55L1126.01 1130.62L1129.34 1129.54L1132.06 1127.34L1120.14 1112.55ZM1220.66 1089L1220.66 1108C1241.22 1108 1260.11 1110.17 1275.66 1113.77C1291.57 1117.46 1302.56 1122.31 1308.47 1126.73L1319.85 1111.52L1331.23 1096.3C1319.32 1087.39 1302.55 1080.99 1284.23 1076.75C1265.55 1072.42 1243.75 1070 1220.66 1070L1220.66 1089ZM1319.85 1111.52L1314.21 1129.66C1331.59 1135.06 1344.54 1141.61 1352.76 1148.17C1361.1 1154.84 1362.38 1159.63 1362.39 1161.84L1381.39 1161.77L1400.39 1161.69C1400.32 1143.44 1389.53 1128.92 1376.48 1118.49C1363.29 1107.95 1345.51 1099.6 1325.49 1093.37L1319.85 1111.52ZM1381.39 1161.77L1362.39 1161.84C1362.4 1163.98 1361.26 1168.52 1353.6 1174.95C1346.03 1181.3 1333.98 1187.75 1317.63 1193.25L1323.68 1211.26L1329.73 1229.27C1348.72 1222.89 1365.56 1214.52 1378.03 1204.05C1390.42 1193.66 1400.46 1179.38 1400.39 1161.69L1381.39 1161.77ZM1323.68 1211.26L1310.56 1197.52C1306.22 1201.67 1296.03 1207.09 1279.24 1211.36C1263.08 1215.47 1242.86 1218 1220.66 1218L1220.66 1237L1220.66 1256C1245.56 1256 1268.97 1253.18 1288.61 1248.18C1307.63 1243.35 1325.41 1235.89 1336.81 1224.99L1323.68 1211.26ZM1220.66 1237V1218C1198.71 1218 1178.68 1215.53 1162.6 1211.49C1145.95 1207.31 1135.61 1201.98 1131.01 1197.76L1118.16 1211.75L1105.31 1225.75C1116.81 1236.31 1134.43 1243.6 1153.35 1248.35C1172.86 1253.24 1196.03 1256 1220.66 1256V1237ZM1118.16 1211.75L1124.13 1193.71C1107.83 1188.32 1095.81 1181.95 1088.23 1175.66C1080.58 1169.3 1079.4 1164.78 1079.39 1162.64L1060.39 1162.71L1041.39 1162.79C1041.46 1180.42 1051.55 1194.58 1063.95 1204.89C1076.43 1215.26 1093.25 1223.52 1112.19 1229.79L1118.16 1211.75ZM1060.39 1162.71L1079.39 1162.64C1079.38 1160.46 1080.58 1155.78 1088.61 1149.18C1096.52 1142.68 1109.07 1136.12 1126.01 1130.62L1120.14 1112.55L1114.26 1094.48C1094.69 1100.84 1077.33 1109.26 1064.48 1119.82C1051.74 1130.29 1041.32 1144.76 1041.39 1162.79L1060.39 1162.71ZM1120.14 1112.55L1132.06 1127.34C1137.5 1122.96 1148.28 1117.92 1164.48 1114.05C1180.24 1110.28 1199.57 1108 1220.66 1108V1089V1070C1196.98 1070 1174.65 1072.55 1155.65 1077.09C1137.08 1081.53 1119.99 1088.26 1108.21 1097.76L1120.14 1112.55Z"
                  fill="black"
                  mask="url(#path-66-inside-28_17_636)"
                />
                <mask id="path-68-inside-29_17_636" fill="white">
                  <path d="M1220.66 1215C1264.31 1215 1302.03 1224.19 1319.85 1237.52C1357.25 1249.15 1381.31 1267.3 1381.39 1287.77C1381.47 1307.6 1359.02 1325.39 1323.68 1337.26C1307.94 1352.3 1267.75 1363 1220.66 1363C1174.08 1363 1134.26 1352.54 1118.16 1337.75C1082.92 1326.09 1060.47 1308.48 1060.39 1288.71C1060.31 1268.51 1083.63 1250.41 1120.14 1238.55C1137.35 1224.67 1175.89 1215 1220.66 1215Z" />
                </mask>
                <path
                  d="M1220.66 1215C1264.31 1215 1302.03 1224.19 1319.85 1237.52C1357.25 1249.15 1381.31 1267.3 1381.39 1287.77C1381.47 1307.6 1359.02 1325.39 1323.68 1337.26C1307.94 1352.3 1267.75 1363 1220.66 1363C1174.08 1363 1134.26 1352.54 1118.16 1337.75C1082.92 1326.09 1060.47 1308.48 1060.39 1288.71C1060.31 1268.51 1083.63 1250.41 1120.14 1238.55C1137.35 1224.67 1175.89 1215 1220.66 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M1220.66 1215L1220.66 1196H1220.66V1215ZM1319.85 1237.52L1308.47 1252.73L1311.09 1254.69L1314.21 1255.66L1319.85 1237.52ZM1381.39 1287.77L1400.39 1287.69L1400.39 1287.69L1381.39 1287.77ZM1323.68 1337.26L1317.63 1319.25L1313.62 1320.6L1310.56 1323.52L1323.68 1337.26ZM1220.66 1363L1220.66 1382H1220.66L1220.66 1363ZM1118.16 1337.75L1131.01 1323.76L1128.01 1321L1124.13 1319.71L1118.16 1337.75ZM1060.39 1288.71L1041.39 1288.79L1041.39 1288.79L1060.39 1288.71ZM1120.14 1238.55L1126.01 1256.62L1129.34 1255.54L1132.06 1253.34L1120.14 1238.55ZM1220.66 1215L1220.66 1234C1241.22 1234 1260.11 1236.17 1275.66 1239.77C1291.57 1243.46 1302.56 1248.31 1308.47 1252.73L1319.85 1237.52L1331.23 1222.3C1319.32 1213.39 1302.55 1206.99 1284.23 1202.75C1265.55 1198.42 1243.75 1196 1220.66 1196L1220.66 1215ZM1319.85 1237.52L1314.21 1255.66C1331.59 1261.06 1344.54 1267.61 1352.76 1274.17C1361.1 1280.84 1362.38 1285.63 1362.39 1287.84L1381.39 1287.77L1400.39 1287.69C1400.32 1269.44 1389.53 1254.92 1376.48 1244.49C1363.29 1233.95 1345.51 1225.6 1325.49 1219.37L1319.85 1237.52ZM1381.39 1287.77L1362.39 1287.84C1362.4 1289.98 1361.26 1294.52 1353.6 1300.95C1346.03 1307.3 1333.98 1313.75 1317.63 1319.25L1323.68 1337.26L1329.73 1355.27C1348.72 1348.89 1365.56 1340.52 1378.03 1330.05C1390.42 1319.66 1400.46 1305.38 1400.39 1287.69L1381.39 1287.77ZM1323.68 1337.26L1310.56 1323.52C1306.22 1327.67 1296.03 1333.09 1279.24 1337.36C1263.08 1341.47 1242.86 1344 1220.66 1344L1220.66 1363L1220.66 1382C1245.56 1382 1268.97 1379.18 1288.61 1374.18C1307.63 1369.35 1325.41 1361.89 1336.81 1350.99L1323.68 1337.26ZM1220.66 1363V1344C1198.71 1344 1178.68 1341.53 1162.6 1337.49C1145.95 1333.31 1135.61 1327.98 1131.01 1323.76L1118.16 1337.75L1105.31 1351.75C1116.81 1362.31 1134.43 1369.6 1153.35 1374.35C1172.86 1379.24 1196.03 1382 1220.66 1382V1363ZM1118.16 1337.75L1124.13 1319.71C1107.83 1314.32 1095.81 1307.95 1088.23 1301.66C1080.58 1295.3 1079.4 1290.78 1079.39 1288.64L1060.39 1288.71L1041.39 1288.79C1041.46 1306.42 1051.55 1320.58 1063.95 1330.89C1076.43 1341.26 1093.25 1349.52 1112.19 1355.79L1118.16 1337.75ZM1060.39 1288.71L1079.39 1288.64C1079.38 1286.46 1080.58 1281.78 1088.61 1275.18C1096.52 1268.68 1109.07 1262.12 1126.01 1256.62L1120.14 1238.55L1114.26 1220.48C1094.69 1226.84 1077.33 1235.26 1064.48 1245.82C1051.74 1256.29 1041.32 1270.76 1041.39 1288.79L1060.39 1288.71ZM1120.14 1238.55L1132.06 1253.34C1137.5 1248.96 1148.28 1243.92 1164.48 1240.05C1180.24 1236.28 1199.57 1234 1220.66 1234V1215V1196C1196.98 1196 1174.65 1198.55 1155.65 1203.09C1137.08 1207.53 1119.99 1214.26 1108.21 1223.76L1120.14 1238.55Z"
                  fill="black"
                  mask="url(#path-68-inside-29_17_636)"
                />
                <mask id="path-70-inside-30_17_636" fill="white">
                  <path d="M1220.66 1341C1264.31 1341 1302.03 1350.19 1319.85 1363.52C1357.25 1375.15 1381.31 1393.3 1381.39 1413.77C1381.47 1433.6 1359.02 1451.39 1323.68 1463.26C1307.94 1478.3 1267.75 1489 1220.66 1489C1174.08 1489 1134.26 1478.54 1118.16 1463.75C1082.92 1452.09 1060.47 1434.48 1060.39 1414.71C1060.31 1394.51 1083.63 1376.41 1120.14 1364.55C1137.35 1350.67 1175.89 1341 1220.66 1341Z" />
                </mask>
                <path
                  d="M1220.66 1341C1264.31 1341 1302.03 1350.19 1319.85 1363.52C1357.25 1375.15 1381.31 1393.3 1381.39 1413.77C1381.47 1433.6 1359.02 1451.39 1323.68 1463.26C1307.94 1478.3 1267.75 1489 1220.66 1489C1174.08 1489 1134.26 1478.54 1118.16 1463.75C1082.92 1452.09 1060.47 1434.48 1060.39 1414.71C1060.31 1394.51 1083.63 1376.41 1120.14 1364.55C1137.35 1350.67 1175.89 1341 1220.66 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M1220.66 1341L1220.66 1322H1220.66V1341ZM1319.85 1363.52L1308.47 1378.73L1311.09 1380.69L1314.21 1381.66L1319.85 1363.52ZM1381.39 1413.77L1400.39 1413.69L1400.39 1413.69L1381.39 1413.77ZM1323.68 1463.26L1317.63 1445.25L1313.62 1446.6L1310.56 1449.52L1323.68 1463.26ZM1220.66 1489L1220.66 1508H1220.66L1220.66 1489ZM1118.16 1463.75L1131.01 1449.76L1128.01 1447L1124.13 1445.71L1118.16 1463.75ZM1060.39 1414.71L1041.39 1414.79L1041.39 1414.79L1060.39 1414.71ZM1120.14 1364.55L1126.01 1382.62L1129.34 1381.54L1132.06 1379.34L1120.14 1364.55ZM1220.66 1341L1220.66 1360C1241.22 1360 1260.11 1362.17 1275.66 1365.77C1291.57 1369.46 1302.56 1374.31 1308.47 1378.73L1319.85 1363.52L1331.23 1348.3C1319.32 1339.39 1302.55 1332.99 1284.23 1328.75C1265.55 1324.42 1243.75 1322 1220.66 1322L1220.66 1341ZM1319.85 1363.52L1314.21 1381.66C1331.59 1387.06 1344.54 1393.61 1352.76 1400.17C1361.1 1406.84 1362.38 1411.63 1362.39 1413.84L1381.39 1413.77L1400.39 1413.69C1400.32 1395.44 1389.53 1380.92 1376.48 1370.49C1363.29 1359.95 1345.51 1351.6 1325.49 1345.37L1319.85 1363.52ZM1381.39 1413.77L1362.39 1413.84C1362.4 1415.98 1361.26 1420.52 1353.6 1426.95C1346.03 1433.3 1333.98 1439.75 1317.63 1445.25L1323.68 1463.26L1329.73 1481.27C1348.72 1474.89 1365.56 1466.52 1378.03 1456.05C1390.42 1445.66 1400.46 1431.38 1400.39 1413.69L1381.39 1413.77ZM1323.68 1463.26L1310.56 1449.52C1306.22 1453.67 1296.03 1459.09 1279.24 1463.36C1263.08 1467.47 1242.86 1470 1220.66 1470L1220.66 1489L1220.66 1508C1245.56 1508 1268.97 1505.18 1288.61 1500.18C1307.63 1495.35 1325.41 1487.89 1336.81 1476.99L1323.68 1463.26ZM1220.66 1489V1470C1198.71 1470 1178.68 1467.53 1162.6 1463.49C1145.95 1459.31 1135.61 1453.98 1131.01 1449.76L1118.16 1463.75L1105.31 1477.75C1116.81 1488.31 1134.43 1495.6 1153.35 1500.35C1172.86 1505.24 1196.03 1508 1220.66 1508V1489ZM1118.16 1463.75L1124.13 1445.71C1107.83 1440.32 1095.81 1433.95 1088.23 1427.66C1080.58 1421.3 1079.4 1416.78 1079.39 1414.64L1060.39 1414.71L1041.39 1414.79C1041.46 1432.42 1051.55 1446.58 1063.95 1456.89C1076.43 1467.26 1093.25 1475.52 1112.19 1481.79L1118.16 1463.75ZM1060.39 1414.71L1079.39 1414.64C1079.38 1412.46 1080.58 1407.78 1088.61 1401.18C1096.52 1394.68 1109.07 1388.12 1126.01 1382.62L1120.14 1364.55L1114.26 1346.48C1094.69 1352.84 1077.33 1361.26 1064.48 1371.82C1051.74 1382.29 1041.32 1396.76 1041.39 1414.79L1060.39 1414.71ZM1120.14 1364.55L1132.06 1379.34C1137.5 1374.96 1148.28 1369.92 1164.48 1366.05C1180.24 1362.28 1199.57 1360 1220.66 1360V1341V1322C1196.98 1322 1174.65 1324.55 1155.65 1329.09C1137.08 1333.53 1119.99 1340.26 1108.21 1349.76L1120.14 1364.55Z"
                  fill="black"
                  mask="url(#path-70-inside-30_17_636)"
                />
                <rect
                  x="845.363"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-73-inside-31_17_636" fill="white">
                  <path d="M881.629 257C925.283 257 963.004 266.191 980.82 279.516C1018.22 291.148 1042.28 309.304 1042.36 329.769C1042.44 349.598 1019.99 367.39 984.655 379.258C968.914 394.303 928.724 405 881.629 405C835.051 405 795.227 394.537 779.13 379.752C743.894 368.091 721.442 350.48 721.364 330.713C721.284 310.506 744.603 292.412 781.108 280.55C798.323 266.669 836.856 257 881.629 257Z" />
                </mask>
                <path
                  d="M881.629 257C925.283 257 963.004 266.191 980.82 279.516C1018.22 291.148 1042.28 309.304 1042.36 329.769C1042.44 349.598 1019.99 367.39 984.655 379.258C968.914 394.303 928.724 405 881.629 405C835.051 405 795.227 394.537 779.13 379.752C743.894 368.091 721.442 350.48 721.364 330.713C721.284 310.506 744.603 292.412 781.108 280.55C798.323 266.669 836.856 257 881.629 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M881.629 257L881.629 238L881.629 238L881.629 257ZM980.82 279.516L969.44 294.731L972.057 296.688L975.177 297.658L980.82 279.516ZM1042.36 329.769L1061.36 329.694L1061.36 329.694L1042.36 329.769ZM984.655 379.258L978.605 361.247L974.589 362.595L971.527 365.523L984.655 379.258ZM881.629 405L881.629 424H881.629V405ZM779.13 379.752L791.983 365.759L788.976 362.997L785.099 361.714L779.13 379.752ZM721.364 330.713L702.364 330.788L702.364 330.788L721.364 330.713ZM781.108 280.55L786.98 298.62L790.309 297.538L793.034 295.341L781.108 280.55ZM881.629 257V276C902.189 276 921.08 278.171 936.627 281.771C952.537 285.456 963.531 290.311 969.44 294.731L980.82 279.516L992.199 264.301C980.292 255.395 963.518 248.993 945.2 244.751C926.519 240.425 904.722 238 881.629 238V257ZM980.82 279.516L975.177 297.658C992.559 303.064 1005.51 309.61 1013.73 316.173C1022.07 322.844 1023.35 327.631 1023.36 329.844L1042.36 329.769L1061.36 329.694C1061.29 311.441 1050.5 296.918 1037.45 286.487C1024.26 275.947 1006.48 267.599 986.462 261.373L980.82 279.516ZM1042.36 329.769L1023.36 329.843C1023.37 331.984 1022.23 336.522 1014.57 342.945C1007 349.3 994.956 355.755 978.605 361.247L984.655 379.258L990.704 397.269C1009.69 390.893 1026.53 382.518 1039 372.052C1051.39 361.655 1061.43 347.382 1061.36 329.694L1042.36 329.769ZM984.655 379.258L971.527 365.523C967.187 369.67 957.001 375.086 940.215 379.357C924.052 383.47 903.827 386 881.629 386V405V424C906.526 424 929.944 421.182 949.585 416.184C968.602 411.345 986.381 403.89 997.782 392.993L984.655 379.258ZM881.629 405L881.629 386C859.678 386 839.651 383.526 823.573 379.492C806.919 375.313 796.577 369.978 791.983 365.759L779.13 379.752L766.277 393.745C777.78 404.31 795.398 411.6 814.325 416.349C833.828 421.243 857.002 424 881.629 424L881.629 405ZM779.13 379.752L785.099 361.714C768.799 356.32 756.777 349.95 749.205 343.658C741.551 337.299 740.372 332.779 740.363 330.638L721.364 330.713L702.364 330.788C702.433 348.414 712.519 362.583 724.92 372.886C737.403 383.258 754.225 391.523 773.161 397.79L779.13 379.752ZM721.364 330.713L740.363 330.638C740.355 328.459 741.553 323.777 749.579 317.182C757.494 310.677 770.044 304.123 786.98 298.62L781.108 280.55L775.236 262.48C755.666 268.839 738.304 277.263 725.454 287.823C712.714 298.291 702.293 312.76 702.364 330.788L721.364 330.713ZM781.108 280.55L793.034 295.341C798.466 290.96 809.255 285.918 825.449 282.049C841.209 278.285 860.537 276 881.629 276L881.629 257L881.629 238C857.948 238 835.623 240.55 816.62 245.089C798.05 249.525 780.965 256.258 769.182 265.759L781.108 280.55Z"
                  fill="black"
                  mask="url(#path-73-inside-31_17_636)"
                />
                <mask id="path-75-inside-32_17_636" fill="white">
                  <path d="M881.629 963C925.283 963 963.004 972.191 980.82 985.516C1018.22 997.148 1042.28 1015.3 1042.36 1035.77C1042.44 1055.6 1019.99 1073.39 984.655 1085.26C968.914 1100.3 928.724 1111 881.629 1111C835.051 1111 795.227 1100.54 779.13 1085.75C743.894 1074.09 721.442 1056.48 721.364 1036.71C721.284 1016.51 744.603 998.412 781.108 986.55C798.323 972.669 836.856 963 881.629 963Z" />
                </mask>
                <path
                  d="M881.629 963C925.283 963 963.004 972.191 980.82 985.516C1018.22 997.148 1042.28 1015.3 1042.36 1035.77C1042.44 1055.6 1019.99 1073.39 984.655 1085.26C968.914 1100.3 928.724 1111 881.629 1111C835.051 1111 795.227 1100.54 779.13 1085.75C743.894 1074.09 721.442 1056.48 721.364 1036.71C721.284 1016.51 744.603 998.412 781.108 986.55C798.323 972.669 836.856 963 881.629 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M881.629 963L881.629 944L881.629 944L881.629 963ZM980.82 985.516L969.44 1000.73L972.057 1002.69L975.177 1003.66L980.82 985.516ZM1042.36 1035.77L1061.36 1035.69L1061.36 1035.69L1042.36 1035.77ZM984.655 1085.26L978.605 1067.25L974.589 1068.6L971.527 1071.52L984.655 1085.26ZM881.629 1111L881.629 1130H881.629V1111ZM779.13 1085.75L791.983 1071.76L788.976 1069L785.099 1067.71L779.13 1085.75ZM721.364 1036.71L702.364 1036.79L702.364 1036.79L721.364 1036.71ZM781.108 986.55L786.98 1004.62L790.309 1003.54L793.034 1001.34L781.108 986.55ZM881.629 963V982C902.189 982 921.08 984.171 936.627 987.771C952.537 991.456 963.531 996.311 969.44 1000.73L980.82 985.516L992.199 970.301C980.292 961.395 963.518 954.993 945.2 950.751C926.519 946.425 904.722 944 881.629 944V963ZM980.82 985.516L975.177 1003.66C992.559 1009.06 1005.51 1015.61 1013.73 1022.17C1022.07 1028.84 1023.35 1033.63 1023.36 1035.84L1042.36 1035.77L1061.36 1035.69C1061.29 1017.44 1050.5 1002.92 1037.45 992.487C1024.26 981.947 1006.48 973.599 986.462 967.373L980.82 985.516ZM1042.36 1035.77L1023.36 1035.84C1023.37 1037.98 1022.23 1042.52 1014.57 1048.95C1007 1055.3 994.956 1061.75 978.605 1067.25L984.655 1085.26L990.704 1103.27C1009.69 1096.89 1026.53 1088.52 1039 1078.05C1051.39 1067.65 1061.43 1053.38 1061.36 1035.69L1042.36 1035.77ZM984.655 1085.26L971.527 1071.52C967.187 1075.67 957.001 1081.09 940.214 1085.36C924.052 1089.47 903.827 1092 881.629 1092V1111V1130C906.526 1130 929.944 1127.18 949.585 1122.18C968.602 1117.35 986.381 1109.89 997.782 1098.99L984.655 1085.26ZM881.629 1111L881.629 1092C859.678 1092 839.651 1089.53 823.573 1085.49C806.919 1081.31 796.577 1075.98 791.983 1071.76L779.13 1085.75L766.277 1099.74C777.78 1110.31 795.398 1117.6 814.325 1122.35C833.828 1127.24 857.002 1130 881.629 1130L881.629 1111ZM779.13 1085.75L785.099 1067.71C768.799 1062.32 756.777 1055.95 749.205 1049.66C741.551 1043.3 740.372 1038.78 740.363 1036.64L721.364 1036.71L702.364 1036.79C702.433 1054.41 712.519 1068.58 724.92 1078.89C737.403 1089.26 754.225 1097.52 773.161 1103.79L779.13 1085.75ZM721.364 1036.71L740.363 1036.64C740.355 1034.46 741.553 1029.78 749.579 1023.18C757.494 1016.68 770.044 1010.12 786.98 1004.62L781.108 986.55L775.236 968.48C755.666 974.839 738.304 983.263 725.454 993.823C712.714 1004.29 702.293 1018.76 702.364 1036.79L721.364 1036.71ZM781.108 986.55L793.034 1001.34C798.466 996.96 809.255 991.918 825.449 988.049C841.209 984.285 860.537 982 881.629 982L881.629 963L881.629 944C857.948 944 835.623 946.55 816.62 951.089C798.05 955.525 780.965 962.258 769.182 971.759L781.108 986.55Z"
                  fill="black"
                  mask="url(#path-75-inside-32_17_636)"
                />
                <mask id="path-77-inside-33_17_636" fill="white">
                  <path d="M881.629 1089C925.283 1089 963.004 1098.19 980.82 1111.52C1018.22 1123.15 1042.28 1141.3 1042.36 1161.77C1042.44 1181.6 1019.99 1199.39 984.654 1211.26C968.912 1226.3 928.724 1237 881.629 1237C835.051 1237 795.227 1226.54 779.13 1211.75C743.894 1200.09 721.442 1182.48 721.364 1162.71C721.284 1142.51 744.602 1124.41 781.107 1112.55C798.322 1098.67 836.855 1089 881.629 1089Z" />
                </mask>
                <path
                  d="M881.629 1089C925.283 1089 963.004 1098.19 980.82 1111.52C1018.22 1123.15 1042.28 1141.3 1042.36 1161.77C1042.44 1181.6 1019.99 1199.39 984.654 1211.26C968.912 1226.3 928.724 1237 881.629 1237C835.051 1237 795.227 1226.54 779.13 1211.75C743.894 1200.09 721.442 1182.48 721.364 1162.71C721.284 1142.51 744.602 1124.41 781.107 1112.55C798.322 1098.67 836.855 1089 881.629 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M881.629 1089L881.629 1070H881.629V1089ZM980.82 1111.52L969.44 1126.73L972.057 1128.69L975.177 1129.66L980.82 1111.52ZM1042.36 1161.77L1061.36 1161.69L1061.36 1161.69L1042.36 1161.77ZM984.654 1211.26L978.604 1193.25L974.588 1194.6L971.526 1197.52L984.654 1211.26ZM881.629 1237L881.629 1256H881.629L881.629 1237ZM779.13 1211.75L791.983 1197.76L788.976 1195L785.099 1193.71L779.13 1211.75ZM721.364 1162.71L702.364 1162.79L702.364 1162.79L721.364 1162.71ZM781.107 1112.55L786.979 1130.62L790.308 1129.54L793.033 1127.34L781.107 1112.55ZM881.629 1089L881.629 1108C902.189 1108 921.081 1110.17 936.627 1113.77C952.537 1117.46 963.531 1122.31 969.44 1126.73L980.82 1111.52L992.2 1096.3C980.292 1087.39 963.518 1080.99 945.2 1076.75C926.519 1072.42 904.723 1070 881.629 1070L881.629 1089ZM980.82 1111.52L975.177 1129.66C992.558 1135.06 1005.51 1141.61 1013.73 1148.17C1022.07 1154.84 1023.35 1159.63 1023.36 1161.84L1042.36 1161.77L1061.36 1161.69C1061.29 1143.44 1050.5 1128.92 1037.45 1118.49C1024.26 1107.95 1006.48 1099.6 986.462 1093.37L980.82 1111.52ZM1042.36 1161.77L1023.36 1161.84C1023.37 1163.98 1022.23 1168.52 1014.57 1174.95C1007 1181.3 994.955 1187.75 978.604 1193.25L984.654 1211.26L990.703 1229.27C1009.69 1222.89 1026.53 1214.52 1039 1204.05C1051.39 1193.66 1061.43 1179.38 1061.36 1161.69L1042.36 1161.77ZM984.654 1211.26L971.526 1197.52C967.186 1201.67 957 1207.09 940.214 1211.36C924.051 1215.47 903.826 1218 881.629 1218L881.629 1237L881.629 1256C906.526 1256 929.943 1253.18 949.584 1248.18C968.601 1243.35 986.38 1235.89 997.781 1224.99L984.654 1211.26ZM881.629 1237V1218C859.678 1218 839.651 1215.53 823.573 1211.49C806.919 1207.31 796.577 1201.98 791.983 1197.76L779.13 1211.75L766.277 1225.75C777.78 1236.31 795.398 1243.6 814.325 1248.35C833.828 1253.24 857.002 1256 881.629 1256V1237ZM779.13 1211.75L785.099 1193.71C768.799 1188.32 756.777 1181.95 749.205 1175.66C741.551 1169.3 740.372 1164.78 740.363 1162.64L721.364 1162.71L702.364 1162.79C702.434 1180.42 712.52 1194.58 724.921 1204.89C737.403 1215.26 754.225 1223.52 773.161 1229.79L779.13 1211.75ZM721.364 1162.71L740.363 1162.64C740.355 1160.46 741.553 1155.78 749.579 1149.18C757.494 1142.68 770.044 1136.12 786.979 1130.62L781.107 1112.55L775.235 1094.48C755.665 1100.84 738.303 1109.26 725.453 1119.82C712.713 1130.29 702.293 1144.76 702.364 1162.79L721.364 1162.71ZM781.107 1112.55L793.033 1127.34C798.465 1122.96 809.254 1117.92 825.448 1114.05C841.208 1110.28 860.536 1108 881.629 1108V1089V1070C857.948 1070 835.623 1072.55 816.619 1077.09C798.05 1081.53 780.964 1088.26 769.181 1097.76L781.107 1112.55Z"
                  fill="black"
                  mask="url(#path-77-inside-33_17_636)"
                />
                <mask id="path-79-inside-34_17_636" fill="white">
                  <path d="M881.629 1215C925.283 1215 963.004 1224.19 980.82 1237.52C1018.22 1249.15 1042.28 1267.3 1042.36 1287.77C1042.44 1307.6 1019.99 1325.39 984.654 1337.26C968.912 1352.3 928.724 1363 881.629 1363C835.051 1363 795.227 1352.54 779.13 1337.75C743.894 1326.09 721.442 1308.48 721.364 1288.71C721.284 1268.51 744.602 1250.41 781.107 1238.55C798.322 1224.67 836.855 1215 881.629 1215Z" />
                </mask>
                <path
                  d="M881.629 1215C925.283 1215 963.004 1224.19 980.82 1237.52C1018.22 1249.15 1042.28 1267.3 1042.36 1287.77C1042.44 1307.6 1019.99 1325.39 984.654 1337.26C968.912 1352.3 928.724 1363 881.629 1363C835.051 1363 795.227 1352.54 779.13 1337.75C743.894 1326.09 721.442 1308.48 721.364 1288.71C721.284 1268.51 744.602 1250.41 781.107 1238.55C798.322 1224.67 836.855 1215 881.629 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M881.629 1215L881.629 1196H881.629V1215ZM980.82 1237.52L969.44 1252.73L972.057 1254.69L975.177 1255.66L980.82 1237.52ZM1042.36 1287.77L1061.36 1287.69L1061.36 1287.69L1042.36 1287.77ZM984.654 1337.26L978.604 1319.25L974.588 1320.6L971.526 1323.52L984.654 1337.26ZM881.629 1363L881.629 1382H881.629L881.629 1363ZM779.13 1337.75L791.983 1323.76L788.976 1321L785.099 1319.71L779.13 1337.75ZM721.364 1288.71L702.364 1288.79L702.364 1288.79L721.364 1288.71ZM781.107 1238.55L786.979 1256.62L790.308 1255.54L793.033 1253.34L781.107 1238.55ZM881.629 1215L881.629 1234C902.189 1234 921.081 1236.17 936.627 1239.77C952.537 1243.46 963.531 1248.31 969.44 1252.73L980.82 1237.52L992.2 1222.3C980.292 1213.39 963.518 1206.99 945.2 1202.75C926.519 1198.42 904.723 1196 881.629 1196L881.629 1215ZM980.82 1237.52L975.177 1255.66C992.558 1261.06 1005.51 1267.61 1013.73 1274.17C1022.07 1280.84 1023.35 1285.63 1023.36 1287.84L1042.36 1287.77L1061.36 1287.69C1061.29 1269.44 1050.5 1254.92 1037.45 1244.49C1024.26 1233.95 1006.48 1225.6 986.462 1219.37L980.82 1237.52ZM1042.36 1287.77L1023.36 1287.84C1023.37 1289.98 1022.23 1294.52 1014.57 1300.95C1007 1307.3 994.955 1313.75 978.604 1319.25L984.654 1337.26L990.703 1355.27C1009.69 1348.89 1026.53 1340.52 1039 1330.05C1051.39 1319.66 1061.43 1305.38 1061.36 1287.69L1042.36 1287.77ZM984.654 1337.26L971.526 1323.52C967.186 1327.67 957 1333.09 940.214 1337.36C924.051 1341.47 903.826 1344 881.629 1344L881.629 1363L881.629 1382C906.526 1382 929.943 1379.18 949.584 1374.18C968.601 1369.35 986.38 1361.89 997.781 1350.99L984.654 1337.26ZM881.629 1363V1344C859.678 1344 839.651 1341.53 823.573 1337.49C806.919 1333.31 796.577 1327.98 791.983 1323.76L779.13 1337.75L766.277 1351.75C777.78 1362.31 795.398 1369.6 814.325 1374.35C833.828 1379.24 857.002 1382 881.629 1382V1363ZM779.13 1337.75L785.099 1319.71C768.799 1314.32 756.777 1307.95 749.205 1301.66C741.551 1295.3 740.372 1290.78 740.363 1288.64L721.364 1288.71L702.364 1288.79C702.434 1306.42 712.52 1320.58 724.921 1330.89C737.403 1341.26 754.225 1349.52 773.161 1355.79L779.13 1337.75ZM721.364 1288.71L740.363 1288.64C740.355 1286.46 741.553 1281.78 749.579 1275.18C757.494 1268.68 770.044 1262.12 786.979 1256.62L781.107 1238.55L775.235 1220.48C755.665 1226.84 738.303 1235.26 725.453 1245.82C712.713 1256.29 702.293 1270.76 702.364 1288.79L721.364 1288.71ZM781.107 1238.55L793.033 1253.34C798.465 1248.96 809.254 1243.92 825.448 1240.05C841.208 1236.28 860.536 1234 881.629 1234V1215V1196C857.948 1196 835.623 1198.55 816.619 1203.09C798.05 1207.53 780.964 1214.26 769.181 1223.76L781.107 1238.55Z"
                  fill="black"
                  mask="url(#path-79-inside-34_17_636)"
                />
                <mask id="path-81-inside-35_17_636" fill="white">
                  <path d="M881.629 1341C925.283 1341 963.004 1350.19 980.82 1363.52C1018.22 1375.15 1042.28 1393.3 1042.36 1413.77C1042.44 1433.6 1019.99 1451.39 984.654 1463.26C968.912 1478.3 928.724 1489 881.629 1489C835.051 1489 795.227 1478.54 779.13 1463.75C743.894 1452.09 721.442 1434.48 721.364 1414.71C721.284 1394.51 744.602 1376.41 781.107 1364.55C798.322 1350.67 836.855 1341 881.629 1341Z" />
                </mask>
                <path
                  d="M881.629 1341C925.283 1341 963.004 1350.19 980.82 1363.52C1018.22 1375.15 1042.28 1393.3 1042.36 1413.77C1042.44 1433.6 1019.99 1451.39 984.654 1463.26C968.912 1478.3 928.724 1489 881.629 1489C835.051 1489 795.227 1478.54 779.13 1463.75C743.894 1452.09 721.442 1434.48 721.364 1414.71C721.284 1394.51 744.602 1376.41 781.107 1364.55C798.322 1350.67 836.855 1341 881.629 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M881.629 1341L881.629 1322H881.629V1341ZM980.82 1363.52L969.44 1378.73L972.057 1380.69L975.177 1381.66L980.82 1363.52ZM1042.36 1413.77L1061.36 1413.69L1061.36 1413.69L1042.36 1413.77ZM984.654 1463.26L978.604 1445.25L974.588 1446.6L971.526 1449.52L984.654 1463.26ZM881.629 1489L881.629 1508H881.629L881.629 1489ZM779.13 1463.75L791.983 1449.76L788.976 1447L785.099 1445.71L779.13 1463.75ZM721.364 1414.71L702.364 1414.79L702.364 1414.79L721.364 1414.71ZM781.107 1364.55L786.979 1382.62L790.308 1381.54L793.033 1379.34L781.107 1364.55ZM881.629 1341L881.629 1360C902.189 1360 921.081 1362.17 936.627 1365.77C952.537 1369.46 963.531 1374.31 969.44 1378.73L980.82 1363.52L992.2 1348.3C980.292 1339.39 963.518 1332.99 945.2 1328.75C926.519 1324.42 904.723 1322 881.629 1322L881.629 1341ZM980.82 1363.52L975.177 1381.66C992.558 1387.06 1005.51 1393.61 1013.73 1400.17C1022.07 1406.84 1023.35 1411.63 1023.36 1413.84L1042.36 1413.77L1061.36 1413.69C1061.29 1395.44 1050.5 1380.92 1037.45 1370.49C1024.26 1359.95 1006.48 1351.6 986.462 1345.37L980.82 1363.52ZM1042.36 1413.77L1023.36 1413.84C1023.37 1415.98 1022.23 1420.52 1014.57 1426.95C1007 1433.3 994.955 1439.75 978.604 1445.25L984.654 1463.26L990.703 1481.27C1009.69 1474.89 1026.53 1466.52 1039 1456.05C1051.39 1445.66 1061.43 1431.38 1061.36 1413.69L1042.36 1413.77ZM984.654 1463.26L971.526 1449.52C967.186 1453.67 957 1459.09 940.214 1463.36C924.051 1467.47 903.826 1470 881.629 1470L881.629 1489L881.629 1508C906.526 1508 929.943 1505.18 949.584 1500.18C968.601 1495.35 986.38 1487.89 997.781 1476.99L984.654 1463.26ZM881.629 1489V1470C859.678 1470 839.651 1467.53 823.573 1463.49C806.919 1459.31 796.577 1453.98 791.983 1449.76L779.13 1463.75L766.277 1477.75C777.78 1488.31 795.398 1495.6 814.325 1500.35C833.828 1505.24 857.002 1508 881.629 1508V1489ZM779.13 1463.75L785.099 1445.71C768.799 1440.32 756.777 1433.95 749.205 1427.66C741.551 1421.3 740.372 1416.78 740.363 1414.64L721.364 1414.71L702.364 1414.79C702.434 1432.42 712.52 1446.58 724.921 1456.89C737.403 1467.26 754.225 1475.52 773.161 1481.79L779.13 1463.75ZM721.364 1414.71L740.363 1414.64C740.355 1412.46 741.553 1407.78 749.579 1401.18C757.494 1394.68 770.044 1388.12 786.979 1382.62L781.107 1364.55L775.235 1346.48C755.665 1352.84 738.303 1361.26 725.453 1371.82C712.713 1382.29 702.293 1396.76 702.364 1414.79L721.364 1414.71ZM781.107 1364.55L793.033 1379.34C798.465 1374.96 809.254 1369.92 825.448 1366.05C841.208 1362.28 860.536 1360 881.629 1360V1341V1322C857.948 1322 835.623 1324.55 816.619 1329.09C798.05 1333.53 780.964 1340.26 769.181 1349.76L781.107 1364.55Z"
                  fill="black"
                  mask="url(#path-81-inside-35_17_636)"
                />
                <rect
                  x="506.333"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="537.648"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-85-inside-36_17_636" fill="white">
                  <path d="M542.599 257C586.252 257 623.974 266.191 641.79 279.516C679.191 291.148 703.253 309.304 703.333 329.769C703.412 349.598 680.959 367.39 645.624 379.258C629.884 394.303 589.694 405 542.599 405C496.021 405 456.196 394.537 440.1 379.752C404.864 368.091 382.411 350.48 382.333 330.713C382.254 310.506 405.573 292.412 442.078 280.55C459.293 266.669 497.826 257 542.599 257Z" />
                </mask>
                <path
                  d="M542.599 257C586.252 257 623.974 266.191 641.79 279.516C679.191 291.148 703.253 309.304 703.333 329.769C703.412 349.598 680.959 367.39 645.624 379.258C629.884 394.303 589.694 405 542.599 405C496.021 405 456.196 394.537 440.1 379.752C404.864 368.091 382.411 350.48 382.333 330.713C382.254 310.506 405.573 292.412 442.078 280.55C459.293 266.669 497.826 257 542.599 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M542.599 257L542.599 238L542.599 238L542.599 257ZM641.79 279.516L630.41 294.731L633.027 296.688L636.147 297.658L641.79 279.516ZM703.333 329.769L722.333 329.694L722.333 329.694L703.333 329.769ZM645.624 379.258L639.575 361.247L635.559 362.595L632.497 365.523L645.624 379.258ZM542.599 405L542.599 424H542.599V405ZM440.1 379.752L452.953 365.759L449.946 362.997L446.069 361.714L440.1 379.752ZM382.333 330.713L363.334 330.788L363.334 330.788L382.333 330.713ZM442.078 280.55L447.949 298.62L451.279 297.538L454.004 295.341L442.078 280.55ZM542.599 257V276C563.159 276 582.05 278.171 597.597 281.771C613.507 285.456 624.501 290.311 630.41 294.731L641.79 279.516L653.169 264.301C641.262 255.395 624.488 248.993 606.17 244.751C587.488 240.425 565.692 238 542.599 238V257ZM641.79 279.516L636.147 297.658C653.529 303.064 666.483 309.61 674.696 316.173C683.044 322.844 684.325 327.631 684.334 329.844L703.333 329.769L722.333 329.694C722.261 311.441 711.471 296.918 698.418 286.487C685.229 275.947 667.452 267.599 647.432 261.373L641.79 279.516ZM703.333 329.769L684.334 329.843C684.342 331.984 683.197 336.522 675.544 342.945C667.973 349.3 655.926 355.755 639.575 361.247L645.624 379.258L651.674 397.269C670.658 390.893 687.504 382.518 699.974 372.052C712.361 361.655 722.403 347.382 722.333 329.694L703.333 329.769ZM645.624 379.258L632.497 365.523C628.157 369.67 617.971 375.086 601.184 379.357C585.022 383.47 564.797 386 542.599 386V405V424C567.496 424 590.913 421.182 610.555 416.184C629.572 411.345 647.351 403.89 658.752 392.993L645.624 379.258ZM542.599 405L542.599 386C520.648 386 500.621 383.526 484.543 379.492C467.889 375.313 457.547 369.978 452.953 365.759L440.1 379.752L427.247 393.745C438.75 404.31 456.368 411.6 475.295 416.349C494.798 421.243 517.972 424 542.599 424L542.599 405ZM440.1 379.752L446.069 361.714C429.769 356.32 417.747 349.95 410.175 343.658C402.521 337.299 401.342 332.779 401.333 330.638L382.333 330.713L363.334 330.788C363.403 348.414 373.489 362.583 385.89 372.886C398.373 383.258 415.195 391.523 434.131 397.79L440.1 379.752ZM382.333 330.713L401.333 330.638C401.325 328.459 402.523 323.777 410.549 317.182C418.464 310.677 431.014 304.123 447.949 298.62L442.078 280.55L436.206 262.48C416.636 268.839 399.274 277.263 386.423 287.823C373.684 298.291 363.263 312.76 363.334 330.788L382.333 330.713ZM442.078 280.55L454.004 295.341C459.436 290.96 470.225 285.918 486.419 282.049C502.178 278.285 521.507 276 542.599 276L542.599 257L542.599 238C518.918 238 496.593 240.55 477.59 245.089C459.02 249.525 441.935 256.258 430.152 265.759L442.078 280.55Z"
                  fill="black"
                  mask="url(#path-85-inside-36_17_636)"
                />
                <mask id="path-87-inside-37_17_636" fill="white">
                  <path d="M542.599 963C586.252 963 623.974 972.191 641.79 985.516C679.191 997.148 703.253 1015.3 703.333 1035.77C703.412 1055.6 680.959 1073.39 645.624 1085.26C629.884 1100.3 589.694 1111 542.599 1111C496.021 1111 456.196 1100.54 440.1 1085.75C404.864 1074.09 382.411 1056.48 382.333 1036.71C382.254 1016.51 405.573 998.412 442.078 986.55C459.293 972.669 497.826 963 542.599 963Z" />
                </mask>
                <path
                  d="M542.599 963C586.252 963 623.974 972.191 641.79 985.516C679.191 997.148 703.253 1015.3 703.333 1035.77C703.412 1055.6 680.959 1073.39 645.624 1085.26C629.884 1100.3 589.694 1111 542.599 1111C496.021 1111 456.196 1100.54 440.1 1085.75C404.864 1074.09 382.411 1056.48 382.333 1036.71C382.254 1016.51 405.573 998.412 442.078 986.55C459.293 972.669 497.826 963 542.599 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M542.599 963L542.599 944L542.599 944L542.599 963ZM641.79 985.516L630.41 1000.73L633.027 1002.69L636.147 1003.66L641.79 985.516ZM703.333 1035.77L722.333 1035.69L722.333 1035.69L703.333 1035.77ZM645.624 1085.26L639.575 1067.25L635.559 1068.6L632.497 1071.52L645.624 1085.26ZM542.599 1111L542.599 1130H542.599V1111ZM440.1 1085.75L452.953 1071.76L449.946 1069L446.069 1067.71L440.1 1085.75ZM382.333 1036.71L363.334 1036.79L363.334 1036.79L382.333 1036.71ZM442.078 986.55L447.949 1004.62L451.279 1003.54L454.004 1001.34L442.078 986.55ZM542.599 963V982C563.159 982 582.05 984.171 597.597 987.771C613.507 991.456 624.501 996.311 630.41 1000.73L641.79 985.516L653.169 970.301C641.262 961.395 624.488 954.993 606.17 950.751C587.488 946.425 565.692 944 542.599 944V963ZM641.79 985.516L636.147 1003.66C653.529 1009.06 666.483 1015.61 674.696 1022.17C683.044 1028.84 684.325 1033.63 684.334 1035.84L703.333 1035.77L722.333 1035.69C722.261 1017.44 711.471 1002.92 698.418 992.487C685.229 981.947 667.452 973.599 647.432 967.373L641.79 985.516ZM703.333 1035.77L684.334 1035.84C684.342 1037.98 683.197 1042.52 675.544 1048.95C667.973 1055.3 655.926 1061.75 639.575 1067.25L645.624 1085.26L651.674 1103.27C670.658 1096.89 687.504 1088.52 699.974 1078.05C712.361 1067.65 722.403 1053.38 722.333 1035.69L703.333 1035.77ZM645.624 1085.26L632.497 1071.52C628.157 1075.67 617.971 1081.09 601.184 1085.36C585.022 1089.47 564.797 1092 542.599 1092V1111V1130C567.496 1130 590.913 1127.18 610.555 1122.18C629.572 1117.35 647.351 1109.89 658.752 1098.99L645.624 1085.26ZM542.599 1111L542.599 1092C520.648 1092 500.621 1089.53 484.543 1085.49C467.889 1081.31 457.547 1075.98 452.953 1071.76L440.1 1085.75L427.247 1099.74C438.75 1110.31 456.368 1117.6 475.295 1122.35C494.798 1127.24 517.972 1130 542.599 1130L542.599 1111ZM440.1 1085.75L446.069 1067.71C429.769 1062.32 417.747 1055.95 410.175 1049.66C402.521 1043.3 401.342 1038.78 401.333 1036.64L382.333 1036.71L363.334 1036.79C363.403 1054.41 373.489 1068.58 385.89 1078.89C398.373 1089.26 415.195 1097.52 434.131 1103.79L440.1 1085.75ZM382.333 1036.71L401.333 1036.64C401.325 1034.46 402.523 1029.78 410.549 1023.18C418.464 1016.68 431.014 1010.12 447.949 1004.62L442.078 986.55L436.206 968.48C416.636 974.839 399.274 983.263 386.424 993.823C373.684 1004.29 363.263 1018.76 363.334 1036.79L382.333 1036.71ZM442.078 986.55L454.004 1001.34C459.436 996.96 470.225 991.918 486.419 988.049C502.178 984.285 521.507 982 542.599 982L542.599 963L542.599 944C518.918 944 496.593 946.55 477.59 951.089C459.02 955.525 441.935 962.258 430.152 971.759L442.078 986.55Z"
                  fill="black"
                  mask="url(#path-87-inside-37_17_636)"
                />
                <mask id="path-89-inside-38_17_636" fill="white">
                  <path d="M542.599 1089C586.253 1089 623.974 1098.19 641.79 1111.52C679.191 1123.15 703.253 1141.3 703.333 1161.77C703.412 1181.6 680.958 1199.39 645.623 1211.26C629.882 1226.3 589.694 1237 542.599 1237C496.021 1237 456.197 1226.54 440.1 1211.75C404.864 1200.09 382.412 1182.48 382.333 1162.71C382.254 1142.51 405.572 1124.41 442.077 1112.55C459.292 1098.67 497.825 1089 542.599 1089Z" />
                </mask>
                <path
                  d="M542.599 1089C586.253 1089 623.974 1098.19 641.79 1111.52C679.191 1123.15 703.253 1141.3 703.333 1161.77C703.412 1181.6 680.958 1199.39 645.623 1211.26C629.882 1226.3 589.694 1237 542.599 1237C496.021 1237 456.197 1226.54 440.1 1211.75C404.864 1200.09 382.412 1182.48 382.333 1162.71C382.254 1142.51 405.572 1124.41 442.077 1112.55C459.292 1098.67 497.825 1089 542.599 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M542.599 1089L542.599 1070H542.599V1089ZM641.79 1111.52L630.41 1126.73L633.026 1128.69L636.147 1129.66L641.79 1111.52ZM703.333 1161.77L722.333 1161.69L722.333 1161.69L703.333 1161.77ZM645.623 1211.26L639.574 1193.25L635.558 1194.6L632.496 1197.52L645.623 1211.26ZM542.599 1237L542.599 1256H542.599L542.599 1237ZM440.1 1211.75L452.953 1197.76L449.946 1195L446.069 1193.71L440.1 1211.75ZM382.333 1162.71L363.334 1162.79L363.334 1162.79L382.333 1162.71ZM442.077 1112.55L447.949 1130.62L451.278 1129.54L454.003 1127.34L442.077 1112.55ZM542.599 1089L542.599 1108C563.159 1108 582.05 1110.17 597.597 1113.77C613.507 1117.46 624.501 1122.31 630.41 1126.73L641.79 1111.52L653.169 1096.3C641.262 1087.39 624.488 1080.99 606.17 1076.75C587.489 1072.42 565.692 1070 542.599 1070L542.599 1089ZM641.79 1111.52L636.147 1129.66C653.528 1135.06 666.483 1141.61 674.696 1148.17C683.044 1154.84 684.325 1159.63 684.334 1161.84L703.333 1161.77L722.333 1161.69C722.261 1143.44 711.471 1128.92 698.418 1118.49C685.229 1107.95 667.452 1099.6 647.432 1093.37L641.79 1111.52ZM703.333 1161.77L684.334 1161.84C684.342 1163.98 683.197 1168.52 675.544 1174.95C667.972 1181.3 655.925 1187.75 639.574 1193.25L645.623 1211.26L651.673 1229.27C670.657 1222.89 687.503 1214.52 699.973 1204.05C712.361 1193.66 722.403 1179.38 722.333 1161.69L703.333 1161.77ZM645.623 1211.26L632.496 1197.52C628.156 1201.67 617.97 1207.09 601.184 1211.36C585.021 1215.47 564.796 1218 542.599 1218L542.599 1237L542.599 1256C567.496 1256 590.913 1253.18 610.554 1248.18C629.571 1243.35 647.35 1235.89 658.751 1224.99L645.623 1211.26ZM542.599 1237V1218C520.648 1218 500.621 1215.53 484.543 1211.49C467.889 1207.31 457.547 1201.98 452.953 1197.76L440.1 1211.75L427.247 1225.75C438.75 1236.31 456.368 1243.6 475.295 1248.35C494.798 1253.24 517.972 1256 542.599 1256V1237ZM440.1 1211.75L446.069 1193.71C429.769 1188.32 417.747 1181.95 410.175 1175.66C402.521 1169.3 401.342 1164.78 401.333 1162.64L382.333 1162.71L363.334 1162.79C363.404 1180.42 373.49 1194.58 385.891 1204.89C398.373 1215.26 415.195 1223.52 434.131 1229.79L440.1 1211.75ZM382.333 1162.71L401.333 1162.64C401.325 1160.46 402.523 1155.78 410.549 1149.18C418.464 1142.68 431.014 1136.12 447.949 1130.62L442.077 1112.55L436.205 1094.48C416.635 1100.84 399.273 1109.26 386.423 1119.82C373.683 1130.29 363.262 1144.76 363.334 1162.79L382.333 1162.71ZM442.077 1112.55L454.003 1127.34C459.435 1122.96 470.224 1117.92 486.418 1114.05C502.178 1110.28 521.506 1108 542.599 1108V1089V1070C518.918 1070 496.593 1072.55 477.589 1077.09C459.019 1081.53 441.934 1088.26 430.15 1097.76L442.077 1112.55Z"
                  fill="black"
                  mask="url(#path-89-inside-38_17_636)"
                />
                <mask id="path-91-inside-39_17_636" fill="white">
                  <path d="M542.599 1215C586.253 1215 623.974 1224.19 641.79 1237.52C679.191 1249.15 703.253 1267.3 703.333 1287.77C703.412 1307.6 680.958 1325.39 645.623 1337.26C629.882 1352.3 589.694 1363 542.599 1363C496.021 1363 456.197 1352.54 440.1 1337.75C404.864 1326.09 382.412 1308.48 382.333 1288.71C382.254 1268.51 405.572 1250.41 442.077 1238.55C459.292 1224.67 497.825 1215 542.599 1215Z" />
                </mask>
                <path
                  d="M542.599 1215C586.253 1215 623.974 1224.19 641.79 1237.52C679.191 1249.15 703.253 1267.3 703.333 1287.77C703.412 1307.6 680.958 1325.39 645.623 1337.26C629.882 1352.3 589.694 1363 542.599 1363C496.021 1363 456.197 1352.54 440.1 1337.75C404.864 1326.09 382.412 1308.48 382.333 1288.71C382.254 1268.51 405.572 1250.41 442.077 1238.55C459.292 1224.67 497.825 1215 542.599 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M542.599 1215L542.599 1196H542.599V1215ZM641.79 1237.52L630.41 1252.73L633.026 1254.69L636.147 1255.66L641.79 1237.52ZM703.333 1287.77L722.333 1287.69L722.333 1287.69L703.333 1287.77ZM645.623 1337.26L639.574 1319.25L635.558 1320.6L632.496 1323.52L645.623 1337.26ZM542.599 1363L542.599 1382H542.599L542.599 1363ZM440.1 1337.75L452.953 1323.76L449.946 1321L446.069 1319.71L440.1 1337.75ZM382.333 1288.71L363.334 1288.79L363.334 1288.79L382.333 1288.71ZM442.077 1238.55L447.949 1256.62L451.278 1255.54L454.003 1253.34L442.077 1238.55ZM542.599 1215L542.599 1234C563.159 1234 582.05 1236.17 597.597 1239.77C613.507 1243.46 624.501 1248.31 630.41 1252.73L641.79 1237.52L653.169 1222.3C641.262 1213.39 624.488 1206.99 606.17 1202.75C587.489 1198.42 565.692 1196 542.599 1196L542.599 1215ZM641.79 1237.52L636.147 1255.66C653.528 1261.06 666.483 1267.61 674.696 1274.17C683.044 1280.84 684.325 1285.63 684.334 1287.84L703.333 1287.77L722.333 1287.69C722.261 1269.44 711.471 1254.92 698.418 1244.49C685.229 1233.95 667.452 1225.6 647.432 1219.37L641.79 1237.52ZM703.333 1287.77L684.334 1287.84C684.342 1289.98 683.197 1294.52 675.544 1300.95C667.972 1307.3 655.925 1313.75 639.574 1319.25L645.623 1337.26L651.673 1355.27C670.657 1348.89 687.503 1340.52 699.973 1330.05C712.361 1319.66 722.403 1305.38 722.333 1287.69L703.333 1287.77ZM645.623 1337.26L632.496 1323.52C628.156 1327.67 617.97 1333.09 601.184 1337.36C585.021 1341.47 564.796 1344 542.599 1344L542.599 1363L542.599 1382C567.496 1382 590.913 1379.18 610.554 1374.18C629.571 1369.35 647.35 1361.89 658.751 1350.99L645.623 1337.26ZM542.599 1363V1344C520.648 1344 500.621 1341.53 484.543 1337.49C467.889 1333.31 457.547 1327.98 452.953 1323.76L440.1 1337.75L427.247 1351.75C438.75 1362.31 456.368 1369.6 475.295 1374.35C494.798 1379.24 517.972 1382 542.599 1382V1363ZM440.1 1337.75L446.069 1319.71C429.769 1314.32 417.747 1307.95 410.175 1301.66C402.521 1295.3 401.342 1290.78 401.333 1288.64L382.333 1288.71L363.334 1288.79C363.404 1306.42 373.49 1320.58 385.891 1330.89C398.373 1341.26 415.195 1349.52 434.131 1355.79L440.1 1337.75ZM382.333 1288.71L401.333 1288.64C401.325 1286.46 402.523 1281.78 410.549 1275.18C418.464 1268.68 431.014 1262.12 447.949 1256.62L442.077 1238.55L436.205 1220.48C416.635 1226.84 399.273 1235.26 386.423 1245.82C373.683 1256.29 363.262 1270.76 363.334 1288.79L382.333 1288.71ZM442.077 1238.55L454.003 1253.34C459.435 1248.96 470.224 1243.92 486.418 1240.05C502.178 1236.28 521.506 1234 542.599 1234V1215V1196C518.918 1196 496.593 1198.55 477.589 1203.09C459.019 1207.53 441.934 1214.26 430.15 1223.76L442.077 1238.55Z"
                  fill="black"
                  mask="url(#path-91-inside-39_17_636)"
                />
                <mask id="path-93-inside-40_17_636" fill="white">
                  <path d="M542.599 1341C586.253 1341 623.974 1350.19 641.79 1363.52C679.191 1375.15 703.253 1393.3 703.333 1413.77C703.412 1433.6 680.958 1451.39 645.623 1463.26C629.882 1478.3 589.694 1489 542.599 1489C496.021 1489 456.197 1478.54 440.1 1463.75C404.864 1452.09 382.412 1434.48 382.333 1414.71C382.254 1394.51 405.572 1376.41 442.077 1364.55C459.292 1350.67 497.825 1341 542.599 1341Z" />
                </mask>
                <path
                  d="M542.599 1341C586.253 1341 623.974 1350.19 641.79 1363.52C679.191 1375.15 703.253 1393.3 703.333 1413.77C703.412 1433.6 680.958 1451.39 645.623 1463.26C629.882 1478.3 589.694 1489 542.599 1489C496.021 1489 456.197 1478.54 440.1 1463.75C404.864 1452.09 382.412 1434.48 382.333 1414.71C382.254 1394.51 405.572 1376.41 442.077 1364.55C459.292 1350.67 497.825 1341 542.599 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M542.599 1341L542.599 1322H542.599V1341ZM641.79 1363.52L630.41 1378.73L633.026 1380.69L636.147 1381.66L641.79 1363.52ZM703.333 1413.77L722.333 1413.69L722.333 1413.69L703.333 1413.77ZM645.623 1463.26L639.574 1445.25L635.558 1446.6L632.496 1449.52L645.623 1463.26ZM542.599 1489L542.599 1508H542.599L542.599 1489ZM440.1 1463.75L452.953 1449.76L449.946 1447L446.069 1445.71L440.1 1463.75ZM382.333 1414.71L363.334 1414.79L363.334 1414.79L382.333 1414.71ZM442.077 1364.55L447.949 1382.62L451.278 1381.54L454.003 1379.34L442.077 1364.55ZM542.599 1341L542.599 1360C563.159 1360 582.05 1362.17 597.597 1365.77C613.507 1369.46 624.501 1374.31 630.41 1378.73L641.79 1363.52L653.169 1348.3C641.262 1339.39 624.488 1332.99 606.17 1328.75C587.489 1324.42 565.692 1322 542.599 1322L542.599 1341ZM641.79 1363.52L636.147 1381.66C653.528 1387.06 666.483 1393.61 674.696 1400.17C683.044 1406.84 684.325 1411.63 684.334 1413.84L703.333 1413.77L722.333 1413.69C722.261 1395.44 711.471 1380.92 698.418 1370.49C685.229 1359.95 667.452 1351.6 647.432 1345.37L641.79 1363.52ZM703.333 1413.77L684.334 1413.84C684.342 1415.98 683.197 1420.52 675.544 1426.95C667.972 1433.3 655.925 1439.75 639.574 1445.25L645.623 1463.26L651.673 1481.27C670.657 1474.89 687.503 1466.52 699.973 1456.05C712.361 1445.66 722.403 1431.38 722.333 1413.69L703.333 1413.77ZM645.623 1463.26L632.496 1449.52C628.156 1453.67 617.97 1459.09 601.184 1463.36C585.021 1467.47 564.796 1470 542.599 1470L542.599 1489L542.599 1508C567.496 1508 590.913 1505.18 610.554 1500.18C629.571 1495.35 647.35 1487.89 658.751 1476.99L645.623 1463.26ZM542.599 1489V1470C520.648 1470 500.621 1467.53 484.543 1463.49C467.889 1459.31 457.547 1453.98 452.953 1449.76L440.1 1463.75L427.247 1477.75C438.75 1488.31 456.368 1495.6 475.295 1500.35C494.798 1505.24 517.972 1508 542.599 1508V1489ZM440.1 1463.75L446.069 1445.71C429.769 1440.32 417.747 1433.95 410.175 1427.66C402.521 1421.3 401.342 1416.78 401.333 1414.64L382.333 1414.71L363.334 1414.79C363.404 1432.42 373.49 1446.58 385.891 1456.89C398.373 1467.26 415.195 1475.52 434.131 1481.79L440.1 1463.75ZM382.333 1414.71L401.333 1414.64C401.325 1412.46 402.523 1407.78 410.549 1401.18C418.464 1394.68 431.014 1388.12 447.949 1382.62L442.077 1364.55L436.205 1346.48C416.635 1352.84 399.273 1361.26 386.423 1371.82C373.683 1382.29 363.262 1396.76 363.334 1414.79L382.333 1414.71ZM442.077 1364.55L454.003 1379.34C459.435 1374.96 470.224 1369.92 486.418 1366.05C502.178 1362.28 521.506 1360 542.599 1360V1341V1322C518.918 1322 496.593 1324.55 477.589 1329.09C459.019 1333.53 441.934 1340.26 430.15 1349.76L442.077 1364.55Z"
                  fill="black"
                  mask="url(#path-93-inside-40_17_636)"
                />
                <rect
                  x="167.303"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-96-inside-41_17_636" fill="white">
                  <path d="M203.569 257C247.222 257 284.944 266.191 302.759 279.516C340.161 291.148 364.223 309.304 364.303 329.769C364.382 349.598 341.929 367.39 306.594 379.258C290.854 394.303 250.664 405 203.569 405C156.991 405 117.166 394.537 101.07 379.752C65.8338 368.091 43.3815 350.48 43.3034 330.713C43.2238 310.506 66.5425 292.412 103.048 280.55C120.263 266.669 158.796 257 203.569 257Z" />
                </mask>
                <path
                  d="M203.569 257C247.222 257 284.944 266.191 302.759 279.516C340.161 291.148 364.223 309.304 364.303 329.769C364.382 349.598 341.929 367.39 306.594 379.258C290.854 394.303 250.664 405 203.569 405C156.991 405 117.166 394.537 101.07 379.752C65.8338 368.091 43.3815 350.48 43.3034 330.713C43.2238 310.506 66.5425 292.412 103.048 280.55C120.263 266.669 158.796 257 203.569 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M203.569 257L203.569 238L203.569 238L203.569 257ZM302.759 279.516L291.38 294.731L293.997 296.688L297.117 297.658L302.759 279.516ZM364.303 329.769L383.303 329.694L383.303 329.694L364.303 329.769ZM306.594 379.258L300.545 361.247L296.529 362.595L293.467 365.523L306.594 379.258ZM203.569 405L203.569 424H203.569V405ZM101.07 379.752L113.923 365.759L110.916 362.997L107.039 361.714L101.07 379.752ZM43.3034 330.713L24.3036 330.788L24.3036 330.788L43.3034 330.713ZM103.048 280.55L108.919 298.62L112.249 297.538L114.974 295.341L103.048 280.55ZM203.569 257V276C224.129 276 243.02 278.171 258.567 281.771C274.477 285.456 285.471 290.311 291.38 294.731L302.759 279.516L314.139 264.301C302.232 255.395 285.458 248.993 267.14 244.751C248.458 240.425 226.662 238 203.569 238V257ZM302.759 279.516L297.117 297.658C314.499 303.064 327.453 309.61 335.666 316.173C344.014 322.844 345.295 327.631 345.304 329.844L364.303 329.769L383.303 329.694C383.231 311.441 372.441 296.918 359.388 286.487C346.199 275.947 328.422 267.599 308.402 261.373L302.759 279.516ZM364.303 329.769L345.304 329.843C345.312 331.984 344.167 336.522 336.514 342.945C328.943 349.3 316.896 355.755 300.545 361.247L306.594 379.258L312.644 397.269C331.628 390.893 348.474 382.518 360.943 372.052C373.331 361.655 383.373 347.382 383.303 329.694L364.303 329.769ZM306.594 379.258L293.467 365.523C289.127 369.67 278.941 375.086 262.154 379.357C245.992 383.47 225.767 386 203.569 386V405V424C228.466 424 251.883 421.182 271.525 416.184C290.542 411.345 308.321 403.89 319.722 392.993L306.594 379.258ZM203.569 405L203.569 386C181.618 386 161.591 383.526 145.513 379.492C128.859 375.313 118.517 369.978 113.923 365.759L101.07 379.752L88.2172 393.745C99.7198 404.31 117.338 411.6 136.265 416.349C155.768 421.243 178.942 424 203.569 424L203.569 405ZM101.07 379.752L107.039 361.714C90.7393 356.32 78.7168 349.95 71.1445 343.658C63.4908 337.299 62.3117 332.779 62.3033 330.638L43.3034 330.713L24.3036 330.788C24.3732 348.414 34.4593 362.583 46.8603 372.886C59.3428 383.258 76.1646 391.523 95.1008 397.79L101.07 379.752ZM43.3034 330.713L62.3033 330.638C62.2947 328.459 63.4928 323.777 71.5191 317.182C79.4342 310.677 91.9842 304.123 108.919 298.62L103.048 280.55L97.1757 262.48C77.6059 268.839 60.244 277.263 47.3934 287.823C34.654 298.291 24.2326 312.76 24.3036 330.788L43.3034 330.713ZM103.048 280.55L114.974 295.341C120.406 290.96 131.195 285.918 147.389 282.049C163.148 278.285 182.477 276 203.569 276L203.569 257L203.569 238C179.888 238 157.563 240.55 138.56 245.089C119.99 249.525 102.905 256.258 91.1216 265.759L103.048 280.55Z"
                  fill="black"
                  mask="url(#path-96-inside-41_17_636)"
                />
                <mask id="path-98-inside-42_17_636" fill="white">
                  <path d="M203.569 963C247.222 963 284.944 972.191 302.759 985.516C340.161 997.148 364.223 1015.3 364.303 1035.77C364.382 1055.6 341.929 1073.39 306.594 1085.26C290.854 1100.3 250.664 1111 203.569 1111C156.991 1111 117.166 1100.54 101.07 1085.75C65.8339 1074.09 43.3815 1056.48 43.3034 1036.71C43.224 1016.51 66.5427 998.412 103.048 986.55C120.263 972.669 158.796 963 203.569 963Z" />
                </mask>
                <path
                  d="M203.569 963C247.222 963 284.944 972.191 302.759 985.516C340.161 997.148 364.223 1015.3 364.303 1035.77C364.382 1055.6 341.929 1073.39 306.594 1085.26C290.854 1100.3 250.664 1111 203.569 1111C156.991 1111 117.166 1100.54 101.07 1085.75C65.8339 1074.09 43.3815 1056.48 43.3034 1036.71C43.224 1016.51 66.5427 998.412 103.048 986.55C120.263 972.669 158.796 963 203.569 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M203.569 963L203.569 944L203.569 944L203.569 963ZM302.759 985.516L291.38 1000.73L293.997 1002.69L297.117 1003.66L302.759 985.516ZM364.303 1035.77L383.303 1035.69L383.303 1035.69L364.303 1035.77ZM306.594 1085.26L300.545 1067.25L296.529 1068.6L293.467 1071.52L306.594 1085.26ZM203.569 1111L203.569 1130H203.569V1111ZM101.07 1085.75L113.923 1071.76L110.916 1069L107.039 1067.71L101.07 1085.75ZM43.3034 1036.71L24.3036 1036.79L24.3036 1036.79L43.3034 1036.71ZM103.048 986.55L108.919 1004.62L112.249 1003.54L114.974 1001.34L103.048 986.55ZM203.569 963V982C224.129 982 243.02 984.171 258.567 987.771C274.477 991.456 285.471 996.311 291.38 1000.73L302.759 985.516L314.139 970.301C302.232 961.395 285.458 954.993 267.14 950.751C248.458 946.425 226.662 944 203.569 944V963ZM302.759 985.516L297.117 1003.66C314.499 1009.06 327.453 1015.61 335.666 1022.17C344.014 1028.84 345.295 1033.63 345.304 1035.84L364.303 1035.77L383.303 1035.69C383.231 1017.44 372.441 1002.92 359.388 992.487C346.199 981.947 328.422 973.599 308.402 967.373L302.759 985.516ZM364.303 1035.77L345.304 1035.84C345.312 1037.98 344.167 1042.52 336.514 1048.95C328.943 1055.3 316.896 1061.75 300.545 1067.25L306.594 1085.26L312.644 1103.27C331.628 1096.89 348.474 1088.52 360.944 1078.05C373.331 1067.65 383.373 1053.38 383.303 1035.69L364.303 1035.77ZM306.594 1085.26L293.467 1071.52C289.127 1075.67 278.941 1081.09 262.154 1085.36C245.992 1089.47 225.767 1092 203.569 1092V1111V1130C228.466 1130 251.883 1127.18 271.525 1122.18C290.542 1117.35 308.321 1109.89 319.722 1098.99L306.594 1085.26ZM203.569 1111L203.569 1092C181.618 1092 161.591 1089.53 145.513 1085.49C128.859 1081.31 118.517 1075.98 113.923 1071.76L101.07 1085.75L88.2172 1099.74C99.7198 1110.31 117.338 1117.6 136.265 1122.35C155.768 1127.24 178.942 1130 203.569 1130L203.569 1111ZM101.07 1085.75L107.039 1067.71C90.7393 1062.32 78.7168 1055.95 71.1446 1049.66C63.4908 1043.3 62.3117 1038.78 62.3033 1036.64L43.3034 1036.71L24.3036 1036.79C24.3732 1054.41 34.4593 1068.58 46.8603 1078.89C59.3428 1089.26 76.1646 1097.52 95.1008 1103.79L101.07 1085.75ZM43.3034 1036.71L62.3033 1036.64C62.2947 1034.46 63.4929 1029.78 71.5192 1023.18C79.4344 1016.68 91.9843 1010.12 108.919 1004.62L103.048 986.55L97.1757 968.48C77.606 974.839 60.2441 983.263 47.3935 993.823C34.6541 1004.29 24.2327 1018.76 24.3036 1036.79L43.3034 1036.71ZM103.048 986.55L114.974 1001.34C120.406 996.96 131.195 991.918 147.389 988.049C163.148 984.285 182.477 982 203.569 982L203.569 963L203.569 944C179.888 944 157.563 946.55 138.56 951.089C119.99 955.525 102.905 962.258 91.1216 971.759L103.048 986.55Z"
                  fill="black"
                  mask="url(#path-98-inside-42_17_636)"
                />
                <mask id="path-100-inside-43_17_636" fill="white">
                  <path d="M203.569 1089C247.223 1089 284.944 1098.19 302.759 1111.52C340.161 1123.15 364.223 1141.3 364.303 1161.77C364.382 1181.6 341.928 1199.39 306.593 1211.26C290.852 1226.3 250.663 1237 203.569 1237C156.991 1237 117.167 1226.54 101.07 1211.75C65.834 1200.09 43.3818 1182.48 43.3034 1162.71C43.2237 1142.51 66.5417 1124.41 103.047 1112.55C120.262 1098.67 158.795 1089 203.569 1089Z" />
                </mask>
                <path
                  d="M203.569 1089C247.223 1089 284.944 1098.19 302.759 1111.52C340.161 1123.15 364.223 1141.3 364.303 1161.77C364.382 1181.6 341.928 1199.39 306.593 1211.26C290.852 1226.3 250.663 1237 203.569 1237C156.991 1237 117.167 1226.54 101.07 1211.75C65.834 1200.09 43.3818 1182.48 43.3034 1162.71C43.2237 1142.51 66.5417 1124.41 103.047 1112.55C120.262 1098.67 158.795 1089 203.569 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M203.569 1089L203.569 1070H203.569V1089ZM302.759 1111.52L291.38 1126.73L293.996 1128.69L297.117 1129.66L302.759 1111.52ZM364.303 1161.77L383.303 1161.69L383.303 1161.69L364.303 1161.77ZM306.593 1211.26L300.544 1193.25L296.528 1194.6L293.466 1197.52L306.593 1211.26ZM203.569 1237L203.569 1256H203.569L203.569 1237ZM101.07 1211.75L113.923 1197.76L110.916 1195L107.039 1193.71L101.07 1211.75ZM43.3034 1162.71L24.3036 1162.79L24.3036 1162.79L43.3034 1162.71ZM103.047 1112.55L108.919 1130.62L112.248 1129.54L114.973 1127.34L103.047 1112.55ZM203.569 1089L203.569 1108C224.129 1108 243.02 1110.17 258.567 1113.77C274.477 1117.46 285.471 1122.31 291.38 1126.73L302.759 1111.52L314.139 1096.3C302.232 1087.39 285.458 1080.99 267.14 1076.75C248.459 1072.42 226.662 1070 203.569 1070L203.569 1089ZM302.759 1111.52L297.117 1129.66C314.498 1135.06 327.453 1141.61 335.666 1148.17C344.014 1154.84 345.295 1159.63 345.304 1161.84L364.303 1161.77L383.303 1161.69C383.231 1143.44 372.441 1128.92 359.388 1118.49C346.199 1107.95 328.422 1099.6 308.402 1093.37L302.759 1111.52ZM364.303 1161.77L345.304 1161.84C345.312 1163.98 344.167 1168.52 336.514 1174.95C328.942 1181.3 316.895 1187.75 300.544 1193.25L306.593 1211.26L312.643 1229.27C331.627 1222.89 348.473 1214.52 360.943 1204.05C373.331 1193.66 383.373 1179.38 383.303 1161.69L364.303 1161.77ZM306.593 1211.26L293.466 1197.52C289.126 1201.67 278.94 1207.09 262.154 1211.36C245.991 1215.47 225.766 1218 203.569 1218L203.569 1237L203.569 1256C228.466 1256 251.883 1253.18 271.524 1248.18C290.541 1243.35 308.32 1235.89 319.721 1224.99L306.593 1211.26ZM203.569 1237V1218C181.618 1218 161.591 1215.53 145.513 1211.49C128.859 1207.31 118.517 1201.98 113.923 1197.76L101.07 1211.75L88.2173 1225.75C99.7199 1236.31 117.338 1243.6 136.265 1248.35C155.768 1253.24 178.942 1256 203.569 1256V1237ZM101.07 1211.75L107.039 1193.71C90.7392 1188.32 78.7168 1181.95 71.1446 1175.66C63.4909 1169.3 62.3118 1164.78 62.3033 1162.64L43.3034 1162.71L24.3036 1162.79C24.3735 1180.42 34.4596 1194.58 46.8606 1204.89C59.3431 1215.26 76.1648 1223.52 95.1008 1229.79L101.07 1211.75ZM43.3034 1162.71L62.3033 1162.64C62.2947 1160.46 63.4929 1155.78 71.5189 1149.18C79.4338 1142.68 91.9835 1136.12 108.919 1130.62L103.047 1112.55L97.1747 1094.48C77.6048 1100.84 60.243 1109.26 47.3926 1119.82C34.6533 1130.29 24.2324 1144.76 24.3036 1162.79L43.3034 1162.71ZM103.047 1112.55L114.973 1127.34C120.405 1122.96 131.194 1117.92 147.388 1114.05C163.148 1110.28 182.476 1108 203.569 1108V1089V1070C179.888 1070 157.563 1072.55 138.559 1077.09C119.989 1081.53 102.904 1088.26 91.1205 1097.76L103.047 1112.55Z"
                  fill="black"
                  mask="url(#path-100-inside-43_17_636)"
                />
                <mask id="path-102-inside-44_17_636" fill="white">
                  <path d="M203.569 1215C247.223 1215 284.944 1224.19 302.759 1237.52C340.161 1249.15 364.223 1267.3 364.303 1287.77C364.382 1307.6 341.928 1325.39 306.593 1337.26C290.852 1352.3 250.663 1363 203.569 1363C156.991 1363 117.167 1352.54 101.07 1337.75C65.834 1326.09 43.3818 1308.48 43.3034 1288.71C43.2237 1268.51 66.5417 1250.41 103.047 1238.55C120.262 1224.67 158.795 1215 203.569 1215Z" />
                </mask>
                <path
                  d="M203.569 1215C247.223 1215 284.944 1224.19 302.759 1237.52C340.161 1249.15 364.223 1267.3 364.303 1287.77C364.382 1307.6 341.928 1325.39 306.593 1337.26C290.852 1352.3 250.663 1363 203.569 1363C156.991 1363 117.167 1352.54 101.07 1337.75C65.834 1326.09 43.3818 1308.48 43.3034 1288.71C43.2237 1268.51 66.5417 1250.41 103.047 1238.55C120.262 1224.67 158.795 1215 203.569 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M203.569 1215L203.569 1196H203.569V1215ZM302.759 1237.52L291.38 1252.73L293.996 1254.69L297.117 1255.66L302.759 1237.52ZM364.303 1287.77L383.303 1287.69L383.303 1287.69L364.303 1287.77ZM306.593 1337.26L300.544 1319.25L296.528 1320.6L293.466 1323.52L306.593 1337.26ZM203.569 1363L203.569 1382H203.569L203.569 1363ZM101.07 1337.75L113.923 1323.76L110.916 1321L107.039 1319.71L101.07 1337.75ZM43.3034 1288.71L24.3036 1288.79L24.3036 1288.79L43.3034 1288.71ZM103.047 1238.55L108.919 1256.62L112.248 1255.54L114.973 1253.34L103.047 1238.55ZM203.569 1215L203.569 1234C224.129 1234 243.02 1236.17 258.567 1239.77C274.477 1243.46 285.471 1248.31 291.38 1252.73L302.759 1237.52L314.139 1222.3C302.232 1213.39 285.458 1206.99 267.14 1202.75C248.459 1198.42 226.662 1196 203.569 1196L203.569 1215ZM302.759 1237.52L297.117 1255.66C314.498 1261.06 327.453 1267.61 335.666 1274.17C344.014 1280.84 345.295 1285.63 345.304 1287.84L364.303 1287.77L383.303 1287.69C383.231 1269.44 372.441 1254.92 359.388 1244.49C346.199 1233.95 328.422 1225.6 308.402 1219.37L302.759 1237.52ZM364.303 1287.77L345.304 1287.84C345.312 1289.98 344.167 1294.52 336.514 1300.95C328.942 1307.3 316.895 1313.75 300.544 1319.25L306.593 1337.26L312.643 1355.27C331.627 1348.89 348.473 1340.52 360.943 1330.05C373.331 1319.66 383.373 1305.38 383.303 1287.69L364.303 1287.77ZM306.593 1337.26L293.466 1323.52C289.126 1327.67 278.94 1333.09 262.154 1337.36C245.991 1341.47 225.766 1344 203.569 1344L203.569 1363L203.569 1382C228.466 1382 251.883 1379.18 271.524 1374.18C290.541 1369.35 308.32 1361.89 319.721 1350.99L306.593 1337.26ZM203.569 1363V1344C181.618 1344 161.591 1341.53 145.513 1337.49C128.859 1333.31 118.517 1327.98 113.923 1323.76L101.07 1337.75L88.2173 1351.75C99.7199 1362.31 117.338 1369.6 136.265 1374.35C155.768 1379.24 178.942 1382 203.569 1382V1363ZM101.07 1337.75L107.039 1319.71C90.7392 1314.32 78.7168 1307.95 71.1446 1301.66C63.4909 1295.3 62.3118 1290.78 62.3033 1288.64L43.3034 1288.71L24.3036 1288.79C24.3735 1306.42 34.4596 1320.58 46.8606 1330.89C59.3431 1341.26 76.1648 1349.52 95.1008 1355.79L101.07 1337.75ZM43.3034 1288.71L62.3033 1288.64C62.2947 1286.46 63.4929 1281.78 71.5189 1275.18C79.4338 1268.68 91.9835 1262.12 108.919 1256.62L103.047 1238.55L97.1747 1220.48C77.6048 1226.84 60.243 1235.26 47.3926 1245.82C34.6533 1256.29 24.2324 1270.76 24.3036 1288.79L43.3034 1288.71ZM103.047 1238.55L114.973 1253.34C120.405 1248.96 131.194 1243.92 147.388 1240.05C163.148 1236.28 182.476 1234 203.569 1234V1215V1196C179.888 1196 157.563 1198.55 138.559 1203.09C119.989 1207.53 102.904 1214.26 91.1205 1223.76L103.047 1238.55Z"
                  fill="black"
                  mask="url(#path-102-inside-44_17_636)"
                />
                <mask id="path-104-inside-45_17_636" fill="white">
                  <path d="M203.569 1341C247.223 1341 284.944 1350.19 302.759 1363.52C340.161 1375.15 364.223 1393.3 364.303 1413.77C364.382 1433.6 341.928 1451.39 306.593 1463.26C290.852 1478.3 250.663 1489 203.569 1489C156.991 1489 117.167 1478.54 101.07 1463.75C65.834 1452.09 43.3818 1434.48 43.3034 1414.71C43.2237 1394.51 66.5417 1376.41 103.047 1364.55C120.262 1350.67 158.795 1341 203.569 1341Z" />
                </mask>
                <path
                  d="M203.569 1341C247.223 1341 284.944 1350.19 302.759 1363.52C340.161 1375.15 364.223 1393.3 364.303 1413.77C364.382 1433.6 341.928 1451.39 306.593 1463.26C290.852 1478.3 250.663 1489 203.569 1489C156.991 1489 117.167 1478.54 101.07 1463.75C65.834 1452.09 43.3818 1434.48 43.3034 1414.71C43.2237 1394.51 66.5417 1376.41 103.047 1364.55C120.262 1350.67 158.795 1341 203.569 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M203.569 1341L203.569 1322H203.569V1341ZM302.759 1363.52L291.38 1378.73L293.996 1380.69L297.117 1381.66L302.759 1363.52ZM364.303 1413.77L383.303 1413.69L383.303 1413.69L364.303 1413.77ZM306.593 1463.26L300.544 1445.25L296.528 1446.6L293.466 1449.52L306.593 1463.26ZM203.569 1489L203.569 1508H203.569L203.569 1489ZM101.07 1463.75L113.923 1449.76L110.916 1447L107.039 1445.71L101.07 1463.75ZM43.3034 1414.71L24.3036 1414.79L24.3036 1414.79L43.3034 1414.71ZM103.047 1364.55L108.919 1382.62L112.248 1381.54L114.973 1379.34L103.047 1364.55ZM203.569 1341L203.569 1360C224.129 1360 243.02 1362.17 258.567 1365.77C274.477 1369.46 285.471 1374.31 291.38 1378.73L302.759 1363.52L314.139 1348.3C302.232 1339.39 285.458 1332.99 267.14 1328.75C248.459 1324.42 226.662 1322 203.569 1322L203.569 1341ZM302.759 1363.52L297.117 1381.66C314.498 1387.06 327.453 1393.61 335.666 1400.17C344.014 1406.84 345.295 1411.63 345.304 1413.84L364.303 1413.77L383.303 1413.69C383.231 1395.44 372.441 1380.92 359.388 1370.49C346.199 1359.95 328.422 1351.6 308.402 1345.37L302.759 1363.52ZM364.303 1413.77L345.304 1413.84C345.312 1415.98 344.167 1420.52 336.514 1426.95C328.942 1433.3 316.895 1439.75 300.544 1445.25L306.593 1463.26L312.643 1481.27C331.627 1474.89 348.473 1466.52 360.943 1456.05C373.331 1445.66 383.373 1431.38 383.303 1413.69L364.303 1413.77ZM306.593 1463.26L293.466 1449.52C289.126 1453.67 278.94 1459.09 262.154 1463.36C245.991 1467.47 225.766 1470 203.569 1470L203.569 1489L203.569 1508C228.466 1508 251.883 1505.18 271.524 1500.18C290.541 1495.35 308.32 1487.89 319.721 1476.99L306.593 1463.26ZM203.569 1489V1470C181.618 1470 161.591 1467.53 145.513 1463.49C128.859 1459.31 118.517 1453.98 113.923 1449.76L101.07 1463.75L88.2173 1477.75C99.7199 1488.31 117.338 1495.6 136.265 1500.35C155.768 1505.24 178.942 1508 203.569 1508V1489ZM101.07 1463.75L107.039 1445.71C90.7392 1440.32 78.7168 1433.95 71.1446 1427.66C63.4909 1421.3 62.3118 1416.78 62.3033 1414.64L43.3034 1414.71L24.3036 1414.79C24.3735 1432.42 34.4596 1446.58 46.8606 1456.89C59.3431 1467.26 76.1648 1475.52 95.1008 1481.79L101.07 1463.75ZM43.3034 1414.71L62.3033 1414.64C62.2947 1412.46 63.4929 1407.78 71.5189 1401.18C79.4338 1394.68 91.9835 1388.12 108.919 1382.62L103.047 1364.55L97.1747 1346.48C77.6048 1352.84 60.243 1361.26 47.3926 1371.82C34.6533 1382.29 24.2324 1396.76 24.3036 1414.79L43.3034 1414.71ZM103.047 1364.55L114.973 1379.34C120.405 1374.96 131.194 1369.92 147.388 1366.05C163.148 1362.28 182.476 1360 203.569 1360V1341V1322C179.888 1322 157.563 1324.55 138.559 1329.09C119.989 1333.53 102.904 1340.26 91.1205 1349.76L103.047 1364.55Z"
                  fill="black"
                  mask="url(#path-104-inside-45_17_636)"
                />
                <rect
                  x="3218.57"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="3249.89"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-108-inside-46_17_636" fill="white">
                  <path d="M3254.84 257C3298.49 257 3336.21 266.191 3354.03 279.516C3391.43 291.148 3415.49 309.304 3415.57 329.769C3415.65 349.598 3393.2 367.39 3357.86 379.258C3342.12 394.303 3301.93 405 3254.84 405C3208.26 405 3168.44 394.537 3152.34 379.752C3117.1 368.091 3094.65 350.48 3094.57 330.713C3094.49 310.506 3117.81 292.412 3154.32 280.55C3171.53 266.669 3210.07 257 3254.84 257Z" />
                </mask>
                <path
                  d="M3254.84 257C3298.49 257 3336.21 266.191 3354.03 279.516C3391.43 291.148 3415.49 309.304 3415.57 329.769C3415.65 349.598 3393.2 367.39 3357.86 379.258C3342.12 394.303 3301.93 405 3254.84 405C3208.26 405 3168.44 394.537 3152.34 379.752C3117.1 368.091 3094.65 350.48 3094.57 330.713C3094.49 310.506 3117.81 292.412 3154.32 280.55C3171.53 266.669 3210.07 257 3254.84 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M3254.84 257L3254.84 238L3254.84 238L3254.84 257ZM3354.03 279.516L3342.65 294.731L3345.27 296.688L3348.39 297.658L3354.03 279.516ZM3415.57 329.769L3434.57 329.694L3434.57 329.694L3415.57 329.769ZM3357.86 379.258L3351.82 361.247L3347.8 362.595L3344.74 365.523L3357.86 379.258ZM3254.84 405L3254.84 424H3254.84V405ZM3152.34 379.752L3165.19 365.759L3162.19 362.997L3158.31 361.714L3152.34 379.752ZM3094.57 330.713L3075.57 330.788L3075.57 330.788L3094.57 330.713ZM3154.32 280.55L3160.19 298.62L3163.52 297.538L3166.24 295.341L3154.32 280.55ZM3254.84 257V276C3275.4 276 3294.29 278.171 3309.84 281.771C3325.75 285.456 3336.74 290.311 3342.65 294.731L3354.03 279.516L3365.41 264.301C3353.5 255.395 3336.73 248.993 3318.41 244.751C3299.73 240.425 3277.93 238 3254.84 238V257ZM3354.03 279.516L3348.39 297.658C3365.77 303.064 3378.72 309.61 3386.94 316.173C3395.28 322.844 3396.57 327.631 3396.57 329.844L3415.57 329.769L3434.57 329.694C3434.5 311.441 3423.71 296.918 3410.66 286.487C3397.47 275.947 3379.69 267.599 3359.67 261.373L3354.03 279.516ZM3415.57 329.769L3396.57 329.843C3396.58 331.984 3395.44 336.522 3387.78 342.945C3380.21 349.3 3368.17 355.755 3351.82 361.247L3357.86 379.258L3363.91 397.269C3382.9 390.893 3399.74 382.518 3412.21 372.052C3424.6 361.655 3434.64 347.382 3434.57 329.694L3415.57 329.769ZM3357.86 379.258L3344.74 365.523C3340.4 369.67 3330.21 375.086 3313.42 379.357C3297.26 383.47 3277.04 386 3254.84 386V405V424C3279.74 424 3303.15 421.182 3322.79 416.184C3341.81 411.345 3359.59 403.89 3370.99 392.993L3357.86 379.258ZM3254.84 405L3254.84 386C3232.89 386 3212.86 383.526 3196.78 379.492C3180.13 375.313 3169.79 369.978 3165.19 365.759L3152.34 379.752L3139.49 393.745C3150.99 404.31 3168.61 411.6 3187.54 416.349C3207.04 421.243 3230.21 424 3254.84 424L3254.84 405ZM3152.34 379.752L3158.31 361.714C3142.01 356.32 3129.99 349.95 3122.41 343.658C3114.76 337.299 3113.58 332.779 3113.57 330.638L3094.57 330.713L3075.57 330.788C3075.64 348.414 3085.73 362.583 3098.13 372.886C3110.61 383.258 3127.43 391.523 3146.37 397.79L3152.34 379.752ZM3094.57 330.713L3113.57 330.638C3113.57 328.459 3114.76 323.777 3122.79 317.182C3130.7 310.677 3143.25 304.123 3160.19 298.62L3154.32 280.55L3148.45 262.48C3128.88 268.839 3111.51 277.263 3098.66 287.823C3085.92 298.291 3075.5 312.76 3075.57 330.788L3094.57 330.713ZM3154.32 280.55L3166.24 295.341C3171.68 290.96 3182.47 285.918 3198.66 282.049C3214.42 278.285 3233.75 276 3254.84 276L3254.84 257L3254.84 238C3231.16 238 3208.83 240.55 3189.83 245.089C3171.26 249.525 3154.18 256.258 3142.39 265.759L3154.32 280.55Z"
                  fill="black"
                  mask="url(#path-108-inside-46_17_636)"
                />
                <mask id="path-110-inside-47_17_636" fill="white">
                  <path d="M3254.84 963C3298.49 963 3336.21 972.191 3354.03 985.516C3391.43 997.148 3415.49 1015.3 3415.57 1035.77C3415.65 1055.6 3393.2 1073.39 3357.86 1085.26C3342.12 1100.3 3301.93 1111 3254.84 1111C3208.26 1111 3168.44 1100.54 3152.34 1085.75C3117.1 1074.09 3094.65 1056.48 3094.57 1036.71C3094.49 1016.51 3117.81 998.412 3154.32 986.55C3171.53 972.669 3210.07 963 3254.84 963Z" />
                </mask>
                <path
                  d="M3254.84 963C3298.49 963 3336.21 972.191 3354.03 985.516C3391.43 997.148 3415.49 1015.3 3415.57 1035.77C3415.65 1055.6 3393.2 1073.39 3357.86 1085.26C3342.12 1100.3 3301.93 1111 3254.84 1111C3208.26 1111 3168.44 1100.54 3152.34 1085.75C3117.1 1074.09 3094.65 1056.48 3094.57 1036.71C3094.49 1016.51 3117.81 998.412 3154.32 986.55C3171.53 972.669 3210.07 963 3254.84 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M3254.84 963L3254.84 944L3254.84 944L3254.84 963ZM3354.03 985.516L3342.65 1000.73L3345.27 1002.69L3348.39 1003.66L3354.03 985.516ZM3415.57 1035.77L3434.57 1035.69L3434.57 1035.69L3415.57 1035.77ZM3357.86 1085.26L3351.82 1067.25L3347.8 1068.6L3344.74 1071.52L3357.86 1085.26ZM3254.84 1111L3254.84 1130H3254.84V1111ZM3152.34 1085.75L3165.19 1071.76L3162.19 1069L3158.31 1067.71L3152.34 1085.75ZM3094.57 1036.71L3075.57 1036.79L3075.57 1036.79L3094.57 1036.71ZM3154.32 986.55L3160.19 1004.62L3163.52 1003.54L3166.24 1001.34L3154.32 986.55ZM3254.84 963V982C3275.4 982 3294.29 984.171 3309.84 987.771C3325.75 991.456 3336.74 996.311 3342.65 1000.73L3354.03 985.516L3365.41 970.301C3353.5 961.395 3336.73 954.993 3318.41 950.751C3299.73 946.425 3277.93 944 3254.84 944V963ZM3354.03 985.516L3348.39 1003.66C3365.77 1009.06 3378.72 1015.61 3386.94 1022.17C3395.28 1028.84 3396.57 1033.63 3396.57 1035.84L3415.57 1035.77L3434.57 1035.69C3434.5 1017.44 3423.71 1002.92 3410.66 992.487C3397.47 981.947 3379.69 973.599 3359.67 967.373L3354.03 985.516ZM3415.57 1035.77L3396.57 1035.84C3396.58 1037.98 3395.44 1042.52 3387.78 1048.95C3380.21 1055.3 3368.17 1061.75 3351.82 1067.25L3357.86 1085.26L3363.91 1103.27C3382.9 1096.89 3399.74 1088.52 3412.21 1078.05C3424.6 1067.65 3434.64 1053.38 3434.57 1035.69L3415.57 1035.77ZM3357.86 1085.26L3344.74 1071.52C3340.4 1075.67 3330.21 1081.09 3313.42 1085.36C3297.26 1089.47 3277.04 1092 3254.84 1092V1111V1130C3279.74 1130 3303.15 1127.18 3322.79 1122.18C3341.81 1117.35 3359.59 1109.89 3370.99 1098.99L3357.86 1085.26ZM3254.84 1111L3254.84 1092C3232.89 1092 3212.86 1089.53 3196.78 1085.49C3180.13 1081.31 3169.79 1075.98 3165.19 1071.76L3152.34 1085.75L3139.49 1099.74C3150.99 1110.31 3168.61 1117.6 3187.54 1122.35C3207.04 1127.24 3230.21 1130 3254.84 1130L3254.84 1111ZM3152.34 1085.75L3158.31 1067.71C3142.01 1062.32 3129.99 1055.95 3122.41 1049.66C3114.76 1043.3 3113.58 1038.78 3113.57 1036.64L3094.57 1036.71L3075.57 1036.79C3075.64 1054.41 3085.73 1068.58 3098.13 1078.89C3110.61 1089.26 3127.44 1097.52 3146.37 1103.79L3152.34 1085.75ZM3094.57 1036.71L3113.57 1036.64C3113.57 1034.46 3114.76 1029.78 3122.79 1023.18C3130.7 1016.68 3143.25 1010.12 3160.19 1004.62L3154.32 986.55L3148.45 968.48C3128.88 974.839 3111.51 983.263 3098.66 993.823C3085.92 1004.29 3075.5 1018.76 3075.57 1036.79L3094.57 1036.71ZM3154.32 986.55L3166.24 1001.34C3171.68 996.96 3182.47 991.918 3198.66 988.049C3214.42 984.285 3233.75 982 3254.84 982L3254.84 963L3254.84 944C3231.16 944 3208.83 946.55 3189.83 951.089C3171.26 955.525 3154.18 962.258 3142.39 971.759L3154.32 986.55Z"
                  fill="black"
                  mask="url(#path-110-inside-47_17_636)"
                />
                <mask id="path-112-inside-48_17_636" fill="white">
                  <path d="M3254.84 1089C3298.49 1089 3336.21 1098.19 3354.03 1111.52C3391.43 1123.15 3415.49 1141.3 3415.57 1161.77C3415.65 1181.6 3393.2 1199.39 3357.86 1211.26C3342.12 1226.3 3301.93 1237 3254.84 1237C3208.26 1237 3168.44 1226.54 3152.34 1211.75C3117.1 1200.09 3094.65 1182.48 3094.57 1162.71C3094.49 1142.51 3117.81 1124.41 3154.32 1112.55C3171.53 1098.67 3210.07 1089 3254.84 1089Z" />
                </mask>
                <path
                  d="M3254.84 1089C3298.49 1089 3336.21 1098.19 3354.03 1111.52C3391.43 1123.15 3415.49 1141.3 3415.57 1161.77C3415.65 1181.6 3393.2 1199.39 3357.86 1211.26C3342.12 1226.3 3301.93 1237 3254.84 1237C3208.26 1237 3168.44 1226.54 3152.34 1211.75C3117.1 1200.09 3094.65 1182.48 3094.57 1162.71C3094.49 1142.51 3117.81 1124.41 3154.32 1112.55C3171.53 1098.67 3210.07 1089 3254.84 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M3254.84 1089L3254.84 1070H3254.84V1089ZM3354.03 1111.52L3342.65 1126.73L3345.27 1128.69L3348.39 1129.66L3354.03 1111.52ZM3415.57 1161.77L3434.57 1161.69L3434.57 1161.69L3415.57 1161.77ZM3357.86 1211.26L3351.81 1193.25L3347.8 1194.6L3344.74 1197.52L3357.86 1211.26ZM3254.84 1237L3254.84 1256H3254.84L3254.84 1237ZM3152.34 1211.75L3165.19 1197.76L3162.19 1195L3158.31 1193.71L3152.34 1211.75ZM3094.57 1162.71L3075.57 1162.79L3075.57 1162.79L3094.57 1162.71ZM3154.32 1112.55L3160.19 1130.62L3163.52 1129.54L3166.24 1127.34L3154.32 1112.55ZM3254.84 1089L3254.84 1108C3275.4 1108 3294.29 1110.17 3309.84 1113.77C3325.75 1117.46 3336.74 1122.31 3342.65 1126.73L3354.03 1111.52L3365.41 1096.3C3353.5 1087.39 3336.73 1080.99 3318.41 1076.75C3299.73 1072.42 3277.93 1070 3254.84 1070L3254.84 1089ZM3354.03 1111.52L3348.39 1129.66C3365.77 1135.06 3378.72 1141.61 3386.94 1148.17C3395.28 1154.84 3396.57 1159.63 3396.57 1161.84L3415.57 1161.77L3434.57 1161.69C3434.5 1143.44 3423.71 1128.92 3410.66 1118.49C3397.47 1107.95 3379.69 1099.6 3359.67 1093.37L3354.03 1111.52ZM3415.57 1161.77L3396.57 1161.84C3396.58 1163.98 3395.44 1168.52 3387.78 1174.95C3380.21 1181.3 3368.17 1187.75 3351.81 1193.25L3357.86 1211.26L3363.91 1229.27C3382.9 1222.89 3399.74 1214.52 3412.21 1204.05C3424.6 1193.66 3434.64 1179.38 3434.57 1161.69L3415.57 1161.77ZM3357.86 1211.26L3344.74 1197.52C3340.4 1201.67 3330.21 1207.09 3313.42 1211.36C3297.26 1215.47 3277.04 1218 3254.84 1218L3254.84 1237L3254.84 1256C3279.74 1256 3303.15 1253.18 3322.79 1248.18C3341.81 1243.35 3359.59 1235.89 3370.99 1224.99L3357.86 1211.26ZM3254.84 1237V1218C3232.89 1218 3212.86 1215.53 3196.78 1211.49C3180.13 1207.31 3169.79 1201.98 3165.19 1197.76L3152.34 1211.75L3139.49 1225.75C3150.99 1236.31 3168.61 1243.6 3187.54 1248.35C3207.04 1253.24 3230.21 1256 3254.84 1256V1237ZM3152.34 1211.75L3158.31 1193.71C3142.01 1188.32 3129.99 1181.95 3122.41 1175.66C3114.76 1169.3 3113.58 1164.78 3113.57 1162.64L3094.57 1162.71L3075.57 1162.79C3075.64 1180.42 3085.73 1194.58 3098.13 1204.89C3110.61 1215.26 3127.44 1223.52 3146.37 1229.79L3152.34 1211.75ZM3094.57 1162.71L3113.57 1162.64C3113.57 1160.46 3114.76 1155.78 3122.79 1149.18C3130.7 1142.68 3143.25 1136.12 3160.19 1130.62L3154.32 1112.55L3148.45 1094.48C3128.88 1100.84 3111.51 1109.26 3098.66 1119.82C3085.92 1130.29 3075.5 1144.76 3075.57 1162.79L3094.57 1162.71ZM3154.32 1112.55L3166.24 1127.34C3171.68 1122.96 3182.46 1117.92 3198.66 1114.05C3214.42 1110.28 3233.75 1108 3254.84 1108V1089V1070C3231.16 1070 3208.83 1072.55 3189.83 1077.09C3171.26 1081.53 3154.17 1088.26 3142.39 1097.76L3154.32 1112.55Z"
                  fill="black"
                  mask="url(#path-112-inside-48_17_636)"
                />
                <mask id="path-114-inside-49_17_636" fill="white">
                  <path d="M3254.84 1215C3298.49 1215 3336.21 1224.19 3354.03 1237.52C3391.43 1249.15 3415.49 1267.3 3415.57 1287.77C3415.65 1307.6 3393.2 1325.39 3357.86 1337.26C3342.12 1352.3 3301.93 1363 3254.84 1363C3208.26 1363 3168.44 1352.54 3152.34 1337.75C3117.1 1326.09 3094.65 1308.48 3094.57 1288.71C3094.49 1268.51 3117.81 1250.41 3154.32 1238.55C3171.53 1224.67 3210.07 1215 3254.84 1215Z" />
                </mask>
                <path
                  d="M3254.84 1215C3298.49 1215 3336.21 1224.19 3354.03 1237.52C3391.43 1249.15 3415.49 1267.3 3415.57 1287.77C3415.65 1307.6 3393.2 1325.39 3357.86 1337.26C3342.12 1352.3 3301.93 1363 3254.84 1363C3208.26 1363 3168.44 1352.54 3152.34 1337.75C3117.1 1326.09 3094.65 1308.48 3094.57 1288.71C3094.49 1268.51 3117.81 1250.41 3154.32 1238.55C3171.53 1224.67 3210.07 1215 3254.84 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M3254.84 1215L3254.84 1196H3254.84V1215ZM3354.03 1237.52L3342.65 1252.73L3345.27 1254.69L3348.39 1255.66L3354.03 1237.52ZM3415.57 1287.77L3434.57 1287.69L3434.57 1287.69L3415.57 1287.77ZM3357.86 1337.26L3351.81 1319.25L3347.8 1320.6L3344.74 1323.52L3357.86 1337.26ZM3254.84 1363L3254.84 1382H3254.84L3254.84 1363ZM3152.34 1337.75L3165.19 1323.76L3162.19 1321L3158.31 1319.71L3152.34 1337.75ZM3094.57 1288.71L3075.57 1288.79L3075.57 1288.79L3094.57 1288.71ZM3154.32 1238.55L3160.19 1256.62L3163.52 1255.54L3166.24 1253.34L3154.32 1238.55ZM3254.84 1215L3254.84 1234C3275.4 1234 3294.29 1236.17 3309.84 1239.77C3325.75 1243.46 3336.74 1248.31 3342.65 1252.73L3354.03 1237.52L3365.41 1222.3C3353.5 1213.39 3336.73 1206.99 3318.41 1202.75C3299.73 1198.42 3277.93 1196 3254.84 1196L3254.84 1215ZM3354.03 1237.52L3348.39 1255.66C3365.77 1261.06 3378.72 1267.61 3386.94 1274.17C3395.28 1280.84 3396.57 1285.63 3396.57 1287.84L3415.57 1287.77L3434.57 1287.69C3434.5 1269.44 3423.71 1254.92 3410.66 1244.49C3397.47 1233.95 3379.69 1225.6 3359.67 1219.37L3354.03 1237.52ZM3415.57 1287.77L3396.57 1287.84C3396.58 1289.98 3395.44 1294.52 3387.78 1300.95C3380.21 1307.3 3368.17 1313.75 3351.81 1319.25L3357.86 1337.26L3363.91 1355.27C3382.9 1348.89 3399.74 1340.52 3412.21 1330.05C3424.6 1319.66 3434.64 1305.38 3434.57 1287.69L3415.57 1287.77ZM3357.86 1337.26L3344.74 1323.52C3340.4 1327.67 3330.21 1333.09 3313.42 1337.36C3297.26 1341.47 3277.04 1344 3254.84 1344L3254.84 1363L3254.84 1382C3279.74 1382 3303.15 1379.18 3322.79 1374.18C3341.81 1369.35 3359.59 1361.89 3370.99 1350.99L3357.86 1337.26ZM3254.84 1363V1344C3232.89 1344 3212.86 1341.53 3196.78 1337.49C3180.13 1333.31 3169.79 1327.98 3165.19 1323.76L3152.34 1337.75L3139.49 1351.75C3150.99 1362.31 3168.61 1369.6 3187.54 1374.35C3207.04 1379.24 3230.21 1382 3254.84 1382V1363ZM3152.34 1337.75L3158.31 1319.71C3142.01 1314.32 3129.99 1307.95 3122.41 1301.66C3114.76 1295.3 3113.58 1290.78 3113.57 1288.64L3094.57 1288.71L3075.57 1288.79C3075.64 1306.42 3085.73 1320.58 3098.13 1330.89C3110.61 1341.26 3127.44 1349.52 3146.37 1355.79L3152.34 1337.75ZM3094.57 1288.71L3113.57 1288.64C3113.57 1286.46 3114.76 1281.78 3122.79 1275.18C3130.7 1268.68 3143.25 1262.12 3160.19 1256.62L3154.32 1238.55L3148.45 1220.48C3128.88 1226.84 3111.51 1235.26 3098.66 1245.82C3085.92 1256.29 3075.5 1270.76 3075.57 1288.79L3094.57 1288.71ZM3154.32 1238.55L3166.24 1253.34C3171.68 1248.96 3182.46 1243.92 3198.66 1240.05C3214.42 1236.28 3233.75 1234 3254.84 1234V1215V1196C3231.16 1196 3208.83 1198.55 3189.83 1203.09C3171.26 1207.53 3154.17 1214.26 3142.39 1223.76L3154.32 1238.55Z"
                  fill="black"
                  mask="url(#path-114-inside-49_17_636)"
                />
                <mask id="path-116-inside-50_17_636" fill="white">
                  <path d="M3254.84 1341C3298.49 1341 3336.21 1350.19 3354.03 1363.52C3391.43 1375.15 3415.49 1393.3 3415.57 1413.77C3415.65 1433.6 3393.2 1451.39 3357.86 1463.26C3342.12 1478.3 3301.93 1489 3254.84 1489C3208.26 1489 3168.44 1478.54 3152.34 1463.75C3117.1 1452.09 3094.65 1434.48 3094.57 1414.71C3094.49 1394.51 3117.81 1376.41 3154.32 1364.55C3171.53 1350.67 3210.07 1341 3254.84 1341Z" />
                </mask>
                <path
                  d="M3254.84 1341C3298.49 1341 3336.21 1350.19 3354.03 1363.52C3391.43 1375.15 3415.49 1393.3 3415.57 1413.77C3415.65 1433.6 3393.2 1451.39 3357.86 1463.26C3342.12 1478.3 3301.93 1489 3254.84 1489C3208.26 1489 3168.44 1478.54 3152.34 1463.75C3117.1 1452.09 3094.65 1434.48 3094.57 1414.71C3094.49 1394.51 3117.81 1376.41 3154.32 1364.55C3171.53 1350.67 3210.07 1341 3254.84 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M3254.84 1341L3254.84 1322H3254.84V1341ZM3354.03 1363.52L3342.65 1378.73L3345.27 1380.69L3348.39 1381.66L3354.03 1363.52ZM3415.57 1413.77L3434.57 1413.69L3434.57 1413.69L3415.57 1413.77ZM3357.86 1463.26L3351.81 1445.25L3347.8 1446.6L3344.74 1449.52L3357.86 1463.26ZM3254.84 1489L3254.84 1508H3254.84L3254.84 1489ZM3152.34 1463.75L3165.19 1449.76L3162.19 1447L3158.31 1445.71L3152.34 1463.75ZM3094.57 1414.71L3075.57 1414.79L3075.57 1414.79L3094.57 1414.71ZM3154.32 1364.55L3160.19 1382.62L3163.52 1381.54L3166.24 1379.34L3154.32 1364.55ZM3254.84 1341L3254.84 1360C3275.4 1360 3294.29 1362.17 3309.84 1365.77C3325.75 1369.46 3336.74 1374.31 3342.65 1378.73L3354.03 1363.52L3365.41 1348.3C3353.5 1339.39 3336.73 1332.99 3318.41 1328.75C3299.73 1324.42 3277.93 1322 3254.84 1322L3254.84 1341ZM3354.03 1363.52L3348.39 1381.66C3365.77 1387.06 3378.72 1393.61 3386.94 1400.17C3395.28 1406.84 3396.57 1411.63 3396.57 1413.84L3415.57 1413.77L3434.57 1413.69C3434.5 1395.44 3423.71 1380.92 3410.66 1370.49C3397.47 1359.95 3379.69 1351.6 3359.67 1345.37L3354.03 1363.52ZM3415.57 1413.77L3396.57 1413.84C3396.58 1415.98 3395.44 1420.52 3387.78 1426.95C3380.21 1433.3 3368.17 1439.75 3351.81 1445.25L3357.86 1463.26L3363.91 1481.27C3382.9 1474.89 3399.74 1466.52 3412.21 1456.05C3424.6 1445.66 3434.64 1431.38 3434.57 1413.69L3415.57 1413.77ZM3357.86 1463.26L3344.74 1449.52C3340.4 1453.67 3330.21 1459.09 3313.42 1463.36C3297.26 1467.47 3277.04 1470 3254.84 1470L3254.84 1489L3254.84 1508C3279.74 1508 3303.15 1505.18 3322.79 1500.18C3341.81 1495.35 3359.59 1487.89 3370.99 1476.99L3357.86 1463.26ZM3254.84 1489V1470C3232.89 1470 3212.86 1467.53 3196.78 1463.49C3180.13 1459.31 3169.79 1453.98 3165.19 1449.76L3152.34 1463.75L3139.49 1477.75C3150.99 1488.31 3168.61 1495.6 3187.54 1500.35C3207.04 1505.24 3230.21 1508 3254.84 1508V1489ZM3152.34 1463.75L3158.31 1445.71C3142.01 1440.32 3129.99 1433.95 3122.41 1427.66C3114.76 1421.3 3113.58 1416.78 3113.57 1414.64L3094.57 1414.71L3075.57 1414.79C3075.64 1432.42 3085.73 1446.58 3098.13 1456.89C3110.61 1467.26 3127.44 1475.52 3146.37 1481.79L3152.34 1463.75ZM3094.57 1414.71L3113.57 1414.64C3113.57 1412.46 3114.76 1407.78 3122.79 1401.18C3130.7 1394.68 3143.25 1388.12 3160.19 1382.62L3154.32 1364.55L3148.45 1346.48C3128.88 1352.84 3111.51 1361.26 3098.66 1371.82C3085.92 1382.29 3075.5 1396.76 3075.57 1414.79L3094.57 1414.71ZM3154.32 1364.55L3166.24 1379.34C3171.68 1374.96 3182.46 1369.92 3198.66 1366.05C3214.42 1362.28 3233.75 1360 3254.84 1360V1341V1322C3231.16 1322 3208.83 1324.55 3189.83 1329.09C3171.26 1333.53 3154.17 1340.26 3142.39 1349.76L3154.32 1364.55Z"
                  fill="black"
                  mask="url(#path-116-inside-50_17_636)"
                />
                <rect
                  x="3557.6"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-119-inside-51_17_636" fill="white">
                  <path d="M3593.87 257C3637.52 257 3675.24 266.191 3693.06 279.516C3730.46 291.148 3754.52 309.304 3754.6 329.769C3754.68 349.598 3732.23 367.39 3696.89 379.258C3681.15 394.303 3640.96 405 3593.87 405C3547.29 405 3507.47 394.537 3491.37 379.752C3456.13 368.091 3433.68 350.48 3433.6 330.713C3433.52 310.506 3456.84 292.412 3493.35 280.55C3510.56 266.669 3549.1 257 3593.87 257Z" />
                </mask>
                <path
                  d="M3593.87 257C3637.52 257 3675.24 266.191 3693.06 279.516C3730.46 291.148 3754.52 309.304 3754.6 329.769C3754.68 349.598 3732.23 367.39 3696.89 379.258C3681.15 394.303 3640.96 405 3593.87 405C3547.29 405 3507.47 394.537 3491.37 379.752C3456.13 368.091 3433.68 350.48 3433.6 330.713C3433.52 310.506 3456.84 292.412 3493.35 280.55C3510.56 266.669 3549.1 257 3593.87 257Z"
                  fill="#6B4747"
                />
                <path
                  d="M3593.87 257L3593.87 238L3593.87 238L3593.87 257ZM3693.06 279.516L3681.68 294.731L3684.3 296.688L3687.42 297.658L3693.06 279.516ZM3754.6 329.769L3773.6 329.694L3773.6 329.694L3754.6 329.769ZM3696.89 379.258L3690.85 361.247L3686.83 362.595L3683.77 365.523L3696.89 379.258ZM3593.87 405L3593.87 424H3593.87V405ZM3491.37 379.752L3504.22 365.759L3501.22 362.997L3497.34 361.714L3491.37 379.752ZM3433.6 330.713L3414.6 330.788L3414.6 330.788L3433.6 330.713ZM3493.35 280.55L3499.22 298.62L3502.55 297.538L3505.27 295.341L3493.35 280.55ZM3593.87 257V276C3614.43 276 3633.32 278.171 3648.87 281.771C3664.78 285.456 3675.77 290.311 3681.68 294.731L3693.06 279.516L3704.44 264.301C3692.53 255.395 3675.76 248.993 3657.44 244.751C3638.76 240.425 3616.96 238 3593.87 238V257ZM3693.06 279.516L3687.42 297.658C3704.8 303.064 3717.75 309.61 3725.97 316.173C3734.31 322.844 3735.6 327.631 3735.6 329.844L3754.6 329.769L3773.6 329.694C3773.53 311.441 3762.74 296.918 3749.69 286.487C3736.5 275.947 3718.72 267.599 3698.7 261.373L3693.06 279.516ZM3754.6 329.769L3735.6 329.843C3735.61 331.984 3734.47 336.522 3726.81 342.945C3719.24 349.3 3707.2 355.755 3690.85 361.247L3696.89 379.258L3702.94 397.269C3721.93 390.893 3738.77 382.518 3751.24 372.052C3763.63 361.655 3773.67 347.382 3773.6 329.694L3754.6 329.769ZM3696.89 379.258L3683.77 365.523C3679.43 369.67 3669.24 375.086 3652.45 379.357C3636.29 383.47 3616.07 386 3593.87 386V405V424C3618.77 424 3642.18 421.182 3661.82 416.184C3680.84 411.345 3698.62 403.89 3710.02 392.993L3696.89 379.258ZM3593.87 405L3593.87 386C3571.92 386 3551.89 383.526 3535.81 379.492C3519.16 375.313 3508.82 369.978 3504.22 365.759L3491.37 379.752L3478.52 393.745C3490.02 404.31 3507.64 411.6 3526.56 416.349C3546.07 421.243 3569.24 424 3593.87 424L3593.87 405ZM3491.37 379.752L3497.34 361.714C3481.04 356.32 3469.02 349.95 3461.44 343.658C3453.79 337.299 3452.61 332.779 3452.6 330.638L3433.6 330.713L3414.6 330.788C3414.67 348.414 3424.76 362.583 3437.16 372.886C3449.64 383.258 3466.46 391.523 3485.4 397.79L3491.37 379.752ZM3433.6 330.713L3452.6 330.638C3452.59 328.459 3453.79 323.777 3461.82 317.182C3469.73 310.677 3482.28 304.123 3499.22 298.62L3493.35 280.55L3487.48 262.48C3467.91 268.839 3450.54 277.263 3437.69 287.823C3424.95 298.291 3414.53 312.76 3414.6 330.788L3433.6 330.713ZM3493.35 280.55L3505.27 295.341C3510.71 290.96 3521.49 285.918 3537.69 282.049C3553.45 278.285 3572.78 276 3593.87 276L3593.87 257L3593.87 238C3570.19 238 3547.86 240.55 3528.86 245.089C3510.29 249.525 3493.2 256.258 3481.42 265.759L3493.35 280.55Z"
                  fill="black"
                  mask="url(#path-119-inside-51_17_636)"
                />
                <mask id="path-121-inside-52_17_636" fill="white">
                  <path d="M3593.87 963C3637.52 963 3675.24 972.191 3693.06 985.516C3730.46 997.148 3754.52 1015.3 3754.6 1035.77C3754.68 1055.6 3732.23 1073.39 3696.89 1085.26C3681.15 1100.3 3640.96 1111 3593.87 1111C3547.29 1111 3507.47 1100.54 3491.37 1085.75C3456.13 1074.09 3433.68 1056.48 3433.6 1036.71C3433.52 1016.51 3456.84 998.412 3493.35 986.55C3510.56 972.669 3549.1 963 3593.87 963Z" />
                </mask>
                <path
                  d="M3593.87 963C3637.52 963 3675.24 972.191 3693.06 985.516C3730.46 997.148 3754.52 1015.3 3754.6 1035.77C3754.68 1055.6 3732.23 1073.39 3696.89 1085.26C3681.15 1100.3 3640.96 1111 3593.87 1111C3547.29 1111 3507.47 1100.54 3491.37 1085.75C3456.13 1074.09 3433.68 1056.48 3433.6 1036.71C3433.52 1016.51 3456.84 998.412 3493.35 986.55C3510.56 972.669 3549.1 963 3593.87 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M3593.87 963L3593.87 944L3593.87 944L3593.87 963ZM3693.06 985.516L3681.68 1000.73L3684.3 1002.69L3687.42 1003.66L3693.06 985.516ZM3754.6 1035.77L3773.6 1035.69L3773.6 1035.69L3754.6 1035.77ZM3696.89 1085.26L3690.85 1067.25L3686.83 1068.6L3683.77 1071.52L3696.89 1085.26ZM3593.87 1111L3593.87 1130H3593.87V1111ZM3491.37 1085.75L3504.22 1071.76L3501.22 1069L3497.34 1067.71L3491.37 1085.75ZM3433.6 1036.71L3414.6 1036.79L3414.6 1036.79L3433.6 1036.71ZM3493.35 986.55L3499.22 1004.62L3502.55 1003.54L3505.27 1001.34L3493.35 986.55ZM3593.87 963V982C3614.43 982 3633.32 984.171 3648.87 987.771C3664.78 991.456 3675.77 996.311 3681.68 1000.73L3693.06 985.516L3704.44 970.301C3692.53 961.395 3675.76 954.993 3657.44 950.751C3638.76 946.425 3616.96 944 3593.87 944V963ZM3693.06 985.516L3687.42 1003.66C3704.8 1009.06 3717.75 1015.61 3725.97 1022.17C3734.31 1028.84 3735.6 1033.63 3735.6 1035.84L3754.6 1035.77L3773.6 1035.69C3773.53 1017.44 3762.74 1002.92 3749.69 992.487C3736.5 981.947 3718.72 973.599 3698.7 967.373L3693.06 985.516ZM3754.6 1035.77L3735.6 1035.84C3735.61 1037.98 3734.47 1042.52 3726.81 1048.95C3719.24 1055.3 3707.2 1061.75 3690.85 1067.25L3696.89 1085.26L3702.94 1103.27C3721.93 1096.89 3738.77 1088.52 3751.24 1078.05C3763.63 1067.65 3773.67 1053.38 3773.6 1035.69L3754.6 1035.77ZM3696.89 1085.26L3683.77 1071.52C3679.43 1075.67 3669.24 1081.09 3652.45 1085.36C3636.29 1089.47 3616.07 1092 3593.87 1092V1111V1130C3618.77 1130 3642.18 1127.18 3661.82 1122.18C3680.84 1117.35 3698.62 1109.89 3710.02 1098.99L3696.89 1085.26ZM3593.87 1111L3593.87 1092C3571.92 1092 3551.89 1089.53 3535.81 1085.49C3519.16 1081.31 3508.82 1075.98 3504.22 1071.76L3491.37 1085.75L3478.52 1099.74C3490.02 1110.31 3507.64 1117.6 3526.56 1122.35C3546.07 1127.24 3569.24 1130 3593.87 1130L3593.87 1111ZM3491.37 1085.75L3497.34 1067.71C3481.04 1062.32 3469.02 1055.95 3461.44 1049.66C3453.79 1043.3 3452.61 1038.78 3452.6 1036.64L3433.6 1036.71L3414.6 1036.79C3414.67 1054.41 3424.76 1068.58 3437.16 1078.89C3449.64 1089.26 3466.46 1097.52 3485.4 1103.79L3491.37 1085.75ZM3433.6 1036.71L3452.6 1036.64C3452.59 1034.46 3453.79 1029.78 3461.82 1023.18C3469.73 1016.68 3482.28 1010.12 3499.22 1004.62L3493.35 986.55L3487.48 968.48C3467.91 974.839 3450.54 983.263 3437.69 993.823C3424.95 1004.29 3414.53 1018.76 3414.6 1036.79L3433.6 1036.71ZM3493.35 986.55L3505.27 1001.34C3510.71 996.96 3521.49 991.918 3537.69 988.049C3553.45 984.285 3572.78 982 3593.87 982L3593.87 963L3593.87 944C3570.19 944 3547.86 946.55 3528.86 951.089C3510.29 955.525 3493.2 962.258 3481.42 971.759L3493.35 986.55Z"
                  fill="black"
                  mask="url(#path-121-inside-52_17_636)"
                />
                <mask id="path-123-inside-53_17_636" fill="white">
                  <path d="M3593.87 1089C3637.52 1089 3675.24 1098.19 3693.06 1111.52C3730.46 1123.15 3754.52 1141.3 3754.6 1161.77C3754.68 1181.6 3732.23 1199.39 3696.89 1211.26C3681.15 1226.3 3640.96 1237 3593.87 1237C3547.29 1237 3507.47 1226.54 3491.37 1211.75C3456.13 1200.09 3433.68 1182.48 3433.6 1162.71C3433.52 1142.51 3456.84 1124.41 3493.35 1112.55C3510.56 1098.67 3549.1 1089 3593.87 1089Z" />
                </mask>
                <path
                  d="M3593.87 1089C3637.52 1089 3675.24 1098.19 3693.06 1111.52C3730.46 1123.15 3754.52 1141.3 3754.6 1161.77C3754.68 1181.6 3732.23 1199.39 3696.89 1211.26C3681.15 1226.3 3640.96 1237 3593.87 1237C3547.29 1237 3507.47 1226.54 3491.37 1211.75C3456.13 1200.09 3433.68 1182.48 3433.6 1162.71C3433.52 1142.51 3456.84 1124.41 3493.35 1112.55C3510.56 1098.67 3549.1 1089 3593.87 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M3593.87 1089L3593.87 1070H3593.87V1089ZM3693.06 1111.52L3681.68 1126.73L3684.3 1128.69L3687.42 1129.66L3693.06 1111.52ZM3754.6 1161.77L3773.6 1161.69L3773.6 1161.69L3754.6 1161.77ZM3696.89 1211.26L3690.84 1193.25L3686.83 1194.6L3683.77 1197.52L3696.89 1211.26ZM3593.87 1237L3593.87 1256H3593.87L3593.87 1237ZM3491.37 1211.75L3504.22 1197.76L3501.22 1195L3497.34 1193.71L3491.37 1211.75ZM3433.6 1162.71L3414.6 1162.79L3414.6 1162.79L3433.6 1162.71ZM3493.35 1112.55L3499.22 1130.62L3502.55 1129.54L3505.27 1127.34L3493.35 1112.55ZM3593.87 1089L3593.87 1108C3614.43 1108 3633.32 1110.17 3648.87 1113.77C3664.78 1117.46 3675.77 1122.31 3681.68 1126.73L3693.06 1111.52L3704.44 1096.3C3692.53 1087.39 3675.76 1080.99 3657.44 1076.75C3638.76 1072.42 3616.96 1070 3593.87 1070L3593.87 1089ZM3693.06 1111.52L3687.42 1129.66C3704.8 1135.06 3717.75 1141.61 3725.97 1148.17C3734.31 1154.84 3735.6 1159.63 3735.6 1161.84L3754.6 1161.77L3773.6 1161.69C3773.53 1143.44 3762.74 1128.92 3749.69 1118.49C3736.5 1107.95 3718.72 1099.6 3698.7 1093.37L3693.06 1111.52ZM3754.6 1161.77L3735.6 1161.84C3735.61 1163.98 3734.47 1168.52 3726.81 1174.95C3719.24 1181.3 3707.2 1187.75 3690.84 1193.25L3696.89 1211.26L3702.94 1229.27C3721.93 1222.89 3738.77 1214.52 3751.24 1204.05C3763.63 1193.66 3773.67 1179.38 3773.6 1161.69L3754.6 1161.77ZM3696.89 1211.26L3683.77 1197.52C3679.43 1201.67 3669.24 1207.09 3652.45 1211.36C3636.29 1215.47 3616.07 1218 3593.87 1218L3593.87 1237L3593.87 1256C3618.77 1256 3642.18 1253.18 3661.82 1248.18C3680.84 1243.35 3698.62 1235.89 3710.02 1224.99L3696.89 1211.26ZM3593.87 1237V1218C3571.92 1218 3551.89 1215.53 3535.81 1211.49C3519.16 1207.31 3508.82 1201.98 3504.22 1197.76L3491.37 1211.75L3478.52 1225.75C3490.02 1236.31 3507.64 1243.6 3526.57 1248.35C3546.07 1253.24 3569.24 1256 3593.87 1256V1237ZM3491.37 1211.75L3497.34 1193.71C3481.04 1188.32 3469.02 1181.95 3461.44 1175.66C3453.79 1169.3 3452.61 1164.78 3452.6 1162.64L3433.6 1162.71L3414.6 1162.79C3414.67 1180.42 3424.76 1194.58 3437.16 1204.89C3449.64 1215.26 3466.46 1223.52 3485.4 1229.79L3491.37 1211.75ZM3433.6 1162.71L3452.6 1162.64C3452.59 1160.46 3453.79 1155.78 3461.82 1149.18C3469.73 1142.68 3482.28 1136.12 3499.22 1130.62L3493.35 1112.55L3487.47 1094.48C3467.9 1100.84 3450.54 1109.26 3437.69 1119.82C3424.95 1130.29 3414.53 1144.76 3414.6 1162.79L3433.6 1162.71ZM3493.35 1112.55L3505.27 1127.34C3510.71 1122.96 3521.49 1117.92 3537.69 1114.05C3553.45 1110.28 3572.78 1108 3593.87 1108V1089V1070C3570.19 1070 3547.86 1072.55 3528.86 1077.09C3510.29 1081.53 3493.2 1088.26 3481.42 1097.76L3493.35 1112.55Z"
                  fill="black"
                  mask="url(#path-123-inside-53_17_636)"
                />
                <mask id="path-125-inside-54_17_636" fill="white">
                  <path d="M3593.87 1215C3637.52 1215 3675.24 1224.19 3693.06 1237.52C3730.46 1249.15 3754.52 1267.3 3754.6 1287.77C3754.68 1307.6 3732.23 1325.39 3696.89 1337.26C3681.15 1352.3 3640.96 1363 3593.87 1363C3547.29 1363 3507.47 1352.54 3491.37 1337.75C3456.13 1326.09 3433.68 1308.48 3433.6 1288.71C3433.52 1268.51 3456.84 1250.41 3493.35 1238.55C3510.56 1224.67 3549.1 1215 3593.87 1215Z" />
                </mask>
                <path
                  d="M3593.87 1215C3637.52 1215 3675.24 1224.19 3693.06 1237.52C3730.46 1249.15 3754.52 1267.3 3754.6 1287.77C3754.68 1307.6 3732.23 1325.39 3696.89 1337.26C3681.15 1352.3 3640.96 1363 3593.87 1363C3547.29 1363 3507.47 1352.54 3491.37 1337.75C3456.13 1326.09 3433.68 1308.48 3433.6 1288.71C3433.52 1268.51 3456.84 1250.41 3493.35 1238.55C3510.56 1224.67 3549.1 1215 3593.87 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M3593.87 1215L3593.87 1196H3593.87V1215ZM3693.06 1237.52L3681.68 1252.73L3684.3 1254.69L3687.42 1255.66L3693.06 1237.52ZM3754.6 1287.77L3773.6 1287.69L3773.6 1287.69L3754.6 1287.77ZM3696.89 1337.26L3690.84 1319.25L3686.83 1320.6L3683.77 1323.52L3696.89 1337.26ZM3593.87 1363L3593.87 1382H3593.87L3593.87 1363ZM3491.37 1337.75L3504.22 1323.76L3501.22 1321L3497.34 1319.71L3491.37 1337.75ZM3433.6 1288.71L3414.6 1288.79L3414.6 1288.79L3433.6 1288.71ZM3493.35 1238.55L3499.22 1256.62L3502.55 1255.54L3505.27 1253.34L3493.35 1238.55ZM3593.87 1215L3593.87 1234C3614.43 1234 3633.32 1236.17 3648.87 1239.77C3664.78 1243.46 3675.77 1248.31 3681.68 1252.73L3693.06 1237.52L3704.44 1222.3C3692.53 1213.39 3675.76 1206.99 3657.44 1202.75C3638.76 1198.42 3616.96 1196 3593.87 1196L3593.87 1215ZM3693.06 1237.52L3687.42 1255.66C3704.8 1261.06 3717.75 1267.61 3725.97 1274.17C3734.31 1280.84 3735.6 1285.63 3735.6 1287.84L3754.6 1287.77L3773.6 1287.69C3773.53 1269.44 3762.74 1254.92 3749.69 1244.49C3736.5 1233.95 3718.72 1225.6 3698.7 1219.37L3693.06 1237.52ZM3754.6 1287.77L3735.6 1287.84C3735.61 1289.98 3734.47 1294.52 3726.81 1300.95C3719.24 1307.3 3707.2 1313.75 3690.84 1319.25L3696.89 1337.26L3702.94 1355.27C3721.93 1348.89 3738.77 1340.52 3751.24 1330.05C3763.63 1319.66 3773.67 1305.38 3773.6 1287.69L3754.6 1287.77ZM3696.89 1337.26L3683.77 1323.52C3679.43 1327.67 3669.24 1333.09 3652.45 1337.36C3636.29 1341.47 3616.07 1344 3593.87 1344L3593.87 1363L3593.87 1382C3618.77 1382 3642.18 1379.18 3661.82 1374.18C3680.84 1369.35 3698.62 1361.89 3710.02 1350.99L3696.89 1337.26ZM3593.87 1363V1344C3571.92 1344 3551.89 1341.53 3535.81 1337.49C3519.16 1333.31 3508.82 1327.98 3504.22 1323.76L3491.37 1337.75L3478.52 1351.75C3490.02 1362.31 3507.64 1369.6 3526.57 1374.35C3546.07 1379.24 3569.24 1382 3593.87 1382V1363ZM3491.37 1337.75L3497.34 1319.71C3481.04 1314.32 3469.02 1307.95 3461.44 1301.66C3453.79 1295.3 3452.61 1290.78 3452.6 1288.64L3433.6 1288.71L3414.6 1288.79C3414.67 1306.42 3424.76 1320.58 3437.16 1330.89C3449.64 1341.26 3466.46 1349.52 3485.4 1355.79L3491.37 1337.75ZM3433.6 1288.71L3452.6 1288.64C3452.59 1286.46 3453.79 1281.78 3461.82 1275.18C3469.73 1268.68 3482.28 1262.12 3499.22 1256.62L3493.35 1238.55L3487.47 1220.48C3467.9 1226.84 3450.54 1235.26 3437.69 1245.82C3424.95 1256.29 3414.53 1270.76 3414.6 1288.79L3433.6 1288.71ZM3493.35 1238.55L3505.27 1253.34C3510.71 1248.96 3521.49 1243.92 3537.69 1240.05C3553.45 1236.28 3572.78 1234 3593.87 1234V1215V1196C3570.19 1196 3547.86 1198.55 3528.86 1203.09C3510.29 1207.53 3493.2 1214.26 3481.42 1223.76L3493.35 1238.55Z"
                  fill="black"
                  mask="url(#path-125-inside-54_17_636)"
                />
                <mask id="path-127-inside-55_17_636" fill="white">
                  <path d="M3593.87 1341C3637.52 1341 3675.24 1350.19 3693.06 1363.52C3730.46 1375.15 3754.52 1393.3 3754.6 1413.77C3754.68 1433.6 3732.23 1451.39 3696.89 1463.26C3681.15 1478.3 3640.96 1489 3593.87 1489C3547.29 1489 3507.47 1478.54 3491.37 1463.75C3456.13 1452.09 3433.68 1434.48 3433.6 1414.71C3433.52 1394.51 3456.84 1376.41 3493.35 1364.55C3510.56 1350.67 3549.1 1341 3593.87 1341Z" />
                </mask>
                <path
                  d="M3593.87 1341C3637.52 1341 3675.24 1350.19 3693.06 1363.52C3730.46 1375.15 3754.52 1393.3 3754.6 1413.77C3754.68 1433.6 3732.23 1451.39 3696.89 1463.26C3681.15 1478.3 3640.96 1489 3593.87 1489C3547.29 1489 3507.47 1478.54 3491.37 1463.75C3456.13 1452.09 3433.68 1434.48 3433.6 1414.71C3433.52 1394.51 3456.84 1376.41 3493.35 1364.55C3510.56 1350.67 3549.1 1341 3593.87 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M3593.87 1341L3593.87 1322H3593.87V1341ZM3693.06 1363.52L3681.68 1378.73L3684.3 1380.69L3687.42 1381.66L3693.06 1363.52ZM3754.6 1413.77L3773.6 1413.69L3773.6 1413.69L3754.6 1413.77ZM3696.89 1463.26L3690.84 1445.25L3686.83 1446.6L3683.77 1449.52L3696.89 1463.26ZM3593.87 1489L3593.87 1508H3593.87L3593.87 1489ZM3491.37 1463.75L3504.22 1449.76L3501.22 1447L3497.34 1445.71L3491.37 1463.75ZM3433.6 1414.71L3414.6 1414.79L3414.6 1414.79L3433.6 1414.71ZM3493.35 1364.55L3499.22 1382.62L3502.55 1381.54L3505.27 1379.34L3493.35 1364.55ZM3593.87 1341L3593.87 1360C3614.43 1360 3633.32 1362.17 3648.87 1365.77C3664.78 1369.46 3675.77 1374.31 3681.68 1378.73L3693.06 1363.52L3704.44 1348.3C3692.53 1339.39 3675.76 1332.99 3657.44 1328.75C3638.76 1324.42 3616.96 1322 3593.87 1322L3593.87 1341ZM3693.06 1363.52L3687.42 1381.66C3704.8 1387.06 3717.75 1393.61 3725.97 1400.17C3734.31 1406.84 3735.6 1411.63 3735.6 1413.84L3754.6 1413.77L3773.6 1413.69C3773.53 1395.44 3762.74 1380.92 3749.69 1370.49C3736.5 1359.95 3718.72 1351.6 3698.7 1345.37L3693.06 1363.52ZM3754.6 1413.77L3735.6 1413.84C3735.61 1415.98 3734.47 1420.52 3726.81 1426.95C3719.24 1433.3 3707.2 1439.75 3690.84 1445.25L3696.89 1463.26L3702.94 1481.27C3721.93 1474.89 3738.77 1466.52 3751.24 1456.05C3763.63 1445.66 3773.67 1431.38 3773.6 1413.69L3754.6 1413.77ZM3696.89 1463.26L3683.77 1449.52C3679.43 1453.67 3669.24 1459.09 3652.45 1463.36C3636.29 1467.47 3616.07 1470 3593.87 1470L3593.87 1489L3593.87 1508C3618.77 1508 3642.18 1505.18 3661.82 1500.18C3680.84 1495.35 3698.62 1487.89 3710.02 1476.99L3696.89 1463.26ZM3593.87 1489V1470C3571.92 1470 3551.89 1467.53 3535.81 1463.49C3519.16 1459.31 3508.82 1453.98 3504.22 1449.76L3491.37 1463.75L3478.52 1477.75C3490.02 1488.31 3507.64 1495.6 3526.57 1500.35C3546.07 1505.24 3569.24 1508 3593.87 1508V1489ZM3491.37 1463.75L3497.34 1445.71C3481.04 1440.32 3469.02 1433.95 3461.44 1427.66C3453.79 1421.3 3452.61 1416.78 3452.6 1414.64L3433.6 1414.71L3414.6 1414.79C3414.67 1432.42 3424.76 1446.58 3437.16 1456.89C3449.64 1467.26 3466.46 1475.52 3485.4 1481.79L3491.37 1463.75ZM3433.6 1414.71L3452.6 1414.64C3452.59 1412.46 3453.79 1407.78 3461.82 1401.18C3469.73 1394.68 3482.28 1388.12 3499.22 1382.62L3493.35 1364.55L3487.47 1346.48C3467.9 1352.84 3450.54 1361.26 3437.69 1371.82C3424.95 1382.29 3414.53 1396.76 3414.6 1414.79L3433.6 1414.71ZM3493.35 1364.55L3505.27 1379.34C3510.71 1374.96 3521.49 1369.92 3537.69 1366.05C3553.45 1362.28 3572.78 1360 3593.87 1360V1341V1322C3570.19 1322 3547.86 1324.55 3528.86 1329.09C3510.29 1333.53 3493.2 1340.26 3481.42 1349.76L3493.35 1364.55Z"
                  fill="black"
                  mask="url(#path-127-inside-55_17_636)"
                />
                <rect
                  x="3896.63"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="3927.95"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-131-inside-56_17_636" fill="white">
                  <path d="M3932.9 963C3976.55 963 4014.27 972.191 4032.09 985.516C4069.49 997.148 4093.55 1015.3 4093.63 1035.77C4093.71 1055.6 4071.26 1073.39 4035.92 1085.26C4020.18 1100.3 3979.99 1111 3932.9 1111C3886.32 1111 3846.5 1100.54 3830.4 1085.75C3795.16 1074.09 3772.71 1056.48 3772.63 1036.71C3772.55 1016.51 3795.87 998.412 3832.38 986.55C3849.59 972.669 3888.13 963 3932.9 963Z" />
                </mask>
                <path
                  d="M3932.9 963C3976.55 963 4014.27 972.191 4032.09 985.516C4069.49 997.148 4093.55 1015.3 4093.63 1035.77C4093.71 1055.6 4071.26 1073.39 4035.92 1085.26C4020.18 1100.3 3979.99 1111 3932.9 1111C3886.32 1111 3846.5 1100.54 3830.4 1085.75C3795.16 1074.09 3772.71 1056.48 3772.63 1036.71C3772.55 1016.51 3795.87 998.412 3832.38 986.55C3849.59 972.669 3888.13 963 3932.9 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M3932.9 963L3932.9 944L3932.9 944L3932.9 963ZM4032.09 985.516L4020.71 1000.73L4023.33 1002.69L4026.45 1003.66L4032.09 985.516ZM4093.63 1035.77L4112.63 1035.69L4112.63 1035.69L4093.63 1035.77ZM4035.92 1085.26L4029.88 1067.25L4025.86 1068.6L4022.8 1071.52L4035.92 1085.26ZM3932.9 1111L3932.9 1130H3932.9V1111ZM3830.4 1085.75L3843.25 1071.76L3840.25 1069L3836.37 1067.71L3830.4 1085.75ZM3772.63 1036.71L3753.63 1036.79L3753.63 1036.79L3772.63 1036.71ZM3832.38 986.55L3838.25 1004.62L3841.58 1003.54L3844.3 1001.34L3832.38 986.55ZM3932.9 963V982C3953.46 982 3972.35 984.171 3987.9 987.771C4003.81 991.456 4014.8 996.311 4020.71 1000.73L4032.09 985.516L4043.47 970.301C4031.56 961.395 4014.79 954.993 3996.47 950.751C3977.79 946.425 3955.99 944 3932.9 944V963ZM4032.09 985.516L4026.45 1003.66C4043.83 1009.06 4056.78 1015.61 4065 1022.17C4073.34 1028.84 4074.62 1033.63 4074.63 1035.84L4093.63 1035.77L4112.63 1035.69C4112.56 1017.44 4101.77 1002.92 4088.72 992.487C4075.53 981.947 4057.75 973.599 4037.73 967.373L4032.09 985.516ZM4093.63 1035.77L4074.63 1035.84C4074.64 1037.98 4073.5 1042.52 4065.84 1048.95C4058.27 1055.3 4046.23 1061.75 4029.88 1067.25L4035.92 1085.26L4041.97 1103.27C4060.96 1096.89 4077.8 1088.52 4090.27 1078.05C4102.66 1067.65 4112.7 1053.38 4112.63 1035.69L4093.63 1035.77ZM4035.92 1085.26L4022.8 1071.52C4018.46 1075.67 4008.27 1081.09 3991.48 1085.36C3975.32 1089.47 3955.1 1092 3932.9 1092V1111V1130C3957.8 1130 3981.21 1127.18 4000.85 1122.18C4019.87 1117.35 4037.65 1109.89 4049.05 1098.99L4035.92 1085.26ZM3932.9 1111L3932.9 1092C3910.95 1092 3890.92 1089.53 3874.84 1085.49C3858.19 1081.31 3847.85 1075.98 3843.25 1071.76L3830.4 1085.75L3817.55 1099.74C3829.05 1110.31 3846.67 1117.6 3865.59 1122.35C3885.1 1127.24 3908.27 1130 3932.9 1130L3932.9 1111ZM3830.4 1085.75L3836.37 1067.71C3820.07 1062.32 3808.05 1055.95 3800.47 1049.66C3792.82 1043.3 3791.64 1038.78 3791.63 1036.64L3772.63 1036.71L3753.63 1036.79C3753.7 1054.41 3763.79 1068.58 3776.19 1078.89C3788.67 1089.26 3805.49 1097.52 3824.43 1103.79L3830.4 1085.75ZM3772.63 1036.71L3791.63 1036.64C3791.62 1034.46 3792.82 1029.78 3800.85 1023.18C3808.76 1016.68 3821.31 1010.12 3838.25 1004.62L3832.38 986.55L3826.51 968.48C3806.94 974.839 3789.57 983.263 3776.72 993.823C3763.98 1004.29 3753.56 1018.76 3753.63 1036.79L3772.63 1036.71ZM3832.38 986.55L3844.3 1001.34C3849.74 996.96 3860.52 991.918 3876.72 988.049C3892.48 984.285 3911.81 982 3932.9 982L3932.9 963L3932.9 944C3909.22 944 3886.89 946.55 3867.89 951.089C3849.32 955.525 3832.23 962.258 3820.45 971.759L3832.38 986.55Z"
                  fill="black"
                  mask="url(#path-131-inside-56_17_636)"
                />
                <mask id="path-133-inside-57_17_636" fill="white">
                  <path d="M3932.9 247C3976.55 247 4014.27 256.191 4032.09 269.516C4069.49 281.148 4093.55 299.304 4093.63 319.769C4093.71 339.598 4071.26 357.39 4035.92 369.258C4020.18 384.303 3979.99 395 3932.9 395C3886.32 395 3846.5 384.537 3830.4 369.752C3795.16 358.091 3772.71 340.48 3772.63 320.713C3772.55 300.506 3795.87 282.412 3832.38 270.55C3849.59 256.669 3888.13 247 3932.9 247Z" />
                </mask>
                <path
                  d="M3932.9 247C3976.55 247 4014.27 256.191 4032.09 269.516C4069.49 281.148 4093.55 299.304 4093.63 319.769C4093.71 339.598 4071.26 357.39 4035.92 369.258C4020.18 384.303 3979.99 395 3932.9 395C3886.32 395 3846.5 384.537 3830.4 369.752C3795.16 358.091 3772.71 340.48 3772.63 320.713C3772.55 300.506 3795.87 282.412 3832.38 270.55C3849.59 256.669 3888.13 247 3932.9 247Z"
                  fill="#6B4747"
                />
                <path
                  d="M3932.9 247L3932.9 228L3932.9 228L3932.9 247ZM4032.09 269.516L4020.71 284.731L4023.33 286.688L4026.45 287.658L4032.09 269.516ZM4093.63 319.769L4112.63 319.694L4112.63 319.694L4093.63 319.769ZM4035.92 369.258L4029.87 351.247L4025.86 352.595L4022.8 355.523L4035.92 369.258ZM3932.9 395L3932.9 414H3932.9V395ZM3830.4 369.752L3843.25 355.759L3840.25 352.997L3836.37 351.714L3830.4 369.752ZM3772.63 320.713L3753.63 320.788L3753.63 320.788L3772.63 320.713ZM3832.38 270.55L3838.25 288.62L3841.58 287.538L3844.3 285.341L3832.38 270.55ZM3932.9 247V266C3953.46 266 3972.35 268.171 3987.9 271.771C4003.81 275.456 4014.8 280.311 4020.71 284.731L4032.09 269.516L4043.47 254.301C4031.56 245.395 4014.79 238.993 3996.47 234.751C3977.79 230.425 3955.99 228 3932.9 228V247ZM4032.09 269.516L4026.45 287.658C4043.83 293.064 4056.78 299.61 4065 306.173C4073.34 312.844 4074.62 317.631 4074.63 319.844L4093.63 319.769L4112.63 319.694C4112.56 301.441 4101.77 286.918 4088.72 276.487C4075.53 265.947 4057.75 257.599 4037.73 251.373L4032.09 269.516ZM4093.63 319.769L4074.63 319.843C4074.64 321.984 4073.5 326.522 4065.84 332.945C4058.27 339.3 4046.23 345.755 4029.87 351.247L4035.92 369.258L4041.97 387.269C4060.96 380.893 4077.8 372.518 4090.27 362.052C4102.66 351.655 4112.7 337.382 4112.63 319.694L4093.63 319.769ZM4035.92 369.258L4022.8 355.523C4018.46 359.67 4008.27 365.086 3991.48 369.357C3975.32 373.47 3955.1 376 3932.9 376V395V414C3957.8 414 3981.21 411.182 4000.85 406.184C4019.87 401.345 4037.65 393.89 4049.05 382.993L4035.92 369.258ZM3932.9 395L3932.9 376C3910.95 376 3890.92 373.526 3874.84 369.492C3858.19 365.313 3847.85 359.978 3843.25 355.759L3830.4 369.752L3817.55 383.745C3829.05 394.31 3846.67 401.6 3865.59 406.349C3885.1 411.243 3908.27 414 3932.9 414L3932.9 395ZM3830.4 369.752L3836.37 351.714C3820.07 346.32 3808.05 339.95 3800.47 333.658C3792.82 327.299 3791.64 322.779 3791.63 320.638L3772.63 320.713L3753.63 320.788C3753.7 338.414 3763.79 352.583 3776.19 362.886C3788.67 373.258 3805.49 381.523 3824.43 387.79L3830.4 369.752ZM3772.63 320.713L3791.63 320.638C3791.62 318.459 3792.82 313.777 3800.85 307.182C3808.76 300.677 3821.31 294.123 3838.25 288.62L3832.38 270.55L3826.51 252.48C3806.94 258.839 3789.57 267.263 3776.72 277.823C3763.98 288.291 3753.56 302.76 3753.63 320.788L3772.63 320.713ZM3832.38 270.55L3844.3 285.341C3849.74 280.96 3860.52 275.918 3876.72 272.049C3892.48 268.285 3911.81 266 3932.9 266L3932.9 247L3932.9 228C3909.22 228 3886.89 230.55 3867.89 235.089C3849.32 239.525 3832.23 246.258 3820.45 255.759L3832.38 270.55Z"
                  fill="black"
                  mask="url(#path-133-inside-57_17_636)"
                />
                <mask id="path-135-inside-58_17_636" fill="white">
                  <path d="M3932.9 1089C3976.55 1089 4014.27 1098.19 4032.09 1111.52C4069.49 1123.15 4093.55 1141.3 4093.63 1161.77C4093.71 1181.6 4071.26 1199.39 4035.92 1211.26C4020.18 1226.3 3979.99 1237 3932.9 1237C3886.32 1237 3846.5 1226.54 3830.4 1211.75C3795.16 1200.09 3772.71 1182.48 3772.63 1162.71C3772.55 1142.51 3795.87 1124.41 3832.38 1112.55C3849.59 1098.67 3888.13 1089 3932.9 1089Z" />
                </mask>
                <path
                  d="M3932.9 1089C3976.55 1089 4014.27 1098.19 4032.09 1111.52C4069.49 1123.15 4093.55 1141.3 4093.63 1161.77C4093.71 1181.6 4071.26 1199.39 4035.92 1211.26C4020.18 1226.3 3979.99 1237 3932.9 1237C3886.32 1237 3846.5 1226.54 3830.4 1211.75C3795.16 1200.09 3772.71 1182.48 3772.63 1162.71C3772.55 1142.51 3795.87 1124.41 3832.38 1112.55C3849.59 1098.67 3888.13 1089 3932.9 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M3932.9 1089L3932.9 1070H3932.9V1089ZM4032.09 1111.52L4020.71 1126.73L4023.33 1128.69L4026.45 1129.66L4032.09 1111.52ZM4093.63 1161.77L4112.63 1161.69L4112.63 1161.69L4093.63 1161.77ZM4035.92 1211.26L4029.87 1193.25L4025.86 1194.6L4022.8 1197.52L4035.92 1211.26ZM3932.9 1237L3932.9 1256H3932.9L3932.9 1237ZM3830.4 1211.75L3843.25 1197.76L3840.25 1195L3836.37 1193.71L3830.4 1211.75ZM3772.63 1162.71L3753.63 1162.79L3753.63 1162.79L3772.63 1162.71ZM3832.38 1112.55L3838.25 1130.62L3841.58 1129.54L3844.3 1127.34L3832.38 1112.55ZM3932.9 1089L3932.9 1108C3953.46 1108 3972.35 1110.17 3987.9 1113.77C4003.81 1117.46 4014.8 1122.31 4020.71 1126.73L4032.09 1111.52L4043.47 1096.3C4031.56 1087.39 4014.79 1080.99 3996.47 1076.75C3977.79 1072.42 3955.99 1070 3932.9 1070L3932.9 1089ZM4032.09 1111.52L4026.45 1129.66C4043.83 1135.06 4056.78 1141.61 4065 1148.17C4073.34 1154.84 4074.62 1159.63 4074.63 1161.84L4093.63 1161.77L4112.63 1161.69C4112.56 1143.44 4101.77 1128.92 4088.72 1118.49C4075.53 1107.95 4057.75 1099.6 4037.73 1093.37L4032.09 1111.52ZM4093.63 1161.77L4074.63 1161.84C4074.64 1163.98 4073.5 1168.52 4065.84 1174.95C4058.27 1181.3 4046.22 1187.75 4029.87 1193.25L4035.92 1211.26L4041.97 1229.27C4060.96 1222.89 4077.8 1214.52 4090.27 1204.05C4102.66 1193.66 4112.7 1179.38 4112.63 1161.69L4093.63 1161.77ZM4035.92 1211.26L4022.8 1197.52C4018.46 1201.67 4008.27 1207.09 3991.48 1211.36C3975.32 1215.47 3955.1 1218 3932.9 1218L3932.9 1237L3932.9 1256C3957.8 1256 3981.21 1253.18 4000.85 1248.18C4019.87 1243.35 4037.65 1235.89 4049.05 1224.99L4035.92 1211.26ZM3932.9 1237V1218C3910.95 1218 3890.92 1215.53 3874.84 1211.49C3858.19 1207.31 3847.85 1201.98 3843.25 1197.76L3830.4 1211.75L3817.55 1225.75C3829.05 1236.31 3846.67 1243.6 3865.59 1248.35C3885.1 1253.24 3908.27 1256 3932.9 1256V1237ZM3830.4 1211.75L3836.37 1193.71C3820.07 1188.32 3808.05 1181.95 3800.47 1175.66C3792.82 1169.3 3791.64 1164.78 3791.63 1162.64L3772.63 1162.71L3753.63 1162.79C3753.7 1180.42 3763.79 1194.58 3776.19 1204.89C3788.67 1215.26 3805.49 1223.52 3824.43 1229.79L3830.4 1211.75ZM3772.63 1162.71L3791.63 1162.64C3791.62 1160.46 3792.82 1155.78 3800.85 1149.18C3808.76 1142.68 3821.31 1136.12 3838.25 1130.62L3832.38 1112.55L3826.5 1094.48C3806.93 1100.84 3789.57 1109.26 3776.72 1119.82C3763.98 1130.29 3753.56 1144.76 3753.63 1162.79L3772.63 1162.71ZM3832.38 1112.55L3844.3 1127.34C3849.74 1122.96 3860.52 1117.92 3876.72 1114.05C3892.48 1110.28 3911.81 1108 3932.9 1108V1089V1070C3909.22 1070 3886.89 1072.55 3867.89 1077.09C3849.32 1081.53 3832.23 1088.26 3820.45 1097.76L3832.38 1112.55Z"
                  fill="black"
                  mask="url(#path-135-inside-58_17_636)"
                />
                <mask id="path-137-inside-59_17_636" fill="white">
                  <path d="M3932.9 1215C3976.55 1215 4014.27 1224.19 4032.09 1237.52C4069.49 1249.15 4093.55 1267.3 4093.63 1287.77C4093.71 1307.6 4071.26 1325.39 4035.92 1337.26C4020.18 1352.3 3979.99 1363 3932.9 1363C3886.32 1363 3846.5 1352.54 3830.4 1337.75C3795.16 1326.09 3772.71 1308.48 3772.63 1288.71C3772.55 1268.51 3795.87 1250.41 3832.38 1238.55C3849.59 1224.67 3888.13 1215 3932.9 1215Z" />
                </mask>
                <path
                  d="M3932.9 1215C3976.55 1215 4014.27 1224.19 4032.09 1237.52C4069.49 1249.15 4093.55 1267.3 4093.63 1287.77C4093.71 1307.6 4071.26 1325.39 4035.92 1337.26C4020.18 1352.3 3979.99 1363 3932.9 1363C3886.32 1363 3846.5 1352.54 3830.4 1337.75C3795.16 1326.09 3772.71 1308.48 3772.63 1288.71C3772.55 1268.51 3795.87 1250.41 3832.38 1238.55C3849.59 1224.67 3888.13 1215 3932.9 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M3932.9 1215L3932.9 1196H3932.9V1215ZM4032.09 1237.52L4020.71 1252.73L4023.33 1254.69L4026.45 1255.66L4032.09 1237.52ZM4093.63 1287.77L4112.63 1287.69L4112.63 1287.69L4093.63 1287.77ZM4035.92 1337.26L4029.87 1319.25L4025.86 1320.6L4022.8 1323.52L4035.92 1337.26ZM3932.9 1363L3932.9 1382H3932.9L3932.9 1363ZM3830.4 1337.75L3843.25 1323.76L3840.25 1321L3836.37 1319.71L3830.4 1337.75ZM3772.63 1288.71L3753.63 1288.79L3753.63 1288.79L3772.63 1288.71ZM3832.38 1238.55L3838.25 1256.62L3841.58 1255.54L3844.3 1253.34L3832.38 1238.55ZM3932.9 1215L3932.9 1234C3953.46 1234 3972.35 1236.17 3987.9 1239.77C4003.81 1243.46 4014.8 1248.31 4020.71 1252.73L4032.09 1237.52L4043.47 1222.3C4031.56 1213.39 4014.79 1206.99 3996.47 1202.75C3977.79 1198.42 3955.99 1196 3932.9 1196L3932.9 1215ZM4032.09 1237.52L4026.45 1255.66C4043.83 1261.06 4056.78 1267.61 4065 1274.17C4073.34 1280.84 4074.62 1285.63 4074.63 1287.84L4093.63 1287.77L4112.63 1287.69C4112.56 1269.44 4101.77 1254.92 4088.72 1244.49C4075.53 1233.95 4057.75 1225.6 4037.73 1219.37L4032.09 1237.52ZM4093.63 1287.77L4074.63 1287.84C4074.64 1289.98 4073.5 1294.52 4065.84 1300.95C4058.27 1307.3 4046.22 1313.75 4029.87 1319.25L4035.92 1337.26L4041.97 1355.27C4060.96 1348.89 4077.8 1340.52 4090.27 1330.05C4102.66 1319.66 4112.7 1305.38 4112.63 1287.69L4093.63 1287.77ZM4035.92 1337.26L4022.8 1323.52C4018.46 1327.67 4008.27 1333.09 3991.48 1337.36C3975.32 1341.47 3955.1 1344 3932.9 1344L3932.9 1363L3932.9 1382C3957.8 1382 3981.21 1379.18 4000.85 1374.18C4019.87 1369.35 4037.65 1361.89 4049.05 1350.99L4035.92 1337.26ZM3932.9 1363V1344C3910.95 1344 3890.92 1341.53 3874.84 1337.49C3858.19 1333.31 3847.85 1327.98 3843.25 1323.76L3830.4 1337.75L3817.55 1351.75C3829.05 1362.31 3846.67 1369.6 3865.59 1374.35C3885.1 1379.24 3908.27 1382 3932.9 1382V1363ZM3830.4 1337.75L3836.37 1319.71C3820.07 1314.32 3808.05 1307.95 3800.47 1301.66C3792.82 1295.3 3791.64 1290.78 3791.63 1288.64L3772.63 1288.71L3753.63 1288.79C3753.7 1306.42 3763.79 1320.58 3776.19 1330.89C3788.67 1341.26 3805.49 1349.52 3824.43 1355.79L3830.4 1337.75ZM3772.63 1288.71L3791.63 1288.64C3791.62 1286.46 3792.82 1281.78 3800.85 1275.18C3808.76 1268.68 3821.31 1262.12 3838.25 1256.62L3832.38 1238.55L3826.5 1220.48C3806.93 1226.84 3789.57 1235.26 3776.72 1245.82C3763.98 1256.29 3753.56 1270.76 3753.63 1288.79L3772.63 1288.71ZM3832.38 1238.55L3844.3 1253.34C3849.74 1248.96 3860.52 1243.92 3876.72 1240.05C3892.48 1236.28 3911.81 1234 3932.9 1234V1215V1196C3909.22 1196 3886.89 1198.55 3867.89 1203.09C3849.32 1207.53 3832.23 1214.26 3820.45 1223.76L3832.38 1238.55Z"
                  fill="black"
                  mask="url(#path-137-inside-59_17_636)"
                />
                <mask id="path-139-inside-60_17_636" fill="white">
                  <path d="M3932.9 1341C3976.55 1341 4014.27 1350.19 4032.09 1363.52C4069.49 1375.15 4093.55 1393.3 4093.63 1413.77C4093.71 1433.6 4071.26 1451.39 4035.92 1463.26C4020.18 1478.3 3979.99 1489 3932.9 1489C3886.32 1489 3846.5 1478.54 3830.4 1463.75C3795.16 1452.09 3772.71 1434.48 3772.63 1414.71C3772.55 1394.51 3795.87 1376.41 3832.38 1364.55C3849.59 1350.67 3888.13 1341 3932.9 1341Z" />
                </mask>
                <path
                  d="M3932.9 1341C3976.55 1341 4014.27 1350.19 4032.09 1363.52C4069.49 1375.15 4093.55 1393.3 4093.63 1413.77C4093.71 1433.6 4071.26 1451.39 4035.92 1463.26C4020.18 1478.3 3979.99 1489 3932.9 1489C3886.32 1489 3846.5 1478.54 3830.4 1463.75C3795.16 1452.09 3772.71 1434.48 3772.63 1414.71C3772.55 1394.51 3795.87 1376.41 3832.38 1364.55C3849.59 1350.67 3888.13 1341 3932.9 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M3932.9 1341L3932.9 1322H3932.9V1341ZM4032.09 1363.52L4020.71 1378.73L4023.33 1380.69L4026.45 1381.66L4032.09 1363.52ZM4093.63 1413.77L4112.63 1413.69L4112.63 1413.69L4093.63 1413.77ZM4035.92 1463.26L4029.87 1445.25L4025.86 1446.6L4022.8 1449.52L4035.92 1463.26ZM3932.9 1489L3932.9 1508H3932.9L3932.9 1489ZM3830.4 1463.75L3843.25 1449.76L3840.25 1447L3836.37 1445.71L3830.4 1463.75ZM3772.63 1414.71L3753.63 1414.79L3753.63 1414.79L3772.63 1414.71ZM3832.38 1364.55L3838.25 1382.62L3841.58 1381.54L3844.3 1379.34L3832.38 1364.55ZM3932.9 1341L3932.9 1360C3953.46 1360 3972.35 1362.17 3987.9 1365.77C4003.81 1369.46 4014.8 1374.31 4020.71 1378.73L4032.09 1363.52L4043.47 1348.3C4031.56 1339.39 4014.79 1332.99 3996.47 1328.75C3977.79 1324.42 3955.99 1322 3932.9 1322L3932.9 1341ZM4032.09 1363.52L4026.45 1381.66C4043.83 1387.06 4056.78 1393.61 4065 1400.17C4073.34 1406.84 4074.62 1411.63 4074.63 1413.84L4093.63 1413.77L4112.63 1413.69C4112.56 1395.44 4101.77 1380.92 4088.72 1370.49C4075.53 1359.95 4057.75 1351.6 4037.73 1345.37L4032.09 1363.52ZM4093.63 1413.77L4074.63 1413.84C4074.64 1415.98 4073.5 1420.52 4065.84 1426.95C4058.27 1433.3 4046.22 1439.75 4029.87 1445.25L4035.92 1463.26L4041.97 1481.27C4060.96 1474.89 4077.8 1466.52 4090.27 1456.05C4102.66 1445.66 4112.7 1431.38 4112.63 1413.69L4093.63 1413.77ZM4035.92 1463.26L4022.8 1449.52C4018.46 1453.67 4008.27 1459.09 3991.48 1463.36C3975.32 1467.47 3955.1 1470 3932.9 1470L3932.9 1489L3932.9 1508C3957.8 1508 3981.21 1505.18 4000.85 1500.18C4019.87 1495.35 4037.65 1487.89 4049.05 1476.99L4035.92 1463.26ZM3932.9 1489V1470C3910.95 1470 3890.92 1467.53 3874.84 1463.49C3858.19 1459.31 3847.85 1453.98 3843.25 1449.76L3830.4 1463.75L3817.55 1477.75C3829.05 1488.31 3846.67 1495.6 3865.59 1500.35C3885.1 1505.24 3908.27 1508 3932.9 1508V1489ZM3830.4 1463.75L3836.37 1445.71C3820.07 1440.32 3808.05 1433.95 3800.47 1427.66C3792.82 1421.3 3791.64 1416.78 3791.63 1414.64L3772.63 1414.71L3753.63 1414.79C3753.7 1432.42 3763.79 1446.58 3776.19 1456.89C3788.67 1467.26 3805.49 1475.52 3824.43 1481.79L3830.4 1463.75ZM3772.63 1414.71L3791.63 1414.64C3791.62 1412.46 3792.82 1407.78 3800.85 1401.18C3808.76 1394.68 3821.31 1388.12 3838.25 1382.62L3832.38 1364.55L3826.5 1346.48C3806.93 1352.84 3789.57 1361.26 3776.72 1371.82C3763.98 1382.29 3753.56 1396.76 3753.63 1414.79L3772.63 1414.71ZM3832.38 1364.55L3844.3 1379.34C3849.74 1374.96 3860.52 1369.92 3876.72 1366.05C3892.48 1362.28 3911.81 1360 3932.9 1360V1341V1322C3909.22 1322 3886.89 1324.55 3867.89 1329.09C3849.32 1333.53 3832.23 1340.26 3820.45 1349.76L3832.38 1364.55Z"
                  fill="black"
                  mask="url(#path-139-inside-60_17_636)"
                />
                <rect
                  x="4235.66"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-142-inside-61_17_636" fill="white">
                  <path d="M4271.93 963C4315.58 963 4353.3 972.191 4371.12 985.516C4408.52 997.148 4432.58 1015.3 4432.66 1035.77C4432.74 1055.6 4410.29 1073.39 4374.95 1085.26C4359.21 1100.3 4319.02 1111 4271.93 1111C4225.35 1111 4185.53 1100.54 4169.43 1085.75C4134.19 1074.09 4111.74 1056.48 4111.66 1036.71C4111.58 1016.51 4134.9 998.412 4171.41 986.55C4188.62 972.669 4227.16 963 4271.93 963Z" />
                </mask>
                <path
                  d="M4271.93 963C4315.58 963 4353.3 972.191 4371.12 985.516C4408.52 997.148 4432.58 1015.3 4432.66 1035.77C4432.74 1055.6 4410.29 1073.39 4374.95 1085.26C4359.21 1100.3 4319.02 1111 4271.93 1111C4225.35 1111 4185.53 1100.54 4169.43 1085.75C4134.19 1074.09 4111.74 1056.48 4111.66 1036.71C4111.58 1016.51 4134.9 998.412 4171.41 986.55C4188.62 972.669 4227.16 963 4271.93 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M4271.93 963L4271.93 944L4271.93 944L4271.93 963ZM4371.12 985.516L4359.74 1000.73L4362.36 1002.69L4365.48 1003.66L4371.12 985.516ZM4432.66 1035.77L4451.66 1035.69L4451.66 1035.69L4432.66 1035.77ZM4374.95 1085.26L4368.91 1067.25L4364.89 1068.6L4361.83 1071.52L4374.95 1085.26ZM4271.93 1111L4271.93 1130H4271.93V1111ZM4169.43 1085.75L4182.28 1071.76L4179.28 1069L4175.4 1067.71L4169.43 1085.75ZM4111.66 1036.71L4092.66 1036.79L4092.66 1036.79L4111.66 1036.71ZM4171.41 986.55L4177.28 1004.62L4180.61 1003.54L4183.33 1001.34L4171.41 986.55ZM4271.93 963V982C4292.49 982 4311.38 984.171 4326.93 987.771C4342.84 991.456 4353.83 996.311 4359.74 1000.73L4371.12 985.516L4382.5 970.301C4370.59 961.395 4353.82 954.993 4335.5 950.751C4316.82 946.425 4295.02 944 4271.93 944V963ZM4371.12 985.516L4365.48 1003.66C4382.86 1009.06 4395.81 1015.61 4404.03 1022.17C4412.37 1028.84 4413.66 1033.63 4413.66 1035.84L4432.66 1035.77L4451.66 1035.69C4451.59 1017.44 4440.8 1002.92 4427.75 992.487C4414.56 981.947 4396.78 973.599 4376.76 967.373L4371.12 985.516ZM4432.66 1035.77L4413.66 1035.84C4413.67 1037.98 4412.53 1042.52 4404.87 1048.95C4397.3 1055.3 4385.26 1061.75 4368.91 1067.25L4374.95 1085.26L4381 1103.27C4399.99 1096.89 4416.83 1088.52 4429.3 1078.05C4441.69 1067.65 4451.73 1053.38 4451.66 1035.69L4432.66 1035.77ZM4374.95 1085.26L4361.83 1071.52C4357.49 1075.67 4347.3 1081.09 4330.51 1085.36C4314.35 1089.47 4294.13 1092 4271.93 1092V1111V1130C4296.83 1130 4320.24 1127.18 4339.88 1122.18C4358.9 1117.35 4376.68 1109.89 4388.08 1098.99L4374.95 1085.26ZM4271.93 1111L4271.93 1092C4249.98 1092 4229.95 1089.53 4213.87 1085.49C4197.22 1081.31 4186.88 1075.98 4182.28 1071.76L4169.43 1085.75L4156.58 1099.74C4168.08 1110.31 4185.7 1117.6 4204.63 1122.35C4224.13 1127.24 4247.3 1130 4271.93 1130L4271.93 1111ZM4169.43 1085.75L4175.4 1067.71C4159.1 1062.32 4147.08 1055.95 4139.5 1049.66C4131.85 1043.3 4130.67 1038.78 4130.66 1036.64L4111.66 1036.71L4092.66 1036.79C4092.73 1054.41 4102.82 1068.58 4115.22 1078.89C4127.7 1089.26 4144.52 1097.52 4163.46 1103.79L4169.43 1085.75ZM4111.66 1036.71L4130.66 1036.64C4130.66 1034.46 4131.85 1029.78 4139.88 1023.18C4147.79 1016.68 4160.34 1010.12 4177.28 1004.62L4171.41 986.55L4165.54 968.48C4145.97 974.839 4128.6 983.263 4115.75 993.823C4103.01 1004.29 4092.59 1018.76 4092.66 1036.79L4111.66 1036.71ZM4171.41 986.55L4183.33 1001.34C4188.77 996.96 4199.56 991.918 4215.75 988.049C4231.51 984.285 4250.84 982 4271.93 982L4271.93 963L4271.93 944C4248.25 944 4225.92 946.55 4206.92 951.089C4188.35 955.525 4171.26 962.258 4159.48 971.759L4171.41 986.55Z"
                  fill="black"
                  mask="url(#path-142-inside-61_17_636)"
                />
                <mask id="path-144-inside-62_17_636" fill="white">
                  <path d="M4271.93 1089C4315.58 1089 4353.3 1098.19 4371.12 1111.52C4408.52 1123.15 4432.58 1141.3 4432.66 1161.77C4432.74 1181.6 4410.29 1199.39 4374.95 1211.26C4359.21 1226.3 4319.02 1237 4271.93 1237C4225.35 1237 4185.53 1226.54 4169.43 1211.75C4134.19 1200.09 4111.74 1182.48 4111.66 1162.71C4111.58 1142.51 4134.9 1124.41 4171.41 1112.55C4188.62 1098.67 4227.16 1089 4271.93 1089Z" />
                </mask>
                <path
                  d="M4271.93 1089C4315.58 1089 4353.3 1098.19 4371.12 1111.52C4408.52 1123.15 4432.58 1141.3 4432.66 1161.77C4432.74 1181.6 4410.29 1199.39 4374.95 1211.26C4359.21 1226.3 4319.02 1237 4271.93 1237C4225.35 1237 4185.53 1226.54 4169.43 1211.75C4134.19 1200.09 4111.74 1182.48 4111.66 1162.71C4111.58 1142.51 4134.9 1124.41 4171.41 1112.55C4188.62 1098.67 4227.16 1089 4271.93 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M4271.93 1089L4271.93 1070H4271.93V1089ZM4371.12 1111.52L4359.74 1126.73L4362.36 1128.69L4365.48 1129.66L4371.12 1111.52ZM4432.66 1161.77L4451.66 1161.69L4451.66 1161.69L4432.66 1161.77ZM4374.95 1211.26L4368.9 1193.25L4364.89 1194.6L4361.83 1197.52L4374.95 1211.26ZM4271.93 1237L4271.93 1256H4271.93L4271.93 1237ZM4169.43 1211.75L4182.28 1197.76L4179.28 1195L4175.4 1193.71L4169.43 1211.75ZM4111.66 1162.71L4092.66 1162.79L4092.66 1162.79L4111.66 1162.71ZM4171.41 1112.55L4177.28 1130.62L4180.61 1129.54L4183.33 1127.34L4171.41 1112.55ZM4271.93 1089L4271.93 1108C4292.49 1108 4311.38 1110.17 4326.93 1113.77C4342.84 1117.46 4353.83 1122.31 4359.74 1126.73L4371.12 1111.52L4382.5 1096.3C4370.59 1087.39 4353.82 1080.99 4335.5 1076.75C4316.82 1072.42 4295.02 1070 4271.93 1070L4271.93 1089ZM4371.12 1111.52L4365.48 1129.66C4382.86 1135.06 4395.81 1141.61 4404.03 1148.17C4412.37 1154.84 4413.66 1159.63 4413.66 1161.84L4432.66 1161.77L4451.66 1161.69C4451.59 1143.44 4440.8 1128.92 4427.75 1118.49C4414.56 1107.95 4396.78 1099.6 4376.76 1093.37L4371.12 1111.52ZM4432.66 1161.77L4413.66 1161.84C4413.67 1163.98 4412.53 1168.52 4404.87 1174.95C4397.3 1181.3 4385.26 1187.75 4368.9 1193.25L4374.95 1211.26L4381 1229.27C4399.99 1222.89 4416.83 1214.52 4429.3 1204.05C4441.69 1193.66 4451.73 1179.38 4451.66 1161.69L4432.66 1161.77ZM4374.95 1211.26L4361.83 1197.52C4357.49 1201.67 4347.3 1207.09 4330.51 1211.36C4314.35 1215.47 4294.13 1218 4271.93 1218L4271.93 1237L4271.93 1256C4296.83 1256 4320.24 1253.18 4339.88 1248.18C4358.9 1243.35 4376.68 1235.89 4388.08 1224.99L4374.95 1211.26ZM4271.93 1237V1218C4249.98 1218 4229.95 1215.53 4213.87 1211.49C4197.22 1207.31 4186.88 1201.98 4182.28 1197.76L4169.43 1211.75L4156.58 1225.75C4168.08 1236.31 4185.7 1243.6 4204.63 1248.35C4224.13 1253.24 4247.3 1256 4271.93 1256V1237ZM4169.43 1211.75L4175.4 1193.71C4159.1 1188.32 4147.08 1181.95 4139.5 1175.66C4131.85 1169.3 4130.67 1164.78 4130.66 1162.64L4111.66 1162.71L4092.66 1162.79C4092.73 1180.42 4102.82 1194.58 4115.22 1204.89C4127.7 1215.26 4144.53 1223.52 4163.46 1229.79L4169.43 1211.75ZM4111.66 1162.71L4130.66 1162.64C4130.66 1160.46 4131.85 1155.78 4139.88 1149.18C4147.79 1142.68 4160.34 1136.12 4177.28 1130.62L4171.41 1112.55L4165.54 1094.48C4145.97 1100.84 4128.6 1109.26 4115.75 1119.82C4103.01 1130.29 4092.59 1144.76 4092.66 1162.79L4111.66 1162.71ZM4171.41 1112.55L4183.33 1127.34C4188.77 1122.96 4199.55 1117.92 4215.75 1114.05C4231.51 1110.28 4250.84 1108 4271.93 1108V1089V1070C4248.25 1070 4225.92 1072.55 4206.92 1077.09C4188.35 1081.53 4171.26 1088.26 4159.48 1097.76L4171.41 1112.55Z"
                  fill="black"
                  mask="url(#path-144-inside-62_17_636)"
                />
                <mask id="path-146-inside-63_17_636" fill="white">
                  <path d="M4271.93 1215C4315.58 1215 4353.3 1224.19 4371.12 1237.52C4408.52 1249.15 4432.58 1267.3 4432.66 1287.77C4432.74 1307.6 4410.29 1325.39 4374.95 1337.26C4359.21 1352.3 4319.02 1363 4271.93 1363C4225.35 1363 4185.53 1352.54 4169.43 1337.75C4134.19 1326.09 4111.74 1308.48 4111.66 1288.71C4111.58 1268.51 4134.9 1250.41 4171.41 1238.55C4188.62 1224.67 4227.16 1215 4271.93 1215Z" />
                </mask>
                <path
                  d="M4271.93 1215C4315.58 1215 4353.3 1224.19 4371.12 1237.52C4408.52 1249.15 4432.58 1267.3 4432.66 1287.77C4432.74 1307.6 4410.29 1325.39 4374.95 1337.26C4359.21 1352.3 4319.02 1363 4271.93 1363C4225.35 1363 4185.53 1352.54 4169.43 1337.75C4134.19 1326.09 4111.74 1308.48 4111.66 1288.71C4111.58 1268.51 4134.9 1250.41 4171.41 1238.55C4188.62 1224.67 4227.16 1215 4271.93 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M4271.93 1215L4271.93 1196H4271.93V1215ZM4371.12 1237.52L4359.74 1252.73L4362.36 1254.69L4365.48 1255.66L4371.12 1237.52ZM4432.66 1287.77L4451.66 1287.69L4451.66 1287.69L4432.66 1287.77ZM4374.95 1337.26L4368.9 1319.25L4364.89 1320.6L4361.83 1323.52L4374.95 1337.26ZM4271.93 1363L4271.93 1382H4271.93L4271.93 1363ZM4169.43 1337.75L4182.28 1323.76L4179.28 1321L4175.4 1319.71L4169.43 1337.75ZM4111.66 1288.71L4092.66 1288.79L4092.66 1288.79L4111.66 1288.71ZM4171.41 1238.55L4177.28 1256.62L4180.61 1255.54L4183.33 1253.34L4171.41 1238.55ZM4271.93 1215L4271.93 1234C4292.49 1234 4311.38 1236.17 4326.93 1239.77C4342.84 1243.46 4353.83 1248.31 4359.74 1252.73L4371.12 1237.52L4382.5 1222.3C4370.59 1213.39 4353.82 1206.99 4335.5 1202.75C4316.82 1198.42 4295.02 1196 4271.93 1196L4271.93 1215ZM4371.12 1237.52L4365.48 1255.66C4382.86 1261.06 4395.81 1267.61 4404.03 1274.17C4412.37 1280.84 4413.66 1285.63 4413.66 1287.84L4432.66 1287.77L4451.66 1287.69C4451.59 1269.44 4440.8 1254.92 4427.75 1244.49C4414.56 1233.95 4396.78 1225.6 4376.76 1219.37L4371.12 1237.52ZM4432.66 1287.77L4413.66 1287.84C4413.67 1289.98 4412.53 1294.52 4404.87 1300.95C4397.3 1307.3 4385.26 1313.75 4368.9 1319.25L4374.95 1337.26L4381 1355.27C4399.99 1348.89 4416.83 1340.52 4429.3 1330.05C4441.69 1319.66 4451.73 1305.38 4451.66 1287.69L4432.66 1287.77ZM4374.95 1337.26L4361.83 1323.52C4357.49 1327.67 4347.3 1333.09 4330.51 1337.36C4314.35 1341.47 4294.13 1344 4271.93 1344L4271.93 1363L4271.93 1382C4296.83 1382 4320.24 1379.18 4339.88 1374.18C4358.9 1369.35 4376.68 1361.89 4388.08 1350.99L4374.95 1337.26ZM4271.93 1363V1344C4249.98 1344 4229.95 1341.53 4213.87 1337.49C4197.22 1333.31 4186.88 1327.98 4182.28 1323.76L4169.43 1337.75L4156.58 1351.75C4168.08 1362.31 4185.7 1369.6 4204.63 1374.35C4224.13 1379.24 4247.3 1382 4271.93 1382V1363ZM4169.43 1337.75L4175.4 1319.71C4159.1 1314.32 4147.08 1307.95 4139.5 1301.66C4131.85 1295.3 4130.67 1290.78 4130.66 1288.64L4111.66 1288.71L4092.66 1288.79C4092.73 1306.42 4102.82 1320.58 4115.22 1330.89C4127.7 1341.26 4144.53 1349.52 4163.46 1355.79L4169.43 1337.75ZM4111.66 1288.71L4130.66 1288.64C4130.66 1286.46 4131.85 1281.78 4139.88 1275.18C4147.79 1268.68 4160.34 1262.12 4177.28 1256.62L4171.41 1238.55L4165.54 1220.48C4145.97 1226.84 4128.6 1235.26 4115.75 1245.82C4103.01 1256.29 4092.59 1270.76 4092.66 1288.79L4111.66 1288.71ZM4171.41 1238.55L4183.33 1253.34C4188.77 1248.96 4199.55 1243.92 4215.75 1240.05C4231.51 1236.28 4250.84 1234 4271.93 1234V1215V1196C4248.25 1196 4225.92 1198.55 4206.92 1203.09C4188.35 1207.53 4171.26 1214.26 4159.48 1223.76L4171.41 1238.55Z"
                  fill="black"
                  mask="url(#path-146-inside-63_17_636)"
                />
                <mask id="path-148-inside-64_17_636" fill="white">
                  <path d="M4271.93 1341C4315.58 1341 4353.3 1350.19 4371.12 1363.52C4408.52 1375.15 4432.58 1393.3 4432.66 1413.77C4432.74 1433.6 4410.29 1451.39 4374.95 1463.26C4359.21 1478.3 4319.02 1489 4271.93 1489C4225.35 1489 4185.53 1478.54 4169.43 1463.75C4134.19 1452.09 4111.74 1434.48 4111.66 1414.71C4111.58 1394.51 4134.9 1376.41 4171.41 1364.55C4188.62 1350.67 4227.16 1341 4271.93 1341Z" />
                </mask>
                <path
                  d="M4271.93 1341C4315.58 1341 4353.3 1350.19 4371.12 1363.52C4408.52 1375.15 4432.58 1393.3 4432.66 1413.77C4432.74 1433.6 4410.29 1451.39 4374.95 1463.26C4359.21 1478.3 4319.02 1489 4271.93 1489C4225.35 1489 4185.53 1478.54 4169.43 1463.75C4134.19 1452.09 4111.74 1434.48 4111.66 1414.71C4111.58 1394.51 4134.9 1376.41 4171.41 1364.55C4188.62 1350.67 4227.16 1341 4271.93 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M4271.93 1341L4271.93 1322H4271.93V1341ZM4371.12 1363.52L4359.74 1378.73L4362.36 1380.69L4365.48 1381.66L4371.12 1363.52ZM4432.66 1413.77L4451.66 1413.69L4451.66 1413.69L4432.66 1413.77ZM4374.95 1463.26L4368.9 1445.25L4364.89 1446.6L4361.83 1449.52L4374.95 1463.26ZM4271.93 1489L4271.93 1508H4271.93L4271.93 1489ZM4169.43 1463.75L4182.28 1449.76L4179.28 1447L4175.4 1445.71L4169.43 1463.75ZM4111.66 1414.71L4092.66 1414.79L4092.66 1414.79L4111.66 1414.71ZM4171.41 1364.55L4177.28 1382.62L4180.61 1381.54L4183.33 1379.34L4171.41 1364.55ZM4271.93 1341L4271.93 1360C4292.49 1360 4311.38 1362.17 4326.93 1365.77C4342.84 1369.46 4353.83 1374.31 4359.74 1378.73L4371.12 1363.52L4382.5 1348.3C4370.59 1339.39 4353.82 1332.99 4335.5 1328.75C4316.82 1324.42 4295.02 1322 4271.93 1322L4271.93 1341ZM4371.12 1363.52L4365.48 1381.66C4382.86 1387.06 4395.81 1393.61 4404.03 1400.17C4412.37 1406.84 4413.66 1411.63 4413.66 1413.84L4432.66 1413.77L4451.66 1413.69C4451.59 1395.44 4440.8 1380.92 4427.75 1370.49C4414.56 1359.95 4396.78 1351.6 4376.76 1345.37L4371.12 1363.52ZM4432.66 1413.77L4413.66 1413.84C4413.67 1415.98 4412.53 1420.52 4404.87 1426.95C4397.3 1433.3 4385.26 1439.75 4368.9 1445.25L4374.95 1463.26L4381 1481.27C4399.99 1474.89 4416.83 1466.52 4429.3 1456.05C4441.69 1445.66 4451.73 1431.38 4451.66 1413.69L4432.66 1413.77ZM4374.95 1463.26L4361.83 1449.52C4357.49 1453.67 4347.3 1459.09 4330.51 1463.36C4314.35 1467.47 4294.13 1470 4271.93 1470L4271.93 1489L4271.93 1508C4296.83 1508 4320.24 1505.18 4339.88 1500.18C4358.9 1495.35 4376.68 1487.89 4388.08 1476.99L4374.95 1463.26ZM4271.93 1489V1470C4249.98 1470 4229.95 1467.53 4213.87 1463.49C4197.22 1459.31 4186.88 1453.98 4182.28 1449.76L4169.43 1463.75L4156.58 1477.75C4168.08 1488.31 4185.7 1495.6 4204.63 1500.35C4224.13 1505.24 4247.3 1508 4271.93 1508V1489ZM4169.43 1463.75L4175.4 1445.71C4159.1 1440.32 4147.08 1433.95 4139.5 1427.66C4131.85 1421.3 4130.67 1416.78 4130.66 1414.64L4111.66 1414.71L4092.66 1414.79C4092.73 1432.42 4102.82 1446.58 4115.22 1456.89C4127.7 1467.26 4144.53 1475.52 4163.46 1481.79L4169.43 1463.75ZM4111.66 1414.71L4130.66 1414.64C4130.66 1412.46 4131.85 1407.78 4139.88 1401.18C4147.79 1394.68 4160.34 1388.12 4177.28 1382.62L4171.41 1364.55L4165.54 1346.48C4145.97 1352.84 4128.6 1361.26 4115.75 1371.82C4103.01 1382.29 4092.59 1396.76 4092.66 1414.79L4111.66 1414.71ZM4171.41 1364.55L4183.33 1379.34C4188.77 1374.96 4199.55 1369.92 4215.75 1366.05C4231.51 1362.28 4250.84 1360 4271.93 1360V1341V1322C4248.25 1322 4225.92 1324.55 4206.92 1329.09C4188.35 1333.53 4171.26 1340.26 4159.48 1349.76L4171.41 1364.55Z"
                  fill="black"
                  mask="url(#path-148-inside-64_17_636)"
                />
                <mask id="path-150-inside-65_17_636" fill="white">
                  <path d="M4271.93 247C4315.58 247 4353.3 256.191 4371.12 269.516C4408.52 281.148 4432.58 299.304 4432.66 319.769C4432.74 339.598 4410.29 357.39 4374.95 369.258C4359.21 384.303 4319.02 395 4271.93 395C4225.35 395 4185.53 384.537 4169.43 369.752C4134.19 358.091 4111.74 340.48 4111.66 320.713C4111.58 300.506 4134.9 282.412 4171.41 270.55C4188.62 256.669 4227.16 247 4271.93 247Z" />
                </mask>
                <path
                  d="M4271.93 247C4315.58 247 4353.3 256.191 4371.12 269.516C4408.52 281.148 4432.58 299.304 4432.66 319.769C4432.74 339.598 4410.29 357.39 4374.95 369.258C4359.21 384.303 4319.02 395 4271.93 395C4225.35 395 4185.53 384.537 4169.43 369.752C4134.19 358.091 4111.74 340.48 4111.66 320.713C4111.58 300.506 4134.9 282.412 4171.41 270.55C4188.62 256.669 4227.16 247 4271.93 247Z"
                  fill="#6B4747"
                />
                <path
                  d="M4271.93 247L4271.93 228L4271.93 228L4271.93 247ZM4371.12 269.516L4359.74 284.731L4362.36 286.688L4365.48 287.658L4371.12 269.516ZM4432.66 319.769L4451.66 319.694L4451.66 319.694L4432.66 319.769ZM4374.95 369.258L4368.9 351.247L4364.89 352.595L4361.83 355.523L4374.95 369.258ZM4271.93 395L4271.93 414H4271.93V395ZM4169.43 369.752L4182.28 355.759L4179.28 352.997L4175.4 351.714L4169.43 369.752ZM4111.66 320.713L4092.66 320.788L4092.66 320.788L4111.66 320.713ZM4171.41 270.55L4177.28 288.62L4180.61 287.538L4183.33 285.341L4171.41 270.55ZM4271.93 247V266C4292.49 266 4311.38 268.171 4326.93 271.771C4342.84 275.456 4353.83 280.311 4359.74 284.731L4371.12 269.516L4382.5 254.301C4370.59 245.395 4353.82 238.993 4335.5 234.751C4316.82 230.425 4295.02 228 4271.93 228V247ZM4371.12 269.516L4365.48 287.658C4382.86 293.064 4395.81 299.61 4404.03 306.173C4412.37 312.844 4413.65 317.631 4413.66 319.844L4432.66 319.769L4451.66 319.694C4451.59 301.441 4440.8 286.918 4427.75 276.487C4414.56 265.947 4396.78 257.599 4376.76 251.373L4371.12 269.516ZM4432.66 319.769L4413.66 319.843C4413.67 321.984 4412.53 326.522 4404.87 332.945C4397.3 339.3 4385.26 345.755 4368.9 351.247L4374.95 369.258L4381 387.269C4399.99 380.893 4416.83 372.518 4429.3 362.052C4441.69 351.655 4451.73 337.382 4451.66 319.694L4432.66 319.769ZM4374.95 369.258L4361.83 355.523C4357.49 359.67 4347.3 365.086 4330.51 369.357C4314.35 373.47 4294.13 376 4271.93 376V395V414C4296.83 414 4320.24 411.182 4339.88 406.184C4358.9 401.345 4376.68 393.89 4388.08 382.993L4374.95 369.258ZM4271.93 395L4271.93 376C4249.98 376 4229.95 373.526 4213.87 369.492C4197.22 365.313 4186.88 359.978 4182.28 355.759L4169.43 369.752L4156.58 383.745C4168.08 394.31 4185.7 401.6 4204.62 406.349C4224.13 411.243 4247.3 414 4271.93 414L4271.93 395ZM4169.43 369.752L4175.4 351.714C4159.1 346.32 4147.08 339.95 4139.5 333.658C4131.85 327.299 4130.67 322.779 4130.66 320.638L4111.66 320.713L4092.66 320.788C4092.73 338.414 4102.82 352.583 4115.22 362.886C4127.7 373.258 4144.52 381.523 4163.46 387.79L4169.43 369.752ZM4111.66 320.713L4130.66 320.638C4130.65 318.459 4131.85 313.777 4139.88 307.182C4147.79 300.677 4160.34 294.123 4177.28 288.62L4171.41 270.55L4165.54 252.48C4145.97 258.839 4128.6 267.263 4115.75 277.823C4103.01 288.291 4092.59 302.76 4092.66 320.788L4111.66 320.713ZM4171.41 270.55L4183.33 285.341C4188.77 280.96 4199.55 275.918 4215.75 272.049C4231.51 268.285 4250.84 266 4271.93 266L4271.93 247L4271.93 228C4248.25 228 4225.92 230.55 4206.92 235.089C4188.35 239.525 4171.26 246.258 4159.48 255.759L4171.41 270.55Z"
                  fill="black"
                  mask="url(#path-150-inside-65_17_636)"
                />
                <rect
                  x="4574.69"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <ellipse
                  cx="4606.01"
                  cy="602.5"
                  rx="17.6577"
                  ry="12.25"
                  fill="#D9D9D9"
                />
                <mask id="path-154-inside-66_17_636" fill="white">
                  <path d="M4610.96 963C4654.61 963 4692.33 972.191 4710.15 985.516C4747.55 997.148 4771.61 1015.3 4771.69 1035.77C4771.77 1055.6 4749.32 1073.39 4713.99 1085.26C4698.24 1100.3 4658.05 1111 4610.96 1111C4564.38 1111 4524.56 1100.54 4508.46 1085.75C4473.22 1074.09 4450.77 1056.48 4450.69 1036.71C4450.61 1016.51 4473.93 998.412 4510.44 986.55C4527.65 972.669 4566.19 963 4610.96 963Z" />
                </mask>
                <path
                  d="M4610.96 963C4654.61 963 4692.33 972.191 4710.15 985.516C4747.55 997.148 4771.61 1015.3 4771.69 1035.77C4771.77 1055.6 4749.32 1073.39 4713.99 1085.26C4698.24 1100.3 4658.05 1111 4610.96 1111C4564.38 1111 4524.56 1100.54 4508.46 1085.75C4473.22 1074.09 4450.77 1056.48 4450.69 1036.71C4450.61 1016.51 4473.93 998.412 4510.44 986.55C4527.65 972.669 4566.19 963 4610.96 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M4610.96 963L4610.96 944L4610.96 944L4610.96 963ZM4710.15 985.516L4698.77 1000.73L4701.39 1002.69L4704.51 1003.66L4710.15 985.516ZM4771.69 1035.77L4790.69 1035.69L4790.69 1035.69L4771.69 1035.77ZM4713.99 1085.26L4707.94 1067.25L4703.92 1068.6L4700.86 1071.52L4713.99 1085.26ZM4610.96 1111L4610.96 1130H4610.96V1111ZM4508.46 1085.75L4521.31 1071.76L4518.31 1069L4514.43 1067.71L4508.46 1085.75ZM4450.69 1036.71L4431.69 1036.79L4431.69 1036.79L4450.69 1036.71ZM4510.44 986.55L4516.31 1004.62L4519.64 1003.54L4522.36 1001.34L4510.44 986.55ZM4610.96 963V982C4631.52 982 4650.41 984.171 4665.96 987.771C4681.87 991.456 4692.86 996.311 4698.77 1000.73L4710.15 985.516L4721.53 970.301C4709.62 961.395 4692.85 954.993 4674.53 950.751C4655.85 946.425 4634.05 944 4610.96 944V963ZM4710.15 985.516L4704.51 1003.66C4721.89 1009.06 4734.84 1015.61 4743.06 1022.17C4751.4 1028.84 4752.69 1033.63 4752.69 1035.84L4771.69 1035.77L4790.69 1035.69C4790.62 1017.44 4779.83 1002.92 4766.78 992.487C4753.59 981.947 4735.81 973.599 4715.79 967.373L4710.15 985.516ZM4771.69 1035.77L4752.69 1035.84C4752.7 1037.98 4751.56 1042.52 4743.9 1048.95C4736.33 1055.3 4724.29 1061.75 4707.94 1067.25L4713.99 1085.26L4720.03 1103.27C4739.02 1096.89 4755.86 1088.52 4768.33 1078.05C4780.72 1067.65 4790.76 1053.38 4790.69 1035.69L4771.69 1035.77ZM4713.99 1085.26L4700.86 1071.52C4696.52 1075.67 4686.33 1081.09 4669.55 1085.36C4653.38 1089.47 4633.16 1092 4610.96 1092V1111V1130C4635.86 1130 4659.27 1127.18 4678.92 1122.18C4697.93 1117.35 4715.71 1109.89 4727.11 1098.99L4713.99 1085.26ZM4610.96 1111L4610.96 1092C4589.01 1092 4568.98 1089.53 4552.9 1085.49C4536.25 1081.31 4525.91 1075.98 4521.31 1071.76L4508.46 1085.75L4495.61 1099.74C4507.11 1110.31 4524.73 1117.6 4543.66 1122.35C4563.16 1127.24 4586.33 1130 4610.96 1130L4610.96 1111ZM4508.46 1085.75L4514.43 1067.71C4498.13 1062.32 4486.11 1055.95 4478.54 1049.66C4470.88 1043.3 4469.7 1038.78 4469.69 1036.64L4450.69 1036.71L4431.69 1036.79C4431.76 1054.41 4441.85 1068.58 4454.25 1078.89C4466.73 1089.26 4483.56 1097.52 4502.49 1103.79L4508.46 1085.75ZM4450.69 1036.71L4469.69 1036.64C4469.69 1034.46 4470.88 1029.78 4478.91 1023.18C4486.82 1016.68 4499.37 1010.12 4516.31 1004.62L4510.44 986.55L4504.57 968.48C4485 974.839 4467.63 983.263 4454.78 993.823C4442.04 1004.29 4431.62 1018.76 4431.69 1036.79L4450.69 1036.71ZM4510.44 986.55L4522.36 1001.34C4527.8 996.96 4538.59 991.918 4554.78 988.049C4570.54 984.285 4589.87 982 4610.96 982L4610.96 963L4610.96 944C4587.28 944 4564.95 946.55 4545.95 951.089C4527.38 955.525 4510.3 962.258 4498.51 971.759L4510.44 986.55Z"
                  fill="black"
                  mask="url(#path-154-inside-66_17_636)"
                />
                <mask id="path-156-inside-67_17_636" fill="white">
                  <path d="M4610.96 1089C4654.61 1089 4692.33 1098.19 4710.15 1111.52C4747.55 1123.15 4771.61 1141.3 4771.69 1161.77C4771.77 1181.6 4749.32 1199.39 4713.98 1211.26C4698.24 1226.3 4658.05 1237 4610.96 1237C4564.38 1237 4524.56 1226.54 4508.46 1211.75C4473.22 1200.09 4450.77 1182.48 4450.69 1162.71C4450.61 1142.51 4473.93 1124.41 4510.44 1112.55C4527.65 1098.67 4566.19 1089 4610.96 1089Z" />
                </mask>
                <path
                  d="M4610.96 1089C4654.61 1089 4692.33 1098.19 4710.15 1111.52C4747.55 1123.15 4771.61 1141.3 4771.69 1161.77C4771.77 1181.6 4749.32 1199.39 4713.98 1211.26C4698.24 1226.3 4658.05 1237 4610.96 1237C4564.38 1237 4524.56 1226.54 4508.46 1211.75C4473.22 1200.09 4450.77 1182.48 4450.69 1162.71C4450.61 1142.51 4473.93 1124.41 4510.44 1112.55C4527.65 1098.67 4566.19 1089 4610.96 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M4610.96 1089L4610.96 1070H4610.96V1089ZM4710.15 1111.52L4698.77 1126.73L4701.39 1128.69L4704.51 1129.66L4710.15 1111.52ZM4771.69 1161.77L4790.69 1161.69L4790.69 1161.69L4771.69 1161.77ZM4713.98 1211.26L4707.93 1193.25L4703.92 1194.6L4700.86 1197.52L4713.98 1211.26ZM4610.96 1237L4610.96 1256H4610.96L4610.96 1237ZM4508.46 1211.75L4521.31 1197.76L4518.31 1195L4514.43 1193.71L4508.46 1211.75ZM4450.69 1162.71L4431.69 1162.79L4431.69 1162.79L4450.69 1162.71ZM4510.44 1112.55L4516.31 1130.62L4519.64 1129.54L4522.36 1127.34L4510.44 1112.55ZM4610.96 1089L4610.96 1108C4631.52 1108 4650.41 1110.17 4665.96 1113.77C4681.87 1117.46 4692.86 1122.31 4698.77 1126.73L4710.15 1111.52L4721.53 1096.3C4709.62 1087.39 4692.85 1080.99 4674.53 1076.75C4655.85 1072.42 4634.05 1070 4610.96 1070L4610.96 1089ZM4710.15 1111.52L4704.51 1129.66C4721.89 1135.06 4734.84 1141.61 4743.06 1148.17C4751.4 1154.84 4752.69 1159.63 4752.69 1161.84L4771.69 1161.77L4790.69 1161.69C4790.62 1143.44 4779.83 1128.92 4766.78 1118.49C4753.59 1107.95 4735.81 1099.6 4715.79 1093.37L4710.15 1111.52ZM4771.69 1161.77L4752.69 1161.84C4752.7 1163.98 4751.56 1168.52 4743.9 1174.95C4736.33 1181.3 4724.29 1187.75 4707.93 1193.25L4713.98 1211.26L4720.03 1229.27C4739.02 1222.89 4755.86 1214.52 4768.33 1204.05C4780.72 1193.66 4790.76 1179.38 4790.69 1161.69L4771.69 1161.77ZM4713.98 1211.26L4700.86 1197.52C4696.52 1201.67 4686.33 1207.09 4669.54 1211.36C4653.38 1215.47 4633.16 1218 4610.96 1218L4610.96 1237L4610.96 1256C4635.86 1256 4659.27 1253.18 4678.91 1248.18C4697.93 1243.35 4715.71 1235.89 4727.11 1224.99L4713.98 1211.26ZM4610.96 1237V1218C4589.01 1218 4568.98 1215.53 4552.9 1211.49C4536.25 1207.31 4525.91 1201.98 4521.31 1197.76L4508.46 1211.75L4495.61 1225.75C4507.11 1236.31 4524.73 1243.6 4543.66 1248.35C4563.16 1253.24 4586.33 1256 4610.96 1256V1237ZM4508.46 1211.75L4514.43 1193.71C4498.13 1188.32 4486.11 1181.95 4478.54 1175.66C4470.88 1169.3 4469.7 1164.78 4469.69 1162.64L4450.69 1162.71L4431.69 1162.79C4431.76 1180.42 4441.85 1194.58 4454.25 1204.89C4466.73 1215.26 4483.56 1223.52 4502.49 1229.79L4508.46 1211.75ZM4450.69 1162.71L4469.69 1162.64C4469.69 1160.46 4470.88 1155.78 4478.91 1149.18C4486.82 1142.68 4499.37 1136.12 4516.31 1130.62L4510.44 1112.55L4504.57 1094.48C4485 1100.84 4467.63 1109.26 4454.78 1119.82C4442.04 1130.29 4431.62 1144.76 4431.69 1162.79L4450.69 1162.71ZM4510.44 1112.55L4522.36 1127.34C4527.8 1122.96 4538.58 1117.92 4554.78 1114.05C4570.54 1110.28 4589.87 1108 4610.96 1108V1089V1070C4587.28 1070 4564.95 1072.55 4545.95 1077.09C4527.38 1081.53 4510.29 1088.26 4498.51 1097.76L4510.44 1112.55Z"
                  fill="black"
                  mask="url(#path-156-inside-67_17_636)"
                />
                <mask id="path-158-inside-68_17_636" fill="white">
                  <path d="M4610.96 1215C4654.61 1215 4692.33 1224.19 4710.15 1237.52C4747.55 1249.15 4771.61 1267.3 4771.69 1287.77C4771.77 1307.6 4749.32 1325.39 4713.98 1337.26C4698.24 1352.3 4658.05 1363 4610.96 1363C4564.38 1363 4524.56 1352.54 4508.46 1337.75C4473.22 1326.09 4450.77 1308.48 4450.69 1288.71C4450.61 1268.51 4473.93 1250.41 4510.44 1238.55C4527.65 1224.67 4566.19 1215 4610.96 1215Z" />
                </mask>
                <path
                  d="M4610.96 1215C4654.61 1215 4692.33 1224.19 4710.15 1237.52C4747.55 1249.15 4771.61 1267.3 4771.69 1287.77C4771.77 1307.6 4749.32 1325.39 4713.98 1337.26C4698.24 1352.3 4658.05 1363 4610.96 1363C4564.38 1363 4524.56 1352.54 4508.46 1337.75C4473.22 1326.09 4450.77 1308.48 4450.69 1288.71C4450.61 1268.51 4473.93 1250.41 4510.44 1238.55C4527.65 1224.67 4566.19 1215 4610.96 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M4610.96 1215L4610.96 1196H4610.96V1215ZM4710.15 1237.52L4698.77 1252.73L4701.39 1254.69L4704.51 1255.66L4710.15 1237.52ZM4771.69 1287.77L4790.69 1287.69L4790.69 1287.69L4771.69 1287.77ZM4713.98 1337.26L4707.93 1319.25L4703.92 1320.6L4700.86 1323.52L4713.98 1337.26ZM4610.96 1363L4610.96 1382H4610.96L4610.96 1363ZM4508.46 1337.75L4521.31 1323.76L4518.31 1321L4514.43 1319.71L4508.46 1337.75ZM4450.69 1288.71L4431.69 1288.79L4431.69 1288.79L4450.69 1288.71ZM4510.44 1238.55L4516.31 1256.62L4519.64 1255.54L4522.36 1253.34L4510.44 1238.55ZM4610.96 1215L4610.96 1234C4631.52 1234 4650.41 1236.17 4665.96 1239.77C4681.87 1243.46 4692.86 1248.31 4698.77 1252.73L4710.15 1237.52L4721.53 1222.3C4709.62 1213.39 4692.85 1206.99 4674.53 1202.75C4655.85 1198.42 4634.05 1196 4610.96 1196L4610.96 1215ZM4710.15 1237.52L4704.51 1255.66C4721.89 1261.06 4734.84 1267.61 4743.06 1274.17C4751.4 1280.84 4752.69 1285.63 4752.69 1287.84L4771.69 1287.77L4790.69 1287.69C4790.62 1269.44 4779.83 1254.92 4766.78 1244.49C4753.59 1233.95 4735.81 1225.6 4715.79 1219.37L4710.15 1237.52ZM4771.69 1287.77L4752.69 1287.84C4752.7 1289.98 4751.56 1294.52 4743.9 1300.95C4736.33 1307.3 4724.29 1313.75 4707.93 1319.25L4713.98 1337.26L4720.03 1355.27C4739.02 1348.89 4755.86 1340.52 4768.33 1330.05C4780.72 1319.66 4790.76 1305.38 4790.69 1287.69L4771.69 1287.77ZM4713.98 1337.26L4700.86 1323.52C4696.52 1327.67 4686.33 1333.09 4669.54 1337.36C4653.38 1341.47 4633.16 1344 4610.96 1344L4610.96 1363L4610.96 1382C4635.86 1382 4659.27 1379.18 4678.91 1374.18C4697.93 1369.35 4715.71 1361.89 4727.11 1350.99L4713.98 1337.26ZM4610.96 1363V1344C4589.01 1344 4568.98 1341.53 4552.9 1337.49C4536.25 1333.31 4525.91 1327.98 4521.31 1323.76L4508.46 1337.75L4495.61 1351.75C4507.11 1362.31 4524.73 1369.6 4543.66 1374.35C4563.16 1379.24 4586.33 1382 4610.96 1382V1363ZM4508.46 1337.75L4514.43 1319.71C4498.13 1314.32 4486.11 1307.95 4478.54 1301.66C4470.88 1295.3 4469.7 1290.78 4469.69 1288.64L4450.69 1288.71L4431.69 1288.79C4431.76 1306.42 4441.85 1320.58 4454.25 1330.89C4466.73 1341.26 4483.56 1349.52 4502.49 1355.79L4508.46 1337.75ZM4450.69 1288.71L4469.69 1288.64C4469.69 1286.46 4470.88 1281.78 4478.91 1275.18C4486.82 1268.68 4499.37 1262.12 4516.31 1256.62L4510.44 1238.55L4504.57 1220.48C4485 1226.84 4467.63 1235.26 4454.78 1245.82C4442.04 1256.29 4431.62 1270.76 4431.69 1288.79L4450.69 1288.71ZM4510.44 1238.55L4522.36 1253.34C4527.8 1248.96 4538.58 1243.92 4554.78 1240.05C4570.54 1236.28 4589.87 1234 4610.96 1234V1215V1196C4587.28 1196 4564.95 1198.55 4545.95 1203.09C4527.38 1207.53 4510.29 1214.26 4498.51 1223.76L4510.44 1238.55Z"
                  fill="black"
                  mask="url(#path-158-inside-68_17_636)"
                />
                <mask id="path-160-inside-69_17_636" fill="white">
                  <path d="M4610.96 1341C4654.61 1341 4692.33 1350.19 4710.15 1363.52C4747.55 1375.15 4771.61 1393.3 4771.69 1413.77C4771.77 1433.6 4749.32 1451.39 4713.98 1463.26C4698.24 1478.3 4658.05 1489 4610.96 1489C4564.38 1489 4524.56 1478.54 4508.46 1463.75C4473.22 1452.09 4450.77 1434.48 4450.69 1414.71C4450.61 1394.51 4473.93 1376.41 4510.44 1364.55C4527.65 1350.67 4566.19 1341 4610.96 1341Z" />
                </mask>
                <path
                  d="M4610.96 1341C4654.61 1341 4692.33 1350.19 4710.15 1363.52C4747.55 1375.15 4771.61 1393.3 4771.69 1413.77C4771.77 1433.6 4749.32 1451.39 4713.98 1463.26C4698.24 1478.3 4658.05 1489 4610.96 1489C4564.38 1489 4524.56 1478.54 4508.46 1463.75C4473.22 1452.09 4450.77 1434.48 4450.69 1414.71C4450.61 1394.51 4473.93 1376.41 4510.44 1364.55C4527.65 1350.67 4566.19 1341 4610.96 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M4610.96 1341L4610.96 1322H4610.96V1341ZM4710.15 1363.52L4698.77 1378.73L4701.39 1380.69L4704.51 1381.66L4710.15 1363.52ZM4771.69 1413.77L4790.69 1413.69L4790.69 1413.69L4771.69 1413.77ZM4713.98 1463.26L4707.93 1445.25L4703.92 1446.6L4700.86 1449.52L4713.98 1463.26ZM4610.96 1489L4610.96 1508H4610.96L4610.96 1489ZM4508.46 1463.75L4521.31 1449.76L4518.31 1447L4514.43 1445.71L4508.46 1463.75ZM4450.69 1414.71L4431.69 1414.79L4431.69 1414.79L4450.69 1414.71ZM4510.44 1364.55L4516.31 1382.62L4519.64 1381.54L4522.36 1379.34L4510.44 1364.55ZM4610.96 1341L4610.96 1360C4631.52 1360 4650.41 1362.17 4665.96 1365.77C4681.87 1369.46 4692.86 1374.31 4698.77 1378.73L4710.15 1363.52L4721.53 1348.3C4709.62 1339.39 4692.85 1332.99 4674.53 1328.75C4655.85 1324.42 4634.05 1322 4610.96 1322L4610.96 1341ZM4710.15 1363.52L4704.51 1381.66C4721.89 1387.06 4734.84 1393.61 4743.06 1400.17C4751.4 1406.84 4752.69 1411.63 4752.69 1413.84L4771.69 1413.77L4790.69 1413.69C4790.62 1395.44 4779.83 1380.92 4766.78 1370.49C4753.59 1359.95 4735.81 1351.6 4715.79 1345.37L4710.15 1363.52ZM4771.69 1413.77L4752.69 1413.84C4752.7 1415.98 4751.56 1420.52 4743.9 1426.95C4736.33 1433.3 4724.29 1439.75 4707.93 1445.25L4713.98 1463.26L4720.03 1481.27C4739.02 1474.89 4755.86 1466.52 4768.33 1456.05C4780.72 1445.66 4790.76 1431.38 4790.69 1413.69L4771.69 1413.77ZM4713.98 1463.26L4700.86 1449.52C4696.52 1453.67 4686.33 1459.09 4669.54 1463.36C4653.38 1467.47 4633.16 1470 4610.96 1470L4610.96 1489L4610.96 1508C4635.86 1508 4659.27 1505.18 4678.91 1500.18C4697.93 1495.35 4715.71 1487.89 4727.11 1476.99L4713.98 1463.26ZM4610.96 1489V1470C4589.01 1470 4568.98 1467.53 4552.9 1463.49C4536.25 1459.31 4525.91 1453.98 4521.31 1449.76L4508.46 1463.75L4495.61 1477.75C4507.11 1488.31 4524.73 1495.6 4543.66 1500.35C4563.16 1505.24 4586.33 1508 4610.96 1508V1489ZM4508.46 1463.75L4514.43 1445.71C4498.13 1440.32 4486.11 1433.95 4478.54 1427.66C4470.88 1421.3 4469.7 1416.78 4469.69 1414.64L4450.69 1414.71L4431.69 1414.79C4431.76 1432.42 4441.85 1446.58 4454.25 1456.89C4466.73 1467.26 4483.56 1475.52 4502.49 1481.79L4508.46 1463.75ZM4450.69 1414.71L4469.69 1414.64C4469.69 1412.46 4470.88 1407.78 4478.91 1401.18C4486.82 1394.68 4499.37 1388.12 4516.31 1382.62L4510.44 1364.55L4504.57 1346.48C4485 1352.84 4467.63 1361.26 4454.78 1371.82C4442.04 1382.29 4431.62 1396.76 4431.69 1414.79L4450.69 1414.71ZM4510.44 1364.55L4522.36 1379.34C4527.8 1374.96 4538.58 1369.92 4554.78 1366.05C4570.54 1362.28 4589.87 1360 4610.96 1360V1341V1322C4587.28 1322 4564.95 1324.55 4545.95 1329.09C4527.38 1333.53 4510.29 1340.26 4498.51 1349.76L4510.44 1364.55Z"
                  fill="black"
                  mask="url(#path-160-inside-69_17_636)"
                />
                <mask id="path-162-inside-70_17_636" fill="white">
                  <path d="M4610.96 247C4654.61 247 4692.33 256.191 4710.15 269.516C4747.55 281.148 4771.61 299.304 4771.69 319.769C4771.77 339.598 4749.32 357.39 4713.98 369.258C4698.24 384.303 4658.05 395 4610.96 395C4564.38 395 4524.56 384.537 4508.46 369.752C4473.22 358.091 4450.77 340.48 4450.69 320.713C4450.61 300.506 4473.93 282.412 4510.44 270.55C4527.65 256.669 4566.19 247 4610.96 247Z" />
                </mask>
                <path
                  d="M4610.96 247C4654.61 247 4692.33 256.191 4710.15 269.516C4747.55 281.148 4771.61 299.304 4771.69 319.769C4771.77 339.598 4749.32 357.39 4713.98 369.258C4698.24 384.303 4658.05 395 4610.96 395C4564.38 395 4524.56 384.537 4508.46 369.752C4473.22 358.091 4450.77 340.48 4450.69 320.713C4450.61 300.506 4473.93 282.412 4510.44 270.55C4527.65 256.669 4566.19 247 4610.96 247Z"
                  fill="#6B4747"
                />
                <path
                  d="M4610.96 247L4610.96 228L4610.96 228L4610.96 247ZM4710.15 269.516L4698.77 284.731L4701.39 286.688L4704.51 287.658L4710.15 269.516ZM4771.69 319.769L4790.69 319.694L4790.69 319.694L4771.69 319.769ZM4713.98 369.258L4707.94 351.247L4703.92 352.595L4700.86 355.523L4713.98 369.258ZM4610.96 395L4610.96 414H4610.96V395ZM4508.46 369.752L4521.31 355.759L4518.31 352.997L4514.43 351.714L4508.46 369.752ZM4450.69 320.713L4431.69 320.788L4431.69 320.788L4450.69 320.713ZM4510.44 270.55L4516.31 288.62L4519.64 287.538L4522.36 285.341L4510.44 270.55ZM4610.96 247V266C4631.52 266 4650.41 268.171 4665.96 271.771C4681.87 275.456 4692.86 280.311 4698.77 284.731L4710.15 269.516L4721.53 254.301C4709.62 245.395 4692.85 238.993 4674.53 234.751C4655.85 230.425 4634.05 228 4610.96 228V247ZM4710.15 269.516L4704.51 287.658C4721.89 293.064 4734.84 299.61 4743.06 306.173C4751.4 312.844 4752.68 317.631 4752.69 319.844L4771.69 319.769L4790.69 319.694C4790.62 301.441 4779.83 286.918 4766.78 276.487C4753.59 265.947 4735.81 257.599 4715.79 251.373L4710.15 269.516ZM4771.69 319.769L4752.69 319.843C4752.7 321.984 4751.56 326.522 4743.9 332.945C4736.33 339.3 4724.29 345.755 4707.94 351.247L4713.98 369.258L4720.03 387.269C4739.02 380.893 4755.86 372.518 4768.33 362.052C4780.72 351.655 4790.76 337.382 4790.69 319.694L4771.69 319.769ZM4713.98 369.258L4700.86 355.523C4696.52 359.67 4686.33 365.086 4669.54 369.357C4653.38 373.47 4633.16 376 4610.96 376V395V414C4635.86 414 4659.27 411.182 4678.91 406.184C4697.93 401.345 4715.71 393.89 4727.11 382.993L4713.98 369.258ZM4610.96 395L4610.96 376C4589.01 376 4568.98 373.526 4552.9 369.492C4536.25 365.313 4525.91 359.978 4521.31 355.759L4508.46 369.752L4495.61 383.745C4507.11 394.31 4524.73 401.6 4543.65 406.349C4563.16 411.243 4586.33 414 4610.96 414L4610.96 395ZM4508.46 369.752L4514.43 351.714C4498.13 346.32 4486.11 339.95 4478.53 333.658C4470.88 327.299 4469.7 322.779 4469.69 320.638L4450.69 320.713L4431.69 320.788C4431.76 338.414 4441.85 352.583 4454.25 362.886C4466.73 373.258 4483.55 381.523 4502.49 387.79L4508.46 369.752ZM4450.69 320.713L4469.69 320.638C4469.68 318.459 4470.88 313.777 4478.91 307.182C4486.82 300.677 4499.37 294.123 4516.31 288.62L4510.44 270.55L4504.57 252.48C4485 258.839 4467.63 267.263 4454.78 277.823C4442.04 288.291 4431.62 302.76 4431.69 320.788L4450.69 320.713ZM4510.44 270.55L4522.36 285.341C4527.8 280.96 4538.58 275.918 4554.78 272.049C4570.54 268.285 4589.87 266 4610.96 266L4610.96 247L4610.96 228C4587.28 228 4564.95 230.55 4545.95 235.089C4527.38 239.525 4510.29 246.258 4498.51 255.759L4510.44 270.55Z"
                  fill="black"
                  mask="url(#path-162-inside-70_17_636)"
                />
                <rect
                  x="4913.72"
                  y="247"
                  width="57"
                  height="1270"
                  fill="black"
                />
                <mask id="path-165-inside-71_17_636" fill="white">
                  <path d="M4949.99 963C4993.64 963 5031.36 972.191 5049.18 985.516C5086.58 997.148 5110.64 1015.3 5110.72 1035.77C5110.8 1055.6 5088.35 1073.39 5053.01 1085.26C5037.27 1100.3 4997.08 1111 4949.99 1111C4903.41 1111 4863.59 1100.54 4847.49 1085.75C4812.25 1074.09 4789.8 1056.48 4789.72 1036.71C4789.64 1016.51 4812.96 998.412 4849.47 986.55C4866.68 972.669 4905.22 963 4949.99 963Z" />
                </mask>
                <path
                  d="M4949.99 963C4993.64 963 5031.36 972.191 5049.18 985.516C5086.58 997.148 5110.64 1015.3 5110.72 1035.77C5110.8 1055.6 5088.35 1073.39 5053.01 1085.26C5037.27 1100.3 4997.08 1111 4949.99 1111C4903.41 1111 4863.59 1100.54 4847.49 1085.75C4812.25 1074.09 4789.8 1056.48 4789.72 1036.71C4789.64 1016.51 4812.96 998.412 4849.47 986.55C4866.68 972.669 4905.22 963 4949.99 963Z"
                  fill="#6B4747"
                />
                <path
                  d="M4949.99 963L4949.99 944L4949.99 944L4949.99 963ZM5049.18 985.516L5037.8 1000.73L5040.42 1002.69L5043.54 1003.66L5049.18 985.516ZM5110.72 1035.77L5129.72 1035.69L5129.72 1035.69L5110.72 1035.77ZM5053.01 1085.26L5046.97 1067.25L5042.95 1068.6L5039.89 1071.52L5053.01 1085.26ZM4949.99 1111L4949.99 1130H4949.99V1111ZM4847.49 1085.75L4860.34 1071.76L4857.34 1069L4853.46 1067.71L4847.49 1085.75ZM4789.72 1036.71L4770.72 1036.79L4770.72 1036.79L4789.72 1036.71ZM4849.47 986.55L4855.34 1004.62L4858.67 1003.54L4861.39 1001.34L4849.47 986.55ZM4949.99 963V982C4970.55 982 4989.44 984.171 5004.99 987.771C5020.9 991.456 5031.89 996.311 5037.8 1000.73L5049.18 985.516L5060.56 970.301C5048.65 961.395 5031.88 954.993 5013.56 950.751C4994.88 946.425 4973.08 944 4949.99 944V963ZM5049.18 985.516L5043.54 1003.66C5060.92 1009.06 5073.87 1015.61 5082.09 1022.17C5090.43 1028.84 5091.72 1033.63 5091.72 1035.84L5110.72 1035.77L5129.72 1035.69C5129.65 1017.44 5118.86 1002.92 5105.81 992.487C5092.62 981.947 5074.84 973.599 5054.82 967.373L5049.18 985.516ZM5110.72 1035.77L5091.72 1035.84C5091.73 1037.98 5090.59 1042.52 5082.93 1048.95C5075.36 1055.3 5063.32 1061.75 5046.97 1067.25L5053.01 1085.26L5059.06 1103.27C5078.05 1096.89 5094.89 1088.52 5107.36 1078.05C5119.75 1067.65 5129.79 1053.38 5129.72 1035.69L5110.72 1035.77ZM5053.01 1085.26L5039.89 1071.52C5035.55 1075.67 5025.36 1081.09 5008.57 1085.36C4992.41 1089.47 4972.19 1092 4949.99 1092V1111V1130C4974.89 1130 4998.3 1127.18 5017.94 1122.18C5036.96 1117.35 5054.74 1109.89 5066.14 1098.99L5053.01 1085.26ZM4949.99 1111L4949.99 1092C4928.04 1092 4908.01 1089.53 4891.93 1085.49C4875.28 1081.31 4864.94 1075.98 4860.34 1071.76L4847.49 1085.75L4834.64 1099.74C4846.14 1110.31 4863.76 1117.6 4882.69 1122.35C4902.19 1127.24 4925.36 1130 4949.99 1130L4949.99 1111ZM4847.49 1085.75L4853.46 1067.71C4837.16 1062.32 4825.14 1055.95 4817.56 1049.66C4809.91 1043.3 4808.73 1038.78 4808.72 1036.64L4789.72 1036.71L4770.72 1036.79C4770.79 1054.41 4780.88 1068.58 4793.28 1078.89C4805.76 1089.26 4822.59 1097.52 4841.52 1103.79L4847.49 1085.75ZM4789.72 1036.71L4808.72 1036.64C4808.72 1034.46 4809.91 1029.78 4817.94 1023.18C4825.85 1016.68 4838.4 1010.12 4855.34 1004.62L4849.47 986.55L4843.6 968.48C4824.03 974.839 4806.66 983.263 4793.81 993.823C4781.07 1004.29 4770.65 1018.76 4770.72 1036.79L4789.72 1036.71ZM4849.47 986.55L4861.39 1001.34C4866.83 996.96 4877.62 991.918 4893.81 988.049C4909.57 984.285 4928.9 982 4949.99 982L4949.99 963L4949.99 944C4926.31 944 4903.98 946.55 4884.98 951.089C4866.41 955.525 4849.33 962.258 4837.54 971.759L4849.47 986.55Z"
                  fill="black"
                  mask="url(#path-165-inside-71_17_636)"
                />
                <mask id="path-167-inside-72_17_636" fill="white">
                  <path d="M4949.99 1089C4993.64 1089 5031.36 1098.19 5049.18 1111.52C5086.58 1123.15 5110.64 1141.3 5110.72 1161.77C5110.8 1181.6 5088.35 1199.39 5053.01 1211.26C5037.27 1226.3 4997.08 1237 4949.99 1237C4903.41 1237 4863.59 1226.54 4847.49 1211.75C4812.25 1200.09 4789.8 1182.48 4789.72 1162.71C4789.64 1142.51 4812.96 1124.41 4849.47 1112.55C4866.68 1098.67 4905.22 1089 4949.99 1089Z" />
                </mask>
                <path
                  d="M4949.99 1089C4993.64 1089 5031.36 1098.19 5049.18 1111.52C5086.58 1123.15 5110.64 1141.3 5110.72 1161.77C5110.8 1181.6 5088.35 1199.39 5053.01 1211.26C5037.27 1226.3 4997.08 1237 4949.99 1237C4903.41 1237 4863.59 1226.54 4847.49 1211.75C4812.25 1200.09 4789.8 1182.48 4789.72 1162.71C4789.64 1142.51 4812.96 1124.41 4849.47 1112.55C4866.68 1098.67 4905.22 1089 4949.99 1089Z"
                  fill="#6B4747"
                />
                <path
                  d="M4949.99 1089L4949.99 1070H4949.99V1089ZM5049.18 1111.52L5037.8 1126.73L5040.42 1128.69L5043.54 1129.66L5049.18 1111.52ZM5110.72 1161.77L5129.72 1161.69L5129.72 1161.69L5110.72 1161.77ZM5053.01 1211.26L5046.96 1193.25L5042.95 1194.6L5039.89 1197.52L5053.01 1211.26ZM4949.99 1237L4949.99 1256H4949.99L4949.99 1237ZM4847.49 1211.75L4860.34 1197.76L4857.34 1195L4853.46 1193.71L4847.49 1211.75ZM4789.72 1162.71L4770.72 1162.79L4770.72 1162.79L4789.72 1162.71ZM4849.47 1112.55L4855.34 1130.62L4858.67 1129.54L4861.39 1127.34L4849.47 1112.55ZM4949.99 1089L4949.99 1108C4970.55 1108 4989.44 1110.17 5004.99 1113.77C5020.9 1117.46 5031.89 1122.31 5037.8 1126.73L5049.18 1111.52L5060.56 1096.3C5048.65 1087.39 5031.88 1080.99 5013.56 1076.75C4994.88 1072.42 4973.08 1070 4949.99 1070L4949.99 1089ZM5049.18 1111.52L5043.54 1129.66C5060.92 1135.06 5073.87 1141.61 5082.09 1148.17C5090.43 1154.84 5091.72 1159.63 5091.72 1161.84L5110.72 1161.77L5129.72 1161.69C5129.65 1143.44 5118.86 1128.92 5105.81 1118.49C5092.62 1107.95 5074.84 1099.6 5054.82 1093.37L5049.18 1111.52ZM5110.72 1161.77L5091.72 1161.84C5091.73 1163.98 5090.59 1168.52 5082.93 1174.95C5075.36 1181.3 5063.32 1187.75 5046.96 1193.25L5053.01 1211.26L5059.06 1229.27C5078.05 1222.89 5094.89 1214.52 5107.36 1204.05C5119.75 1193.66 5129.79 1179.38 5129.72 1161.69L5110.72 1161.77ZM5053.01 1211.26L5039.89 1197.52C5035.55 1201.67 5025.36 1207.09 5008.57 1211.36C4992.41 1215.47 4972.19 1218 4949.99 1218L4949.99 1237L4949.99 1256C4974.89 1256 4998.3 1253.18 5017.94 1248.18C5036.96 1243.35 5054.74 1235.89 5066.14 1224.99L5053.01 1211.26ZM4949.99 1237V1218C4928.04 1218 4908.01 1215.53 4891.93 1211.49C4875.28 1207.31 4864.94 1201.98 4860.34 1197.76L4847.49 1211.75L4834.64 1225.75C4846.14 1236.31 4863.76 1243.6 4882.69 1248.35C4902.19 1253.24 4925.36 1256 4949.99 1256V1237ZM4847.49 1211.75L4853.46 1193.71C4837.16 1188.32 4825.14 1181.95 4817.56 1175.66C4809.91 1169.3 4808.73 1164.78 4808.72 1162.64L4789.72 1162.71L4770.72 1162.79C4770.79 1180.42 4780.88 1194.58 4793.28 1204.89C4805.76 1215.26 4822.59 1223.52 4841.52 1229.79L4847.49 1211.75ZM4789.72 1162.71L4808.72 1162.64C4808.72 1160.46 4809.91 1155.78 4817.94 1149.18C4825.85 1142.68 4838.4 1136.12 4855.34 1130.62L4849.47 1112.55L4843.6 1094.48C4824.03 1100.84 4806.66 1109.26 4793.81 1119.82C4781.07 1130.29 4770.65 1144.76 4770.72 1162.79L4789.72 1162.71ZM4849.47 1112.55L4861.39 1127.34C4866.83 1122.96 4877.61 1117.92 4893.81 1114.05C4909.57 1110.28 4928.9 1108 4949.99 1108V1089V1070C4926.31 1070 4903.98 1072.55 4884.98 1077.09C4866.41 1081.53 4849.32 1088.26 4837.54 1097.76L4849.47 1112.55Z"
                  fill="black"
                  mask="url(#path-167-inside-72_17_636)"
                />
                <mask id="path-169-inside-73_17_636" fill="white">
                  <path d="M4949.99 1215C4993.64 1215 5031.36 1224.19 5049.18 1237.52C5086.58 1249.15 5110.64 1267.3 5110.72 1287.77C5110.8 1307.6 5088.35 1325.39 5053.01 1337.26C5037.27 1352.3 4997.08 1363 4949.99 1363C4903.41 1363 4863.59 1352.54 4847.49 1337.75C4812.25 1326.09 4789.8 1308.48 4789.72 1288.71C4789.64 1268.51 4812.96 1250.41 4849.47 1238.55C4866.68 1224.67 4905.22 1215 4949.99 1215Z" />
                </mask>
                <path
                  d="M4949.99 1215C4993.64 1215 5031.36 1224.19 5049.18 1237.52C5086.58 1249.15 5110.64 1267.3 5110.72 1287.77C5110.8 1307.6 5088.35 1325.39 5053.01 1337.26C5037.27 1352.3 4997.08 1363 4949.99 1363C4903.41 1363 4863.59 1352.54 4847.49 1337.75C4812.25 1326.09 4789.8 1308.48 4789.72 1288.71C4789.64 1268.51 4812.96 1250.41 4849.47 1238.55C4866.68 1224.67 4905.22 1215 4949.99 1215Z"
                  fill="#6B4747"
                />
                <path
                  d="M4949.99 1215L4949.99 1196H4949.99V1215ZM5049.18 1237.52L5037.8 1252.73L5040.42 1254.69L5043.54 1255.66L5049.18 1237.52ZM5110.72 1287.77L5129.72 1287.69L5129.72 1287.69L5110.72 1287.77ZM5053.01 1337.26L5046.96 1319.25L5042.95 1320.6L5039.89 1323.52L5053.01 1337.26ZM4949.99 1363L4949.99 1382H4949.99L4949.99 1363ZM4847.49 1337.75L4860.34 1323.76L4857.34 1321L4853.46 1319.71L4847.49 1337.75ZM4789.72 1288.71L4770.72 1288.79L4770.72 1288.79L4789.72 1288.71ZM4849.47 1238.55L4855.34 1256.62L4858.67 1255.54L4861.39 1253.34L4849.47 1238.55ZM4949.99 1215L4949.99 1234C4970.55 1234 4989.44 1236.17 5004.99 1239.77C5020.9 1243.46 5031.89 1248.31 5037.8 1252.73L5049.18 1237.52L5060.56 1222.3C5048.65 1213.39 5031.88 1206.99 5013.56 1202.75C4994.88 1198.42 4973.08 1196 4949.99 1196L4949.99 1215ZM5049.18 1237.52L5043.54 1255.66C5060.92 1261.06 5073.87 1267.61 5082.09 1274.17C5090.43 1280.84 5091.72 1285.63 5091.72 1287.84L5110.72 1287.77L5129.72 1287.69C5129.65 1269.44 5118.86 1254.92 5105.81 1244.49C5092.62 1233.95 5074.84 1225.6 5054.82 1219.37L5049.18 1237.52ZM5110.72 1287.77L5091.72 1287.84C5091.73 1289.98 5090.59 1294.52 5082.93 1300.95C5075.36 1307.3 5063.32 1313.75 5046.96 1319.25L5053.01 1337.26L5059.06 1355.27C5078.05 1348.89 5094.89 1340.52 5107.36 1330.05C5119.75 1319.66 5129.79 1305.38 5129.72 1287.69L5110.72 1287.77ZM5053.01 1337.26L5039.89 1323.52C5035.55 1327.67 5025.36 1333.09 5008.57 1337.36C4992.41 1341.47 4972.19 1344 4949.99 1344L4949.99 1363L4949.99 1382C4974.89 1382 4998.3 1379.18 5017.94 1374.18C5036.96 1369.35 5054.74 1361.89 5066.14 1350.99L5053.01 1337.26ZM4949.99 1363V1344C4928.04 1344 4908.01 1341.53 4891.93 1337.49C4875.28 1333.31 4864.94 1327.98 4860.34 1323.76L4847.49 1337.75L4834.64 1351.75C4846.14 1362.31 4863.76 1369.6 4882.69 1374.35C4902.19 1379.24 4925.36 1382 4949.99 1382V1363ZM4847.49 1337.75L4853.46 1319.71C4837.16 1314.32 4825.14 1307.95 4817.56 1301.66C4809.91 1295.3 4808.73 1290.78 4808.72 1288.64L4789.72 1288.71L4770.72 1288.79C4770.79 1306.42 4780.88 1320.58 4793.28 1330.89C4805.76 1341.26 4822.59 1349.52 4841.52 1355.79L4847.49 1337.75ZM4789.72 1288.71L4808.72 1288.64C4808.72 1286.46 4809.91 1281.78 4817.94 1275.18C4825.85 1268.68 4838.4 1262.12 4855.34 1256.62L4849.47 1238.55L4843.6 1220.48C4824.03 1226.84 4806.66 1235.26 4793.81 1245.82C4781.07 1256.29 4770.65 1270.76 4770.72 1288.79L4789.72 1288.71ZM4849.47 1238.55L4861.39 1253.34C4866.83 1248.96 4877.61 1243.92 4893.81 1240.05C4909.57 1236.28 4928.9 1234 4949.99 1234V1215V1196C4926.31 1196 4903.98 1198.55 4884.98 1203.09C4866.41 1207.53 4849.32 1214.26 4837.54 1223.76L4849.47 1238.55Z"
                  fill="black"
                  mask="url(#path-169-inside-73_17_636)"
                />
                <mask id="path-171-inside-74_17_636" fill="white">
                  <path d="M4949.99 1341C4993.64 1341 5031.36 1350.19 5049.18 1363.52C5086.58 1375.15 5110.64 1393.3 5110.72 1413.77C5110.8 1433.6 5088.35 1451.39 5053.01 1463.26C5037.27 1478.3 4997.08 1489 4949.99 1489C4903.41 1489 4863.59 1478.54 4847.49 1463.75C4812.25 1452.09 4789.8 1434.48 4789.72 1414.71C4789.64 1394.51 4812.96 1376.41 4849.47 1364.55C4866.68 1350.67 4905.22 1341 4949.99 1341Z" />
                </mask>
                <path
                  d="M4949.99 1341C4993.64 1341 5031.36 1350.19 5049.18 1363.52C5086.58 1375.15 5110.64 1393.3 5110.72 1413.77C5110.8 1433.6 5088.35 1451.39 5053.01 1463.26C5037.27 1478.3 4997.08 1489 4949.99 1489C4903.41 1489 4863.59 1478.54 4847.49 1463.75C4812.25 1452.09 4789.8 1434.48 4789.72 1414.71C4789.64 1394.51 4812.96 1376.41 4849.47 1364.55C4866.68 1350.67 4905.22 1341 4949.99 1341Z"
                  fill="#6B4747"
                />
                <path
                  d="M4949.99 1341L4949.99 1322H4949.99V1341ZM5049.18 1363.52L5037.8 1378.73L5040.42 1380.69L5043.54 1381.66L5049.18 1363.52ZM5110.72 1413.77L5129.72 1413.69L5129.72 1413.69L5110.72 1413.77ZM5053.01 1463.26L5046.96 1445.25L5042.95 1446.6L5039.89 1449.52L5053.01 1463.26ZM4949.99 1489L4949.99 1508H4949.99L4949.99 1489ZM4847.49 1463.75L4860.34 1449.76L4857.34 1447L4853.46 1445.71L4847.49 1463.75ZM4789.72 1414.71L4770.72 1414.79L4770.72 1414.79L4789.72 1414.71ZM4849.47 1364.55L4855.34 1382.62L4858.67 1381.54L4861.39 1379.34L4849.47 1364.55ZM4949.99 1341L4949.99 1360C4970.55 1360 4989.44 1362.17 5004.99 1365.77C5020.9 1369.46 5031.89 1374.31 5037.8 1378.73L5049.18 1363.52L5060.56 1348.3C5048.65 1339.39 5031.88 1332.99 5013.56 1328.75C4994.88 1324.42 4973.08 1322 4949.99 1322L4949.99 1341ZM5049.18 1363.52L5043.54 1381.66C5060.92 1387.06 5073.87 1393.61 5082.09 1400.17C5090.43 1406.84 5091.72 1411.63 5091.72 1413.84L5110.72 1413.77L5129.72 1413.69C5129.65 1395.44 5118.86 1380.92 5105.81 1370.49C5092.62 1359.95 5074.84 1351.6 5054.82 1345.37L5049.18 1363.52ZM5110.72 1413.77L5091.72 1413.84C5091.73 1415.98 5090.59 1420.52 5082.93 1426.95C5075.36 1433.3 5063.32 1439.75 5046.96 1445.25L5053.01 1463.26L5059.06 1481.27C5078.05 1474.89 5094.89 1466.52 5107.36 1456.05C5119.75 1445.66 5129.79 1431.38 5129.72 1413.69L5110.72 1413.77ZM5053.01 1463.26L5039.89 1449.52C5035.55 1453.67 5025.36 1459.09 5008.57 1463.36C4992.41 1467.47 4972.19 1470 4949.99 1470L4949.99 1489L4949.99 1508C4974.89 1508 4998.3 1505.18 5017.94 1500.18C5036.96 1495.35 5054.74 1487.89 5066.14 1476.99L5053.01 1463.26ZM4949.99 1489V1470C4928.04 1470 4908.01 1467.53 4891.93 1463.49C4875.28 1459.31 4864.94 1453.98 4860.34 1449.76L4847.49 1463.75L4834.64 1477.75C4846.14 1488.31 4863.76 1495.6 4882.69 1500.35C4902.19 1505.24 4925.36 1508 4949.99 1508V1489ZM4847.49 1463.75L4853.46 1445.71C4837.16 1440.32 4825.14 1433.95 4817.56 1427.66C4809.91 1421.3 4808.73 1416.78 4808.72 1414.64L4789.72 1414.71L4770.72 1414.79C4770.79 1432.42 4780.88 1446.58 4793.28 1456.89C4805.76 1467.26 4822.59 1475.52 4841.52 1481.79L4847.49 1463.75ZM4789.72 1414.71L4808.72 1414.64C4808.72 1412.46 4809.91 1407.78 4817.94 1401.18C4825.85 1394.68 4838.4 1388.12 4855.34 1382.62L4849.47 1364.55L4843.6 1346.48C4824.03 1352.84 4806.66 1361.26 4793.81 1371.82C4781.07 1382.29 4770.65 1396.76 4770.72 1414.79L4789.72 1414.71ZM4849.47 1364.55L4861.39 1379.34C4866.83 1374.96 4877.61 1369.92 4893.81 1366.05C4909.57 1362.28 4928.9 1360 4949.99 1360V1341V1322C4926.31 1322 4903.98 1324.55 4884.98 1329.09C4866.41 1333.53 4849.32 1340.26 4837.54 1349.76L4849.47 1364.55Z"
                  fill="black"
                  mask="url(#path-171-inside-74_17_636)"
                />
                <mask id="path-173-inside-75_17_636" fill="white">
                  <path d="M4941.99 247C4985.64 247 5023.36 256.191 5041.18 269.516C5078.58 281.148 5102.64 299.304 5102.72 319.769C5102.8 339.598 5080.35 357.39 5045.01 369.258C5029.27 384.303 4989.08 395 4941.99 395C4895.41 395 4855.59 384.537 4839.49 369.752C4804.25 358.091 4781.8 340.48 4781.72 320.713C4781.64 300.506 4804.96 282.412 4841.47 270.55C4858.68 256.669 4897.22 247 4941.99 247Z" />
                </mask>
                <path
                  d="M4941.99 247C4985.64 247 5023.36 256.191 5041.18 269.516C5078.58 281.148 5102.64 299.304 5102.72 319.769C5102.8 339.598 5080.35 357.39 5045.01 369.258C5029.27 384.303 4989.08 395 4941.99 395C4895.41 395 4855.59 384.537 4839.49 369.752C4804.25 358.091 4781.8 340.48 4781.72 320.713C4781.64 300.506 4804.96 282.412 4841.47 270.55C4858.68 256.669 4897.22 247 4941.99 247Z"
                  fill="#6B4747"
                />
                <path
                  d="M4941.99 247L4941.99 228L4941.99 228L4941.99 247ZM5041.18 269.516L5029.8 284.731L5032.42 286.688L5035.54 287.658L5041.18 269.516ZM5102.72 319.769L5121.72 319.694L5121.72 319.694L5102.72 319.769ZM5045.01 369.258L5038.96 351.247L5034.95 352.595L5031.89 355.523L5045.01 369.258ZM4941.99 395L4941.99 414H4941.99V395ZM4839.49 369.752L4852.34 355.759L4849.34 352.997L4845.46 351.714L4839.49 369.752ZM4781.72 320.713L4762.72 320.788L4762.72 320.788L4781.72 320.713ZM4841.47 270.55L4847.34 288.62L4850.67 287.538L4853.39 285.341L4841.47 270.55ZM4941.99 247V266C4962.55 266 4981.44 268.171 4996.99 271.771C5012.9 275.456 5023.89 280.311 5029.8 284.731L5041.18 269.516L5052.56 254.301C5040.65 245.395 5023.88 238.993 5005.56 234.751C4986.88 230.425 4965.08 228 4941.99 228V247ZM5041.18 269.516L5035.54 287.658C5052.92 293.064 5065.87 299.61 5074.09 306.173C5082.43 312.844 5083.71 317.631 5083.72 319.844L5102.72 319.769L5121.72 319.694C5121.65 301.441 5110.86 286.918 5097.81 276.487C5084.62 265.947 5066.84 257.599 5046.82 251.373L5041.18 269.516ZM5102.72 319.769L5083.72 319.843C5083.73 321.984 5082.59 326.522 5074.93 332.945C5067.36 339.3 5055.32 345.755 5038.96 351.247L5045.01 369.258L5051.06 387.269C5070.05 380.893 5086.89 372.518 5099.36 362.052C5111.75 351.655 5121.79 337.382 5121.72 319.694L5102.72 319.769ZM5045.01 369.258L5031.89 355.523C5027.55 359.67 5017.36 365.086 5000.57 369.357C4984.41 373.47 4964.19 376 4941.99 376V395V414C4966.89 414 4990.3 411.182 5009.94 406.184C5028.96 401.345 5046.74 393.89 5058.14 382.993L5045.01 369.258ZM4941.99 395L4941.99 376C4920.04 376 4900.01 373.526 4883.93 369.492C4867.28 365.313 4856.94 359.978 4852.34 355.759L4839.49 369.752L4826.64 383.745C4838.14 394.31 4855.76 401.6 4874.68 406.349C4894.19 411.243 4917.36 414 4941.99 414L4941.99 395ZM4839.49 369.752L4845.46 351.714C4829.16 346.32 4817.14 339.95 4809.56 333.658C4801.91 327.299 4800.73 322.779 4800.72 320.638L4781.72 320.713L4762.72 320.788C4762.79 338.414 4772.88 352.583 4785.28 362.886C4797.76 373.258 4814.58 381.523 4833.52 387.79L4839.49 369.752ZM4781.72 320.713L4800.72 320.638C4800.71 318.459 4801.91 313.777 4809.94 307.182C4817.85 300.677 4830.4 294.123 4847.34 288.62L4841.47 270.55L4835.6 252.48C4816.03 258.839 4798.66 267.263 4785.81 277.823C4773.07 288.291 4762.65 302.76 4762.72 320.788L4781.72 320.713ZM4841.47 270.55L4853.39 285.341C4858.83 280.96 4869.61 275.918 4885.81 272.049C4901.57 268.285 4920.9 266 4941.99 266L4941.99 247L4941.99 228C4918.31 228 4895.98 230.55 4876.98 235.089C4858.41 239.525 4841.32 246.258 4829.54 255.759L4841.47 270.55Z"
                  fill="black"
                  mask="url(#path-173-inside-75_17_636)"
                />
                ye svg hai
              </svg>
                              {/* <p className="z-10 text-3xl">↓</p>
<p className="mt-[-7]">1 </p> */}
                        
              </div>
            <div className="inline  text-white text-2xl">
                {number}
            </div>
           
            <div className="inline absolute right-50 py-10  w-90">
                              to jo sabse beech me hai, usko 1,2,3,4 bol do. kyo kyoki shayad tum aage jake school ke tarike wale "manlo" pe chalonge to tumhare sath bas scam hoga, usse tum kuch seekh nahi paonge, 
                              varna phir vaise pharak nahi padhta tum is pure pe kisi bhi cheez ko kaisa bhi man sakte 
            </div>
            </div>
            


          </p>
        </div>
        <div className="grid grid-cols-3 gap-2 ">
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381727633066295528/image.png?ex=684891a2&is=68474022&hm=e4fe84091148d00c43f8f18fb7317e0eba00c97ac68eee9c595afd1c49bc7cdb&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381725199220871298/image.png?ex=68488f5e&is=68473dde&hm=7e15da0b90a3eed66dbd92d50db16518218271a81385aba3f91f86f354c14b82&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            className="size-90 rounded-2xl"
            src="https://media.discordapp.net/attachments/832226503303495682/1381727934351675616/image.png?ex=684891ea&is=6847406a&hm=2e3600e074d1efb1e516ca7950c17a45782ab739633a3fbacaa4d5468ae4a083&=&format=webp&quality=lossless"
            alt=""
          />
          <img
            src="https://media.discordapp.net/attachments/832226503303495682/1381725199652753570/image.png?ex=68488f5e&is=68473dde&hm=d4007efba941de3791567d581e98a226bb8c60dc312998505a49a800a7c5f3db&=&format=webp&quality=lossless&width=352&height=505"
            alt=""
          />
        </div>
      </div>

      <div className="p-20 mr-10 no-scrollbar  flex flex-col items-end   justify-end">
        a b c d e f g h i j k l m n o p q r s t u v w x y z<p></p>1 2 3 4 5 6 7
        8 9 10 0
        <p>
          ye yad karne ka koi matlab nahi hai kyoki ye ek british based
          ratafication hai jo tumhe kuch sikhaega nahi, jo digit hote hai vo bhi
          zaruri nahi ki 1-10 ho, 1-9 jaise vaise actually 16 bhi ho sakte hai
          kyoki ye bas ek calculative me madat karta hai ye koi zaruri nahi ki
          esa ho.{" "}
        </p>
        to actually jo bhi tum soch sakte vo socho . abhi agar in sabh ko yad
        karne baith jaonge to aage vo 1.1 1.2 1.3 2.99 1.999 esi cheeze le
        aayenge, or usse bolenge ki jo bhi tumne socha tha yad karte samay vo
        galat tha ye dekhlo ye to itna sara hai ab tum apna logic vaha kaise
        lagaonge. phir vo simple ratafication technique sikhate or tumhe chhodh
        dete madat nahi karte or uper se sare ke sare jo bekam cheeze hai vo
        seekhane lag jate to tum unhe reply bhi nahi de sakte clear wala. ab
        &lt;-10,000 &lt; -9999 &lt; -9998 &lt; -9997 &lt; -9997.3 &lt;
        -9997.4567893939585993944949494 &lt; -9996 &lt; -9991 &lt; -9990 &lt;
        -9023 &lt; -9000 &lt; -100 &lt; -10 &lt; -9 &lt; -8 &lt; -7 &lt; -6 &lt;
        -5 &lt; -4 &lt; -3 &lt; -2 &lt; -1 &lt; 0 &lt; 1 &lt; 2 &lt; 3 &lt; 4
        &lt; 5 &lt; 6 &lt; 7 &lt; 1000 &lt; 9999 &lt; 10,000 &lt; 100,00,000
        &lt;
        <p>
          to ab isme sochne ki zarurat nahi, dekh jo overall geopolitical world
          hai usme ye sabh ek cheez ko mimic karne ke liye bana hai, to inka
          actually ham alag tarike se hi use kar sakte to chalo karte hai{" "}
        </p>
        <div className="p-10 content-center relative grid grid-cols-1">
          <h1>Python</h1>
          <div>
            <pre className="w-10">
              var1 = "54" var4 = "32" var2 = 4 var3 = 36.7 # print(100 *
              str(int(var1) + int(var4)) ) # machine ne pani ko baraf banaya,
              kisi bhi cheez ko 1 2 3 4 me bana diya # print(100 * "Hello
              world\n") # bhai kisi cheez ko bhhot bar print karna hai to ye use
              kar """print("Enter your number") inpnum = input() # ye user se
              input print("You entered", int(inpnum)+10)""" """ str() int()
              float() """ # print(type(var1)) # machine ne variable(ye bas ek
              dibbe hai or usme saman) dekha # print("Enter first number") # n1
              = input() # print("Enter second number") # n2 = input() #
              print("Sum of these two numbers is", int(n1) + int(n2)) #
              print("Enter your number") # var8 = input() # print("Your 1st
              number is", var8) # print("Enter your number") # var7 = input() #
              print("Your 2nd number is", var7) # print("The ans is ", int(var8)
              + int(var7))
            </pre>
          </div>
          <div>
            {" "}
            <pre className="p-10 ">
              <code>
                {` anant = "anant is a good boy he is best programmer"
                  # print("Length is", len(anant))   # ye 0 ko 0 kar deta hai, matlab 1,2,3,4 ki jagaha counting 0,1,2,3,4 hogi, per esa kyo 0 to matlab kuch bhi nahi na to ese karna galat hai, to ye wala jo 0 hai isko 0 samajh mat kyoki ye to bas light ray hai computer me se aarahi or hame dikh rahi usko ab jaisa bhi define kardo. isliye 1,2,3,4 kuch kam ki cheeze nahi vo badal ke large scale dusari cheeze bhi kar sakte
                  ol = len(anant)   # 'len('a') hoga 0, len('ab') hoga 1' per isse pharak nahi padhta hone do jo bhi hai hame vaise bhi ye sabh khud ka banana hai agar usa aka british empire ke muh se bahar nikalna hai, 

                  print(anant[-1]) 
                  print(anant.replace(anant[-1], ""))
                  # print(anant[::])
                  # anant.replace()
                  # print(anant[0:4])  # it will give anan and not t because in python 0 will be include but 4 will not include
                  # print(anant[:20])  # if there is no num before : it mean it is 0
                  # print(anant[0:])  # if there is no num after : it mean whole string has been selected
                  # print(anant[:])  # it mean full string, see above and combine it
                  # print(anant[0:41:2])  # matlab jo number 2sare : ke bad hai uska table dekh or jo jo letter waha hai vo skip karde
                  # print(anant[::2])  # samaj jaega tu
                  # print(anant[::])  # samne wala maze me hai, default hai ye nahi likhe tabh bhi ye hi hoga or likha tabh bhi same

                  # print(anant[-1:-6:-2])   # pichhe se chalu ho ga count karne matlab esa anant = "remmargorp tseb si eh yob doog a si tnana"
                  # print(anant[::-1])   # string ko ulta print karna to iska use kar
                  # print(anant.isalnum())   # tell that ki string alpha numeric hai ki nahi
                  # print(anant.isalpha())  # tell ki number alpha hai ki nahi
                  # print(anant.endswith("programmer"))  # tell that string is ending with string (given in "") or not
                  # print(anant.count("a"))  # tell that how many string(given in string) has been come in string
                  # print(anant.capitalize())  # aajaega samaj par bas phele letter ko
                  # print(anant.find("programmer"))  # find karta hai ki kaha hai string jo di hai
                  # print(anant.lower())  # lower case me change
                  # print(anant.upper())  # upper case me change
                  # print(anant.replace(anant[1:1:1], "ANANT"))  # replace kar deta`}
              </code>
            </pre>
          </div>
          <div>
            {" "}
            <pre className="    ">
              <code>
                {`    market = ["Chocleet", "bug killer", "bhindi", "idk", 12]   # array jaisa hai oyhton me list bana diya
                      hhio = [1, 26, 2, 4543, 4, 4545, 100]
                      # hhio[1] = 122   # isse jo hhio ka --{'>'}[_, 26] wala number hai usko 122 kar dega, to ab hhio --> = [1, 122, 2, 4543, 4, 4545, 100] ho gaya
                      # print(hhio)
                      # # print(market)
                      # # print(market[3])  # slicing jaisa hai
                      \
                      # print(market[0:4])   # pichle wale me ja samjha ya hai
                      # print(market[:])   # pichle wale me ja samjha ya hai
                      # print(market[::])
                      # sabh vaisa ka vaisa hai
                      """
                      append()	Adds an element at the end of the list
                      clear()	Removes all the elements from the list
                      copy()	Returns a copy of the list
                      count()	Returns the number of elements with the specified value
                      extend()	Add the elements of a list (or any iterable), to the end of the current list
                      index()	Returns the index of the first element with the specified value
                      insert()	Adds an element at the specified position
                      pop()	Removes the element at the specified position
                      remove()	Removes the first item with the specified value
                      reverse()	Reverses the order of the list
                      sort()	Sorts the list
                      """
                      # market.append("I am anaNT")
                      # # print(market.clear())
                      # # print(market.copy())
                      # # print(market.count("bug killer"))
                      # market.extend("1")
                      # # print(market.index("Chocleet"))
                      # market.insert(1, "anant")
                      # market.pop(1)
                      # # market.remove(12)
                      # market.reverse()
                      # number.sort()
                      # print(number)
                      # print(market)


                      # 1. Mutable - can change
                      # 2. Immutable - cannot change

                      # TUPPLE IS A IMUTABLE OBJECT
                      # tp = (1,2,3)
                      # tp = (1,)  # to make a single thing tupple you have to put a comma after that number otherwise tupple will not be created
                      # print(tp)

                      a = 34
                      b = 45
                      a, b = b, a

                      print("A =", a, "\\nB =", b)`}
              </code>
            </pre>
          </div>
          <div>
            {" "}
            <pre className="   ">
              <code>
                {`  # dictionary hoti hai na vaise hi dictinory py me bhi hota hai bas cheeze tum define karte ho
            dic1 = { }  # dictionary banana hai to { } yer wala bracket banana padega    or abhi ye ek empty dic hai
            # print(type\(dic1\)\)  # ye dict karega print matlab dictinory
            dic2 = {
              "anant": "The best coder",
            # "anant": "infinity", # ese karke override kar sakte
            "Programming": "A way to talk to a computer",
            "ek or dic": {1: "a", 2: "b", 3: "c"}
}
            # dic2["ankit"] = "mera dost"  # ese ham bad me bhi cheeze add kar sakte
            # print(dic2)  # pura dic print karega
            # print("The meaning of anant is","\"", dic2["anant"],"\"")  # ab jo mane : iske bad likha hai na anant me vo print ho jaega
            # print(dic2["ek or dic"])  # esse karke ek or dic print ho jaega
            # print(dic2["ek or dic"][1])  # esse karke dusre dic ka bhi info le sakte

            # ab dekh ankit kamine ne tujhe bola oe mc bc bhosadiwale tu ek programmer nahi hai mujhe hatta apni dic se to tu ye use karega
            # del dic2["ankit"]

            # ab ham ye bhi kar sakte
            dic3 = dic2 # note ye ek nayya dic3 nahi banata ye ussi ko ref karta, isme change karge to dic2 me bhi ho jaega
            # del dic3["ek or dic"] # dic 2 me bhi dlt or dic3 me bhi
            # isse bachane ke liye esa likhna chahiye
            dic3 = dic2.copy()
            del dic3["ek or dic"]  # ab esa karega to d2 me kuch farak nahi padega
            # print(dic3)
            # dic2.update({"Harry": "The best teacher"})  # ese ham bad me bhi cheeze add kar sakte
            # print(dic2.keys())  # jo keys hai na : iske phele type hai vo print ho jaega
            print(dic2.items())  # jo item hai na : iske phele bad type hai vo sabh print ho jaega
            print(dic2)`}
              </code>
            </pre>
            <div>
              {" "}
              <pre className="   ">
                <code>
                  {`   #  var1 = 78
    #  var2 = 18
    #  var3 = int(input())
    # if var3 >= var2:
    #     print("You are eligible for driving")
    #  elif var3 > 100:
    #      print("You are not alive")
    # else:
    #     print("You are not eligible for driving")
    #  ye to aata hai achhe se ab yaha se dhyan de

# lis2 = [1, 2, 3]
# if 3 in lis2:  # matlab agar 3 lis2 ke ander(in) hai to ye print karo
#     print("yes it is in the list")

op = [1, 2, 3]
if 10 not in op:   # matlab agar 10 op ke ander nahi hai(not in) hai to ye print karo
    print("I am not in the list") 
    
    ye if wagera hai, to print karne ki jagaha ham iska use bas dusara banda ka code check karne ke liye karte, or kuch karne jao to bhhot dusari cheez banni hue hai jiski vajaha se nahi kar pate, to abhi to ye sikhaenge phir aage iska kabhi use nahi karenge, jabh 'if' ka use karenge to vo kisi dusare hi matlab se karenge or phir jo ham sochte vo wala chalta hi nahi, `}
                </code>
              </pre>
              <div>
                <pre className="   ">
                  <code>
                    {`  jaise ki ye
              d = int(input("Enter the rows you want\n"))
e = bool(int(input("Enter 0 for false and 1 for true\n")))

def star(d, e):
    if e == True:
        c = 1
        while c <= d:
            print(c * "*")
            c = c + 1
    else:
        while d > 0:
            print(d * "*")
            d = d - 1


star(d, e) 


`}
                  </code>
                </pre>
                <pre className="   ">
                  <code>
                    {`  # a = 9
# b = 10
# c = sum((a, b))  # built in function
# print(c)
# user input function
def function1(a, b):
    # this is doc -->
    """This is a function to add numbers
    nae line bhi aata hai doc me"""

    # print(a)
    # print(b)
    print("The Ans Is:", end=" ")
    return a+b

# print("Enter the 1 number")
# c =  int(input())
# print("Enter the 2 number")
# d = int(input())
# v = function1(c, d)
# print(v)
print(function1. __doc__) # ye kuch dedeta hai function ke bahar ki cheezo ke function
# print(c)
# print(d)
# print(v)

to def ke bad wali cheez so called reusable hoti hai, jo ham nahi batate koi or deta hai, per ye cheez ekdam ulti ho jati hai React me jaha vo code bhi nahi dete or mindset bhi nahi ya faeda bhi nahi, unhone bas vaha jo yaha abhi import ke sath kar rahe vo cheez har ek letter ke sath kardi hai taki vo bas ek controled web hi bana pae or kuch nahi. 
isliye python better, per dono hi bekar hai kyoki dono me mansha ek hi thi or react me sucess ho gae IS FIELD ME varna abhi ye cheez or jagaha karne wale hai. 
to inpe timewaste karne se achha khud ka banane pe focus karo.
jo pura web dev hai vo bas ek hi computer pe chalta hai or vo america me faila hua hai, agar ham apna kuch banake dalte hai jo sabhki madat karega, to usse ye log aram se manipulate or destroy kar sakte taki  na kar pae. or uske hi hisabh se html css js banaya hai, to vo actually kam nahi aata. 

baki def abc(a,b): cv2.handdetection(color = a, size = b)

abc(red, 23)
abc(yellow, 78)


`}
                  </code>
                </pre>
              </div>
              <div className="mt-10 bg-blue-900">
                <pre className="   ">
                  <code>
                    {`  
# Health Management System
# 3 clients - Anant, Arnav, Shrey


# Total 6 files
# write a function that when executed takes as input client name
# One more function to retrieve exercise or food for any client


# bhai ye rha program
# mere client hai anant, arnav and shrey ek food or exe ka anant or dusare food exe ka arnav or tisara food exe ka shrey
# ab dekho hame kya karna hai ki mujhe anant me exercise deni hai(input by user) to vo input phir anant exe.txt me save hojae(matlab likh de) phir uske sath sath phele time aaye ki kabh mane ye kiya, or phir uaske bad ek esa func chalana hai jisse me dekh pau ki mane kya likha tha us file me vo yaha print ho jae

# Health Management System
# 3 clients - Harry, Rohan and Hammad

def getdate():
    import datetime
    return datetime.datetime.now()


# Total 6 files
# write a function that when executed takes as input client name
# One more function to retrieve exercise or food for any client


# bhai ye rha program
import datetime


def gettime():
    return datetime.datetime.now()


def take(k):
    if k == 1:
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 harry-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 harry-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    elif (k == 2):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 rohan-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 rohan-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    elif (k == 3):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 hammad-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 hammad-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    else:
        print("plz enter valid input (1(harry),2(rohan),3(hammad)")


def retrieve(k):
    if k == 1:
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 harry-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 harry-food.txt") as op:
                for i in op:
                    print(i, end="")
    elif (k == 2):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 rohan-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 rohan-food.txt") as op:
                for i in op:
                    print(i, end="")
    elif (k == 3):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 hammad-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 hammad-food.txt") as op:
                for i in op:
                    print(i, end="")
    else:
        print("plz enter valid input (harry,rohan,hammad)")


print("health management system: ")
a = int(input("Press 1 for log the value and 2 for retrieve "))

if a == 1:
    b = int(input("Press 1 for harry 2 for rohan 3 for hammad "))
    take(b)
else:
    b = int(input("Press 1 for harry 2 for rohan 3 for hammad "))
    retrieve(b)

`}
                  </code>
                </pre>

                {`ab ye wala code simple hai, 
              
              value = input("type here\\n") ye karke user se input le sakte
               with open("tut32 harry-ex.txt", "a") as op:   ye karke jo apne operating system: linux usme koisi bhi file bana sakte 
                op.write(str([str(gettime())]) + ": " + value + "\\n") // or usme code likh sakte,
                str(gettime()) ko string me convert kar deta hai, to string kya hota hai, if(word.before == " && word.after == "): word = string esa kuch hai to iska defination mujhe nahi bataya kyoki un logo ko mujhe sikhana nahi tha ki kaise banate hai ye sabh, to unka simple defination ye hai ki jo bhi sentence word ' " or \` isme hai vo string hai, baki computer tumhare liye sabh kuch string me conv kardega str() se. 
                to str(1) = '1' str(world) = 'british empire' 

                 if (c == 1): phir ye to if hai ki if ye hai to if vo hai 
                  elif ye bhi if hi hai 

                  take(b) ye apna  def take(k):
    if k == 1:
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 harry-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 harry-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    elif (k == 2):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 rohan-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 rohan-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    elif (k == 3):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            value = input("type here\\n")
            with open("tut32 hammad-ex.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
        elif (c == 2):
            value = input("type here\\n")
            with open("tut32 hammad-food.txt", "a") as op:
                op.write(str([str(gettime())]) + ": " + value + "\\n")
            print("successfully written")
    else:
        print("plz enter valid input (1(harry),2(rohan),3(hammad)")

ye hai or retrive() bhi apna def retrieve(k):
    if k == 1:
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 harry-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 harry-food.txt") as op:
                for i in op:
                    print(i, end="")
    elif (k == 2):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 rohan-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 rohan-food.txt") as op:
                for i in op:
                    print(i, end="")
    elif (k == 3):
        c = int(input("enter 1 for excersise and 2 for food"))
        if (c == 1):
            with open("tut32 hammad-ex.txt") as op:
                for i in op:
                    print(i, end="")
        elif (c == 2):
            with open("tut32 hammad-food.txt") as op:
                for i in op:
                    print(i, end="")
    else:
        print("plz enter valid input (harry,rohan,hammad)")     
        
        or kuch nahi hai isme. 
        
        hammad ek foreign name hai, ek hare hue asuro ka jo maratha dwara dum daba ke bharat se bhag gae the or vasal state ban gae the. ye bas isliye survive karte hai kyoki abhi british empire rule kar raha hai sabh jagaha, to pichle 250 years me bharat aage na badh pae ie superpower na bane uske liye vo hare hue asuro ke mindset ko sabh jagaha use kar rahe hai or divide and rule karna cha rahe hai, varna jo is bande ka dna hai or jo ham logo ka dna hai vo same hi hai ham sabh gulf of khambat, so called indus vally(uska kuch or nam hai per vo bataya nahi hai), kashmir, ariyalur, chengalpatu, vishakapatnam me 10,000 salo se raharahe hai or pure ke puure earth ko apne civilization me le aaye the. 
        per jo asur ko lalitaditya kanishaka ne harake ye sabh kiya to vo 1000 sal ke bad bharat me ghus gae, or phir unke piche piche dusare asur aagae, to ek ko to khatam kar hi chuka hai maratha ne, ab dusare ko karne ki bari hai or ab pura bharat sath me mil kar kar sakta hai. 
        uske liye military soverignt honi chahiye, vo 1996-1999 me bharat ki soverignt bani hai varna india bas ek british state tha or bad me ussr state ban gaya tha, or dono ne india ko dabaya taki ek 3sara power imerge na ho. 
        or pakistan jo bharat hi hai vo abhi usa vasal state hai or jiski vajaha se india aage nahi badh pa raha kyoki vo usa ka asset hai or usa billions of dollor pakistan ko dedeta uske terror infrastructure ke, or american neuclear bomb lage hue hai pakistan me to vo kabhi bhi bharat pe hamla karde. usa well vo tabh tak nahi karega jabh tak bharat takatvar na ho jae
        `}
              </div>
              <div className="mt-10 ">
                <pre className="   ">
                  <code>
                    {` import random
import pyttsx3
com_chance = ["snake", "water", "gun"]
i = 1
com_win = 0
user_win = 0
draw = 0
friend = pyttsx3.init()  // ye kahi or ka function hai jo hamme nahi dikhaya hai, to 
while i <= 10:
    user_chance = input("Enter snake or water or gun\n")
    a = random.choice(com_chance)
    draw_say = f"computer move is {a} and your move is {user_chance} \nits a draw"
    win_say = f"computer move is {a} and your move is {user_chance} \nyou win"
    lose_say = f"computer move is {a} and your move is {user_chance} \nYou lose"
    # print(a)
    if a == "snake" and user_chance == "snake" or a == "water" and user_chance == "water" or a == "gun" and user_chance == "gun":
        print(f"computer move is {a} and your move is {user_chance} \nits a draw")
        friend.say(draw_say)
        friend.runAndWait()
        friend.stop()
        draw = draw + 1
        i = i + 1
        # print(a)
    elif a == "snake" and user_chance == "water" or a == "water" and user_chance == "gun" or a == "gun" and user_chance == "snake":
        print(f"computer move is {a} and your move is {user_chance} \nYou lose")
        com_win = com_win + 1
        i = i + 1
        // . isliye laga pa rahe kyoki ye kahi or ka function hai pyttsx
        friend.say(lose_say) // ye karke jo hamare computer ka speaker hai usse avaz aayegi jo ye jo words hai isko boldega. 
        friend.runAndWait() // ye run karke dekhlena, bina iske or iske sath. 
        friend.stop() // ye avaz ko stop kar dega
        # print(a)
    elif user_chance == "snake" and a == "water" or user_chance == "water" and a == "gun" or user_chance == "gun" and a == "snake":
        print(f"computer move is {a} and your move is {user_chance} \nYou win")
        user_win = user_win + 1 
        friend.say(win_say)
        friend.runAndWait()
        friend.stop()
        i = i + 1
        # print(a)
    else:
        print("Tere bap ka raj nahi chal raha kuch bhi dale ja raha")
    if i == 10:
        print(f"Computer points = {com_win}\nYour points = {user_win}\n Draw = {draw}")
        if com_win > user_win:
            print(f"Tere se ye hi ummed thi haar ke aayega\ncomputer win by {com_win - user_win} point")
        elif com_win < user_win:
            print(f"tujhse umeed nahi thi kaise jeet gaya \nYou win by- {user_win - com_win} point")
        break

`}
                  </code>
                </pre>
                {` is ab bas jabh tak jod to. to if tha: jabh esa ho, or while hai jabhtak esa ho. to isse kisi cheez ko define matkarna computer jabh banaenge/invent karenge tabh hi ham ye sabh apne aap seekh jaenge, or sochenge ki ye kam ka hai ki bhi nahi `}
              </div>
              <div className="mt-10 ">
                <pre className="   ">
                  <code>
                    {` class Employee:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname
        # self.email = f"{fname}.{lname}@codewithharry.com"

    def explain(self):
        return f"This employee is {self.fname} {self.lname}"

    @property
    def email(self):
        if self.fname==None or self.lname == None:
            return "Email is not set. Please set it using setter"
        return f"{self.fname}.{self.lname}@codewithharry.com"

    @email.setter
    def email(self, string):
        print("Setting now...")
        names = string.split("@")[0]
        self.fname = names.split(".")[0]
        self.lname = names.split(".")[1]

    @email.deleter
    def email(self):
        self.fname = None
        self.lname = None


skillf = Employee("Skill", "F")
# print(skillf.email)
o = "this is a string"
# print(type(skillf))
# print(type(o))
# print(dir(o))  # bhhot op hai ye try karna
# print(dir(skillf))
# print(id("that that"))

import inspect
print(inspect.getmembers(skillf))

"""
Functions	Working
hasattr()	It checks if an object has an attribute.
getattr()	It returns the contents of an attribute if there are some.
repr()	It returns the string representation of an object
vars()  It checks all the instance variables of an object
issubclass()	This function checks that if a specific class is a derived class of another class.
isinstance()	It checks if an object is an instance of a specific class. 
__doc__	This attribute gives some documentation about an object 
__name__	This attribute holds the name of the object
callable()	This function checks if an object is a function
help()	It checks what other functions do
"""
# python practise wale folder me ja (8.) me

`}
                  </code>
                </pre>
              </div>
              <div className="bg-amber-500 text-black">
                <pre>
                  <code>
                    {`
      # ~~~~~~~~~~~~~~~~~~~~~~~~~classes~~~~~~~~~~~~~~~~~~~~~~~~ #

      @ jo bhi iske bad likha ho usko google karlo zayada samajh aayega

# classes (school me agar har ek bachhe ke liye ek ek cheez(code yaha pe) hota to dikat ho jata isliye class banae gae takki same same cheeze alag alag nahi ek sath hi padhade), well from the past, esa kuch nahi hota har bachhe ke liye sabh kuch alag alag hona chahiye, or ye cheez alr bani banae hai pura bharat varsh jambudweep uska sak shakshat prove hai, ye bas ek british mindset hai, vo logo ne bas cheeze define kardi or sabh jagaha laga diya taki me ese example sabh jagaha laga pau. ye bas ek manipulation hai. jaise ki maine ye pura set samjhaya tha har line, per kya pata kya dikkat hue ki vo pura undo redu me ataka diya or maine jo 1st time likha tha vo hat gaya, ab ye bas rushed lines hai un sabh ki.

# class Student:
# """Docstring"""
#     pass

# harry = Student()
# larry = Student()
# # instance variable hai ye
# harry.name = "Harry"
# harry.std = 12
# harry.section = 1
# larry.std = 9
# larry.subjects = ["hindi", "physics"]
# print(harry.section, larry.subjects)

# ~~~~~~~~~~~~~~~~~~~~~instance variable ~~~~~~~~~~~~~~~~~~~~~~ #
# class Employee:
#     no_of_leaves = 8
#     pass
#
# harry = Employee()
# rohan = Employee()
#
# harry.name = "Harry"
# harry.salary = 455
# harry.role = "Instructor"
#
# rohan.name = "Rohan"
# rohan.salary = 4554
# rohan.role = "Student"

# print(Employee.no_of_leaves)
# print(Employee.__dict__)  # dict dictionary batata(sabhi instance variable ko dictionary me bata deta)
# Employee.no_of_leaves = 9
# print(Employee.__dict__)
# print(Employee.no_of_leaves)

# ~~~~~~~~~~~~~~~~ Self & __init__() (Constructors) ~~~~~~~~~~~~~~~~~~~ #
# '''''''''''''''''''''''''''''''''''''''''''''''' Self keyword '''''''''''''''''''''''''''''''''''''''''''''''''''''''' #
                  # ye jo code hai ye multiple bar run hote, to self bas ye karta ki ye jo variable is code ke liye tha to iske sath hi chipka rahe
                  # class Employee:
                  #     no_of_leaves = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #
                  #
                  # harry = Employee("Harry", 255, "Instructor")

                  # rohan = Employee()
                  # harry.name = "Harry"
                  # harry.salary = 455
                  # harry.role = "Instructor"
                  #
                  # rohan.name = "Rohan"
                  # rohan.salary = 4554
                  # rohan.role = "Student"

                  # print(harry.printdetails())

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Class Methods~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

                  # class Employee:
                  #     no_of_leaves = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #     @classmethod  # kabhi bas self nahi class ko kuch edit karna tah ye aata
                  #     def change_leave(cls, new_leaves):
                  #         cls.no_of_leaves = new_leaves
                  #
                  #
                  # harry = Employee("Harry", 255, "Instructor")
                  # rohan = Employee("Rohan", 4554, "Student")
                  # rohan.change_leave(35)
                  # print(harry.no_of_leaves)

                  # cls jo hai co atribute ko change nahi karta vo atribute ke class(yaha employee) me jake vaha pe jo value hai usse change karta
                  # jaise yaha hua rohan ki value change ki to harry ki bhi ho gae

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~Class Methods As Alternative Constructors~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

                  # class Employee:
                  #     no_of_leaves = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #
                  #     @classmethod
                  #     def change_leaves(cls, newleaves):
                  #         cls.no_of_leaves = newleaves
                  #
                  #     @classmethod
                  #     def from_dash(cls, string):
                  #         # params = string.split("-")
                  #         # print(params)
                  #         # return cls(params[0], params[1], params[2])
                  #         return cls(*string.split("-"))  # istde akte hai args me yyaha pe split karke ek list return karega
                  #
                  #
                  # harry = Employee("Harry", 255, "Instructor")
                  # rohan = Employee("Rohan", 455, "Student")
                  # karan = Employee.from_dash("Karan-480-Student")
                  #
                  # print(karan.no_of_leaves)
                  # rohan.change_leaves(34)
                  #
                  # print(harry.no_of_leaves)

                  # ~~~~~~~~~~~~~~~~~~~Static Methods~~~~~~~~~~~~~~~~~~~~~~ #

                  # class Employee:
                  #     no_of_leaves = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #
                  #     @classmethod
                  #     def change_leaves(cls, newleaves):
                  #         cls.no_of_leaves = newleaves
                  #
                  #     @classmethod
                  #     def from_dash(cls, string):
                  #         return cls(*string.split("-"))
                  #
                  #     @staticmethod   # simple def func but in a class used to speed up code
                  #     def printgood(string):
                  #         print("This is good " + string)
                  #
                  # harry = Employee("Harry", 255, "Instructor")
                  # rohan = Employee("Rohan", 455, "Student")
                  # karan = Employee.from_dash("Karan-480-Student")
                  #
                  # Employee.printgood("Rohan")


                  # ~~~~~~~~~~~~~~~~~~~~Abstraction & Encapsulation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
# in sabh ko samajhne ki jaghaa use karo, ese padhne se kuch na ho raha in sabh me ye timepass hai, or jaha bhi eng likhi hai usko ignore karo kam ka nahi hai
                  # Abstraction
                  #
                  # Encapsulation
                  #
                  # Abstraction is used to solves the problem and issues that arise at the design stage.
                  #
                  # Encapsulation is used to solves the problem and issue that arise at the implementation stage.
                  #
                  # Abstraction focuses on what the object does instead of how the details are implemented.
                  #
                  # Encapsulation focuses on hiding the code and data into a single unit to secure the data from the outside world.
                  #
                  #  Abstraction can be implemented by using Interface and Abstract Class.
                  #
                  # Encapsulation can be implemented using Access Modifiers (Public, Protected, and Private.)
                  #
                  #   Its application is during the design level.
                  #
                  # Its application is during the Implementation level.

# sidhha sat -> aam khao gutliya mat gino

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Single Inheritance ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
// ye sabh logic kam ka nahi hai, ye brtish based logic hai, ham log long term me sochte hai usme ye kam nahi aayega, usse achha ye socho ki computer kaise banae usme phir ye sabh apne aap invent karlonge or ye sochoge  ki ye lagau ki nahi. 
                  # class Employee:
                  #     no_of_leaves = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #
                  #     @classmethod
                  #     def change_leaves(cls, newleaves):
                  #         cls.no_of_leaves = newleaves
                  #
                  #     @classmethod
                  #     def from_dash(cls, string):
                  #         return cls(*string.split("-"))
                  #
                  #     @staticmethod
                  #     def printgood(string):
                  #         print("This is good " + string)
                  #
                  #
                  # class Programmer(Employee):
                  #     no_of_holiday = 56
                  #     def __init__(self, aname, asalary, arole, languages):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #         self.languages = languages
                  #
                  #
                  #     def printprog(self):
                  #         return f"The Programmer's Name is {self.name}. Salary is {self.salary} and role is {self.role}.The languages are {self.languages}"
                  #
                  #
                  #
                  # harry = Employee("Harry", 255, "Instructor")
                  # rohan = Employee("Rohan", 455, "Student")
                  #
                  # shubham = Programmer("Shubham", 555, "Programmer", ["python"])
                  # karan = Programmer("Karan", 777, "Programmer", ["python", "Cpp"])
                  # print(karan.no_of_holiday)

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Multiple Inheritance ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

                  # class Employee:
                  #     no_of_leaves = 8
                  #     var = 8
                  #
                  #     def __init__(self, aname, asalary, arole):
                  #         self.name = aname
                  #         self.salary = asalary
                  #         self.role = arole
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"
                  #
                  #     @classmethod
                  #     def change_leaves(cls, newleaves):
                  #         cls.no_of_leaves = newleaves
                  #
                  #     @classmethod
                  #     def from_dash(cls, string):
                  #         return cls(*string.split("-"))
                  #
                  #     @staticmethod
                  #     def printgood(string):
                  #         print("This is good " + string)
                  #
                  # class Player:
                  #     var = 9
                  #     no_of_games = 4
                  #     def __init__(self, name, game):
                  #         self.name = name
                  #         self.game =game
                  #
                  #     def printdetails(self):
                  #         return f"The Name is {self.name}. Game is {self.game}"
                  #
                  # class CoolProgramer(Player, Employee):
                  #
                  #     language = "C++"
                  #     def printlanguage(self):
                  #         print(self.language)
                  #
                  # harry = Employee("Harry", 255, "Instructor")
                  # rohan = Employee("Rohan", 455, "Student")
                  #
                  # shubham = Player("Shubham", ["Cricket"])
                  # karan = CoolProgramer("Karan",["Cricket"])
                  # # det = karan.printdetails()
                  # # karan.printlanguage()
                  # # print(det)
                  # print(karan.var)
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Multilevel Inheritance ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

                  # class Dad:
                  #     basketball = 6
                  #
                  # class Son(Dad):
                  #     dance =1
                  #     basketball = 9
                  #     def isdance(self):
                  #         return f"Yes I dance {self.dance} no of times"
                  #
                  # class Grandson(Son):
                  #     dance = 6
                  #     guitar = 1
                  #
                  #     def isdance(self):
                  #         return f"Jackson yeah!" \
                  #             f"Yes I dance very awesomely {self.dance} no of times"
                  #
                  # darry = Dad()
                  # larry = Son()
                  # harry = Grandson()

                  # print(darry.guitar)

                  # electronic device
                  # pocket gadget
                  # phone

                  # class Electronic:
                  #     def tool(self):
                  #         return "You can use electronic as your new source"
                  #
                  # class PocketGadget(Electronic):
                  #     def pocket(self):
                  #         return "Can be come in pocket"
                  #
                  # class Phone(PocketGadget):
                  #     def Call(self):
                  #         return f"You can talk anywhere"
                  #     def feature(self):
                  #         return f"Phone feature are \n1. {self.pocket()}\n2. {self.tool()} \n3. {self.Call()}"
                  #
                  #
                  # ele = Electronic()
                  # poc = PocketGadget()
                  # ph = Phone()
                  #
                  # print(ph.feature())

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Public, Private & Protected Access Specifiers ~~~~~~~~~~~~~~~~~~~~~ #

                  # Public - default kahi par bhi use kar sakte
                  # Protected - bas apki file ko acees hai isko use karna (koi import karke nahi kar sakta)
                  # Private - bas us class ko anumati hai isse use karne ki or koi nahi kar sakta

                  # class Employee:
                  #     no_of_leaves = 8
                  #     var = 8
                  #     _protec = 9   # to make protect variable use only 1 (_)
                  #     __pr = 98     # to make private variable use 2 (__)

                  # def __init__(self, aname, asalary, arole):
                  #     self.name = aname
                  #     self.salary = asalary
                  #     self.role = arole
                  #
                  # def printdetails(self):
                  #     return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"

                  # @classmethod
                  # def change_leaves(cls, newleaves):
                  #     cls.no_of_leaves = newleaves

                  # @classmethod
                  # def from_dash(cls, string):
                  #     return cls(*string.split("-"))

                  # @staticmethod
                  # def printgood(string):
                  #     print("This is good " + string)

                  # emp = Employee("harry", 343, "Programmer")
                  # print(emp._Employee__pr)  # private ko bhar access ese karte hai

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Polymorphism ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                  # In basic English language, Polymorphism means to exist in different states. The same object or thing changing its state from one form to another is known as polymorphic. A same function or method, being used differently in different scenarios can perfectly describe polymorphism. It occurs mostly with base and derived class.
// itna sabh padhne ki vajae dekhlo direct kya hota hai
                  # print(5+6)         # ek hi cheez ko difrent tarike se likhna (output ka nahi pata)
                  # print("5" + "6")   # ek hi cheez ko difrent tarike se likhna (output ka nahi pata)

                  # Abstraction
                  # Encapsulation
                  # Inheritance
                  # Polymorphism
                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Super() and Overriding In Classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                  class A:
                  clasa = "I am in a"

                  def __init__(self):
                  self.clsu = "clasu"
                  self.blasu = "blasu"

                  class B(A):
                  blasa = "I am in class b"

                  def __init__(self):
                  # super().__init__() # agar tu yaha pe call karta to ye uper le jaega or repeat karega to itna achha nahi hota matlab samaj line __init__ wale  pe ja
                  self.clsu = "b clasu"
                  self.blasu = "b blasu"  # isne a wale ko override kar diya to jabh tu iske madat se a ka use karna chahata to nahi kar sakta
                  # par ek method hai jisse kar sakte
                  super().__init__()  # ab iski madat se hamne uper wale A ko call kar diya

                  a = A()
                  b = B()
                  print(b.blasu)



                  # bhai matlab dekh kya hota super se vo b wale func ko bhul kar a me chale jata phir uske sare func dekhta uske bad vo vapis b me aata or uske func dekhta   agar a ne koisa banaya hai or b ne same banaya hai to b ka call hoiga (override)
                  # or same esa agar tu nichhe karta to b ke sare func a se overide ho jate (super matlab samaj kahika portal)

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Diamond problem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

                  # class A:
                  #     def met(self):
                  #         print("This is a method from class A")
                  #
                  # class B(A):
                  #     def met(self):
                  #         print("This is a method from class B")
                  #
                  # class C(A):
                  #     def met(self):
                  #         print("This is a method from class C")
                  #
                  # class D(C, B):
                  #     def met(self):
                  #         print("This is a method from class D")
                  #
                  #
                  # a = A()
                  # b = B()
                  # c = C()
                  # d = D()
                  #
                  # d.met()

 # for more info see this -> https://api.codewithharry.com/media/videoSeriesFiles/courseFiles/python-tutorials-for-absolute-beginners-66/base64.png. ye wali cwh ki website band ho gae archive.cwh ho gaya hai to ye lo photo
 # https://cwh-full-next-space.fra1.digitaloceanspaces.com/videos/python-tutorials-for-absolute-beginners-66/base64.webp
 # https://cwh-full-next-space.fra1.digitaloceanspaces.com/videos/python-tutorials-for-absolute-beginners-66/base64_eUgwcmT.webp

                  # bhai ab agli file me ja

                  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Operator Overloading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                  """ (https://docs.python.org/2/library/operator.html is link me jao or cheezo ke liye)
                  "+" ye hai bulit in function
                  par agar hame iske value ko change karna hai to kaise kare
ese -->
                  """

                  class Employee:
                  no_of_leaves = 8

                  def __init__(self, aname, asalary, arole):
                  self.name = aname
                  self.salary = asalary
                  self.role = arole

                  def printdetails(self):
                  return f"The Name is {self.name}. Salary is {self.salary} and role is {self.role}"

                  @classmethod
                  def change_leaves(cls, newleaves):
                  cls.no_of_leaves = newleaves

                  def __add__(self, other):
                  return self.salary + other.salary

                  def __truediv__(self, other):
                  return self.salary / other.salary

                  def __repr__(self):
                  return f"Employee('{self.name}', {self.salary}, '{self.role}')"

                  def __str__(self):
                  return f"The Name is {self.name}. Salary is {self.salary} and role is         {self.role}"

                  emp1 =Employee("Harry", 345, "Programmer")
                  # emp2 =Employee("Rohan", 55, "Cleaner")
                  # print(emp1 + emp2)

                  # ab soch tujhe kuch esa karna hai ki jabh bhi koi emp1 ko print kare to printdetail print hi jae
                  # bina kuch kare
                  # print(emp1)  # isme kuch esa bataega <__main__.Employee object at 0x00000152A02F0FA0>
                  # ye karke  (    def {__repr__ or __str__}(self)...)
                  print(emp1)  # output aagaya "The Name is Harry. Salary is 345 and role is Programmer"

                  """
                  __str__ and __repr__ functions
                  Both of these built-in methods are used to return a presentable description about any object rather than the default one. The difference in them is the way of writing them. The __str__ method is mainly written for the end-user, while __repr__ is written for a developer. It is overridden to return a printable string representation of any user-defined class. An interesting thing to note here is that the priority of __str__ is greater than __repr__. This means that if we pass an object into a print statement, it will return us the __str__ string even if __repr__ is also present there. In such cases, if we want to print __repr__, we have to call it exclusively with the object name in the print statement.
                  // badh me gaya eng mat padh usse
                  """
      `}
                  </code>
                </pre>
              </div>
              <div>
                <h1>Ye bhayankar level project hai</h1>
                <pre>
                  <code>
                    {`# Create a library class
# display book
# lend book - (who owns the book if not present)
# add book
# return book

# HarryLibrary = Library(listofbooks, library_name)


#dictionary (books-nameofperson)

# create a main function and run an infinite while loop asking
# users for their input



class Library:

    def __init__(self, name, book_list):
        self.name = name
        self.book_list = book_list
        self.lend_book = []
# display kar vata
    def display_book(self):
        print("BOOKs - ")
        num = 1
        # if self.book_list > 5:
        #     print("You can't make library more than 5 books")
        # else:
        for item in self.book_list:
            print(f"{num}. {item}")
            num = num + 1
    # lend karvata
    def lendd_book(self, book):
        self.lend_book.append(book)
        self.book_list.remove(book)
        with open("tut54_lended_book", "a") as lb:
            lb.write(f"You rent {book} at {time.asctime(time.localtime(time.time()))} \\n")
    # return karvata
    def return_book(self, book):
        if book not in self.lend_book:
            print("This book has not been rented to anyone\\nif this is wrong so pls contact us on discord")
        elif book in self.lend_book:
            self.book_list.append(book)
            self.lend_book.remove(book)
            print("You successfully return the book")
            num = 1
            # ye batata ki kitne book or dene hai
            if len(self.lend_book) > 0:
                for bukku in self.lend_book:
                    print(f"These books are left to give back to library{num}. {bukku}")
                    num = num+1
        with open("tut54_lended_book", "a") as lb:
            lb.write(f"You return {book} at {time.asctime(time.localtime(time.time()))} \\n")
    # add karvata
    def add_book(self, book):
        self.book_list.append(book)
        print(f"Book [{book}] successfully added to library")
# variables
money = 0
name_lib = "anant-library"
price = [5000, 600, 450, 550, 1000, 2000]
bookk_list = ["Harry bhai - 5000rs", "Python - 800rs", "Harry potter - 1000rs", "Java - 600rs", "C++ - 450rs", "Vinay Patrika - 2000rs"]
anant_lib = Library(name_lib, bookk_list)
namee = input("Enter your name - ")
info = f"\\nLibrary Name: {name_lib}\\n\\nOwner: Anant \\n\\nBhopal Ranking: 2nd\\n\\nBooks we have: 2,50,000\\n\\nDiscord Server: https://discord.gg/wPC7n38TsE"
                                                      # because 1st is always harry-lib
# imports
import time
import random
import datetime
import calendar
from PyDictionary import PyDictionary

def get_time():
    return datetime.datetime.now()

from datetime import datetime
timi = time.asctime(time.localtime(time.time()))
timii = datetime.now()
while True:
    print(f"Welcome {namee} to {name_lib}")
    print(f"{namee} has {money}rs now")
    input_t = input("(0) Cash - to make money\\n(1) Display - to display books\\n(2) Lend Book - to lend books\\n(3) return - to return books\\n(4) Add Book - to add books\\n(5) Dictionary - You can use online dictionary here\\n(6) Calculator - You can use online calculator here\\n(7) Time Spent - tell how much time you spent till now \\n(8) Calender - You can use a year calender here\\n(9) Info - to see info about this libary\\n(10) Quit - to exit this library\\n")  # isme kar bhai func ke use
    # cash func
    if input_t == "0":
        if money <= 5000:
            cash = random.randint(500, 700)
            money = money + cash
            print(f"{namee} you earned {cash}rs this time")
            # print(f"Now you have {money}rs")
        elif money > 5000:
            print(f"{namee} you can't make more money, You already have 5000+ rs")
            # print(money)

    # display func
    elif input_t == "1":
        print(f"{name_lib} has these many books\\n")
        anant_lib.display_book()
    # lend func
    elif input_t == "2":
        try:
            bk_lend = input("Enter name of the book like this format - \\n [{book_name} - {price}rs] - example Harry bhai - 5000rs\\n")
            # batata ki bk_lend hai ki nahi lib me
            book_find = bk_lend in bookk_list
            # print(book_find)
            inndexx = bookk_list.index(bk_lend)
            # print(inndexx) # isme index aajaega int me
            PRICE = price[inndexx]  # to agar indexx 1 hai to price 1 ko selec karlo
            # print(PRICE - 20)

            if book_find:
                # money system
                if money >= PRICE:
                    money = money - PRICE
                    anant_lib.lendd_book(bk_lend)
                    print(f"Successfully bought the book {bk_lend}")
                elif money < PRICE:
                    print("You Don't Have Money. PLS type (0) to make money")
            elif not book_find:
                print(f"There is no book like {bk_lend} in our library now\\n it is owned by {namee}")
        except:
            print(f"There is no book like {bk_lend} in our library")
    # return book func
    elif input_t == "3":
        boooooks = input("Enter name of the book which you want to return like this format - \\n [{book_name} - {price}rs] - example Harry bhai - 5000rs\\n")
        anant_lib.return_book(boooooks)
    # donate func
    elif input_t == "4":
        try:
            BOOK = input("Enter book name you want to donate in this format\\n[{book} - {price}rs]\\n")
            # split karke book ko book wali list me dalta or price ko price wali list me
            faku_pricecc = BOOK.split("-")[1]
            # print(faku_pricecc)
            pricesssssss = int(faku_pricecc.split("rs")[0])

            price.append(pricesssssss)
            # print(price)
            anant_lib.add_book(BOOK)
        except:
            print("Pls write book name in right way \\n[{book} - {price}rs] eg - Harry bhai - 5000rs")
    # dictionary
    elif input_t == "5":

        dictionary = PyDictionary()
        x = input("Welcome to online dictionary \\nEnter thee word to get the meaning \\n")
        a = dictionary.meaning(x)
        print(a)
    # calculator
    elif input_t == "6":
        print("Welcome to online calculator")

        def calculator():
            if c == "*":
                print("The ans is", a * b)
            elif c == "+":
                print("The ans is", a + b)
            elif c == "-":
                print("The ans is", a - b)
            elif c == "/":
                print("The ans is", a / b)
            else:
                print("Pls put a valid statement")
        while True:
            d = input("If you want to quit Type 'quit' here or you want to continue type anything\\n")
            if d == "quit":
                break
            print("Enter 1st number")
            a = int(input())
            print("Enter 2st number")
            b = int(input())
            print("Enter what you have to do *, /, +, -")
            c = input()
            calculator()
            if d == "quit":
                break
    # hours spend
    elif input_t == "7":
        timmmi = time.asctime(time.localtime(time.time()))
        timmi = datetime.now()
        print(f"You come to library at {timi} and ended at {timmmi}")
        hour = timmi - timii
        h2 = int(hour.total_seconds() / 60 ** 2)
        h3 = int(hour.total_seconds() / 60 * 2)
        print(f"You spend {h2} hours and {h3} minutes till now")
    # calender
    elif input_t == "8":
        year = int(input("Enter the year\\n"))
        print(f"The calendar of year {year} is : \\n")
        print(calendar.calendar(year, 2, 1, 6))
    # info
    elif input_t == "9":
        print(f"The info of this library is\\n{info}")
        print("Pls join our discord server\\n")
    # tata - bye bye
    elif input_t == "10":
        print("Thank you to come to my library")
        break
    time.sleep(2)  # mane ye isliye lagaya taki user jo hai vo cheeze padh pae varna agge ka ekdam se run hota to kuch samaj nahi aata

# bhai aap discord chalao bhhot kam aayega pls, aap apne subscriber se bhi puch sakte ki unhe chahiye ki nahi pls`}
                  </code>
                  {`to ye bas ek basic example hai ki kya kar sakte ho ab isme api banake:  
  import requests
r = requests.get("https://codewithharry.com")
# print(r.text)
# print(r.status_code)
# status code
# 100 Continue
# 101 Switching Protocols
# 103 Early Hints
# 200 OK
# 201 Created
# 202 Accepted
# 203 Non-Authoritative Information
# 204 No Content
# 205 Reset Content
# 206 Partial Content
# 300 Multiple Choices
# 301 Moved Permanently
# 302 Found
# 303 See Other
# 304 Not Modified
# 307 Temporary Redirect
# 308 Permanent Redirect
# 400 Bad Request
# 401 Unauthorized
# 402 Payment Required
# 403 Forbidden
# 404 Not Found
# 405 Method Not Allowed
# 406 Not Acceptable
# 407 Proxy Authentication Required
# 408 Request Timeout
# 409 Conflict
# 410 Gone
# 411 Length Required
# 412 Precondition Failed
# 413 Payload Too Large
# 414 URI Too Long
# 415 Unsupported Media Type
# 416 Range Not Satisfiable
# 417 Expectation Failed
# 418 I'm a teapot
# 422 Unprocessable Entity
# 425 Too Early
# 426 Upgrade Required
# 428 Precondition Required
# 429 Too Many Requests
# 431 Request Header Fields Too Large
# 451 Unavailable For Legal Reasons
# 500 Internal Server Error
# 501 Not Implemented
# 502 Bad Gateway
# 503 Service Unavailable
# 504 Gateway Timeout
# 505 HTTP Version Not Supported
# 506 Variant Also Negotiates
# 507 Insufficient Storage
# 508 Loop Detected
# 510 Not Extended
# 511 Network Authentication Required

# url = "http://www.codewithharry.com"
# data = {
#     "p1":4,
#     "p2":8
# }
# r2 = requests.post(url=url, data=data)
# print(r2)

ese api se website me bhi run kar sakte hai. to request.send ko request.post karte, or request.get ko request.fetch karle. get or send bhi use hote hai per jaisa unka matlab hai vaisa use nahi hota. baki vo karna hai to 
'// import { client } from "@/lib/prisma"
// import { NextRequest, NextResponse } from "next/server"

// export async function POST(
//     req: NextRequest,
//     { params }: { params: { id: string } }
// ) {
//     //console.log("CALLED")
//     const{ id} = params
//     const body = await req.json()

//     const studio = await client.user.update({
//         where: {
//             id,
//         },
//         data: {
//             studio: {
//                 update: {
//                     screen: body.screen,
//                     mic: body.mic,
//                     preset: body.preset,
//                 },
//             },
//         },
//     })
// if (studio)
//     return NextResponse.json({ status: 200, message: "Studio updated" })


//     return NextResponse.json({
//         status: "480",
//         message: "Jabh bande ne web pe message bejha uske bad kuch hua gadbad",
//     })
// }'
esa kuch kisi random cheez ke liye kar sakte. to esa kuch ye next js me hota hai. 

baki ye sabh actually code chupane ke liye use hota hai. to jaise ki shadcn ui ke website pe jao. vaha npm install karo, phir import karo kisi file me koisa bhi component(web prodigies youtube channel), phir ctrl +click karo unke import pe, tumhe dikhega ki vo code install nahi kar rahe computer me balki api request se unke code base se ye wale code utha rahe. to ye actually bhhot bekar haiye karne ke liye bhhot code karna padhta hai. to ye sabh jan vuch ke kiya hai
  `}
                </pre>
              </div>
              <div>
                <pre>
                  phir esa karke bhhot sari cheeze karlo
                  <code>
                    {`import re

amu = '''Code With Harry is my attempt to teach basics and those coding techniques to people in short time which took me ages to learn. 
At Code_With_Harry@gmail.com, I provide a quick and to the point demo along with resources of anything and everything I teach. Source code and other resources are hosted on my website CodeWithHarry.com. I provide source code(if any) in the description of every video.
Quality programming videos in Hindi :)
anant@gmail.com
asfsd@ggas.fd
ffassad@f.dsfd
'''

nu = 1
emu = re.findall(r'[a-zA-Z0-9]+@[a-zA-z0-9]+[.][a-zA-Z0-9]+', amu)
f = open('Tut72_exe11_logs.txt', 'a')
for email in emu:
    print(f"{nu}. {email}")

    f.write(f"{nu}. {email}\\n")
    nu = nu + 1

print("All email are store in Tut72_exe11_logs.txt file")
print(f"There are {nu-1} email in this extract")
f.write("\\n")
f.close()`}
                  </code>
                </pre>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div>PROJECTS</div>
          <div>
            {`
        https://github.com/anant-harryfan/Python_basic_to_advance/tree/master/PythonTuts/Python_other_tuts/murtaza_workshop/Projects 
        ispe hai dekhlo
        `}
          </div>

          <div>
            <div>Project by murtaza workshop</div>
            <div className="basiccode">
              <pre>
                <code>
                  {`
      basic code
      
      import cv2
cap = cv2.VideoCapture(0)
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    cv2.imshow("Ram", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break

# Hand tracking
# import cv2
# from cvzone.HandTrackingModule import HandDetector
#
# cap = cv2.VideoCapture(0)
# detector = HandDetector()
#
# while True:
#     _, img = cap.read()
#     img = cv2.resize(img, (1380, 720))
#     img = cv2.flip(img, 1)
#     hands, img = detector.findHands(img, flipType=False)
#     if hands:
#         hand1 = hands[0]
#         lmList = hand1["lmList"]
#         bbox = hand1["bbox"]
#         cx, cy = hand1["center"]
#
#     cv2.imshow("Ram", img)
#     if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
#         break`}
                </code>
              </pre>
            </div>
            <div>
              <pre>
                <code>
                  {`
  virtual zoom
  
  import cv2
from cvzone.HandTrackingModule import HandDetector

detector = HandDetector()
cap = cv2.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)
startDistance = None
scale = 0
cx, cy = 100, 100
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1080, 520))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)
    img1 = cv2.imread("Resources/Prog10_Zoomed.jpg")

    if len(hands) == 2:
        if detector.fingersUp(hands[0]) != [0, 0, 0, 0, 0] and detector.fingersUp(hands[1]) != [0, 0, 0, 0, 0]:
            # print("Zoomed")
            lmList1 = hands[0]["lmList"]
            lmList2 = hands[1]["lmList"]
            if startDistance is None:
                # zoom by fingers (not recommended)
                # l, _, img = detector.findDistance(lmList1[8], lmList2[8], img)
                # zoom by hately (recommended)
                l, _, img = detector.findDistance(hands[0]["center"], hands[1]["center"], img)
                startDistance = l
            # zoom by fingers (not recommended)
            # l, info, img = detector.findDistance(lmList1[8], lmList2[8], img)
            # zoom by hately (recommended)
            l, info, img = detector.findDistance(hands[0]["center"], hands[1]["center"], img)
            scale = int((l - startDistance) // 2)
            cx, cy = info[4:]

            print(scale)
    else:
        startDistance = None
    try:
        h1, w1, _ = img1.shape
        newH, newW = ((h1+scale)//2)*2, ((w1+scale)//2)*2
        img1 = cv2.resize(img1, (newH, newW))
        img[cy-newH//2: cy+newH//2, cx-newW//2: cx+newW//2] = img1
    except:
        pass
    cv2.imshow("img", img)
    cv2.waitKey(1)
  `}
                </code>
              </pre>
            </div>
            <div>
              <pre>
                <code>
                  {`
  virtual image drag and drop
  
  import cv2
from cvzone.HandTrackingModule import HandDetector
from cvzone.Utils import overlayPNG
from os import listdir

cap = cv2.VideoCapture(0)

detector = HandDetector(detectionCon=0.8)


class DragImg():
    def __init__(self, path, posOrigin, imgType):

        self.posOrigin = posOrigin
        self.imgType = imgType
        self.path = path

        if self.imgType == 'png':
            self.img = cv2.imread(self.path, cv2.IMREAD_UNCHANGED)
        else:
            self.img = cv2.imread(self.path)

        # self.img = cv2.resize(self.img, (0,0),None,0.4,0.4)

        self.size = self.img.shape[:2]

    def update(self, cursor):
        ox, oy = self.posOrigin
        h, w = self.size

        # Check if in region
        if ox < cursor[0] < ox + w and oy < cursor[1] < oy + h:
            self.posOrigin = cursor[0] - w // 2, cursor[1] - h // 2

path = "Resources/Prog11_images"
myList = listdir(path)
# print(myList)

listImg = []
for x, pathImg in enumerate(myList):
    if 'png' in pathImg:
        imgType = 'png'
    else:
        imgType = 'jpg'
    listImg.append(DragImg(f'{path}/{pathImg}', [50 + x * 300, 50], imgType))

while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)

    if hands:
        lmList = hands[0]['lmList']
        # Check if clicked
        length, info, img = detector.findDistance(lmList[8], lmList[12], img)
        # print(length)
        if length < 60:
            cursor = lmList[8]
            for imgObject in listImg:
                imgObject.update(cursor)

    try:

        for imgObject in listImg:

            # Draw for JPG image
            h, w = imgObject.size
            ox, oy = imgObject.posOrigin
            if imgObject.imgType == "png":
                # Draw for PNG Images
                img = overlayPNG(img, imgObject.img, [ox, oy])
            else:
                img[oy:oy + h, ox:ox + w] = imgObject.img

    except:
        pass

    cv2.imshow("Ram", img)
    cv2.waitKey(1)
  `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`virtual Mcq
  
  import cv2
import csv
from cvzone.HandTrackingModule import HandDetector
from cvzone.Utils import putTextRect
from time import sleep
# creating mcq class
class MCQ:
    def __init__(self, data):  # this is one single q
        self.Question = data[0]
        self.Choice1 = data[1]
        self.Choice2 = data[2]
        self.Choice3 = data[3]
        self.Choice4 = data[4]
        self.Answer = int(data[5])
        # initialize user ans
        self.UserAnswer = None

    def update(self, cursor, bboxs):
        # i is q nos if wee see, bbox is x,y,x1,y1 of boxes
        for i, bbox in enumerate(bboxs):
            x1, y1, x2, y2 = bbox
            # if fingers in between of box
            if x1 < cursor[0] < x2 and y1 < cursor[1] < y2:
                self.UserAnswer = i+1
                if self.UserAnswer == self.Answer:
                    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), cv2.FILLED)
                else:
                    cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), cv2.FILLED)




cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.8)
# Importing csv file
path = "Prog12_MCQ.csv"
with open(path, newline="\\n") as f:
    reader = csv.reader(f)
    # All q, choice, ans
    AllData = list(reader)[1:]  # this is all que

qNo = 0
TotalQ = len(AllData)

# creating object for each MCQ
mcqList = []
for q in AllData:
    mcqList.append(MCQ(q))


while True:
    success, img = cap.read()
    img = cv2.resize(img, (1080, 720))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)
    if qNo < TotalQ:
        mcq = mcqList[qNo]
        # cvzone has a func putTextRect which help to put text and rectangle at one place and rectangle will auto adjust his width if the text lenght is greater of smaller
        #                     img,  text,        position is main req
        #                                                    scale, thicknessText, thicknessrec
        img, bbox = putTextRect(img, mcq.Question, [100, 100],     2, 2, offset=50, border=5)
        img, bbox1 = putTextRect(img, mcq.Choice1, [100, 250], 2, 2, offset=50, border=5)
        img, bbox2 = putTextRect(img, mcq.Choice2, [400, 250], 2, 2, offset=50, border=5)
        img, bbox3 = putTextRect(img, mcq.Choice3, [100, 400], 2, 2, offset=50, border=5)
        img, bbox4 = putTextRect(img, mcq.Choice4, [400, 400], 2, 2, offset=50, border=5)

        if hands:
            lmList = hands[0]["lmList"]
            cursor = lmList[8]
            l, info = detector.findDistance(lmList[8], lmList[12])
            if l < 50:
                # see that user click right an or not
                mcq.update(cursor, [bbox1, bbox2, bbox3, bbox4])
                if mcq.UserAnswer is not None:
                    sleep(0.3)
                    qNo += 1
    else:
        score = 0
        for mcq in mcqList:
            if mcq.Answer == mcq.UserAnswer:
                score += 1

            img, _ = putTextRect(img, "Quiz Completed", [150, 300], 2, 2, offset=50, border=5)
            img, _ = putTextRect(img, f"Your Score: {score}/{TotalQ}", [600, 300], 2, 2, offset=50, border=5)
    # Progress Bar
    BarValue = 150 + (750//TotalQ)*qNo
    if qNo == TotalQ:
        cv2.rectangle(img, (150, 600), (900, 650), (0, 255, 0), cv2.FILLED)
    cv2.rectangle(img, (150, 600), (BarValue, 650), (0, 255, 0), cv2.FILLED)
    cv2.rectangle(img, (150, 600), (900, 650), (0, 0, 0), 5)
    img, _ = putTextRect(img, f"{round((qNo/TotalQ)*100)}%", [950, 635], 2, 2, offset=16)
    cv2.imshow("Ram", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break

    exle file:
    Question,Choice1,Choice2,Choice3,Choice4,Answer
What is the height in an HD Image?,480,720,1080,240,2
How many corners does a hexagon have?,Three,Four,Five,Six,4
What is the variable type of a? a = 'yes',Integer,Float,String,Character,3
How many oceans are in the world?,Two ,Three,Four,Five,4
  `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`velcro dart (nahi chalega)
  import cv2
import cvzone
import numpy as np
import pickle

path = "Resources/Prog13_Videos/Video2.mp4"
cap = cv2.VideoCapture(path)
frameCounter = 0
cornerPoints = [[377, 52], [944, 71], [261, 624], [1058, 612]]
colorFinder = cvzone.ColorFinder(False)
hsvValues = {'hmin': 32, 'smin': 99, 'vmin': 88, 'hmax': 49, 'smax': 255, 'vmax': 255}
countHit = 0
imgListBallsDetected = []
hitDrawBallInfoList = []
totalScore = 0

with open("Prog13_Poly_points", 'rb') as f:
    polygonWithScore = pickle.load(f)
print(polygonWithScore)
# to get Wrap perspective of bord
def getBoard(img):
    width, height = int(400 * 1.5), int(300 * 1.5)
    pts1 = np.float32(cornerPoints)
    pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])
    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    imgOutput = cv2.warpPerspective(img, matrix, (width, height))
    for i in range(4):
        cv2.circle(img, (cornerPoints[i][0], cornerPoints[i][1]), 15, (0, 0, 0), cv2.FILLED)
    return imgOutput
# detect darts
def detectColorDarts(img):
    imgBlur = cv2.GaussianBlur(img, (7, 7), 2)
    imgColor, mask = colorFinder.update(imgBlur, hsvValues)
    kernal = np.ones((9, 9), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernal)

    # kernal = np.ones((11, 11), np.uint8)
    mask = cv2.dilate(mask, kernal, iterations=3)

    # mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernal)
    return imgColor, mask
while True:
    # .SET() WILL WORK IN WHILE LOOP
    cap.set(3, 1380)
    cap.set(4, 720)
    frameCounter += 1
    # HELPS TO REPLAY VIDEO WHEN IT END
    if frameCounter == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        frameCounter = 0
        totalScore = 0 - 60
        cap.set(cv2.CAP_PROP_POS_MSEC, 0)
    success, img = cap.read()
    # img = cv2.imread("0.Resources_GameDev/Prog13_Videos/img.png")
    # tells the mask
    # imgColor, mask = colorFinder.update(img, hsvValues)
    imgBoard = getBoard(img)
    imgColor, mask = detectColorDarts(imgBoard)
    # Remove previous detection
    for i, img in enumerate(imgListBallsDetected):
        mask = mask - img
        # cv2.imshow(str(i), img)
    imgContour, ContourFound = cvzone.findContours(imgBoard, mask, 3500)
     # tells hit detected
    if ContourFound:
        countHit += 1
        # we do this because we don't want that a ball cames in a image and fall down as a hit
        if ContourFound:
            countHit += 1
            if countHit == 20:
                imgListBallsDetected.append(mask)
                # print("Hit Detected")
                countHit = 0
                for polyScore in polygonWithScore:
                    center = ContourFound[0]['center']
                    poly = np.array([polyScore[0]], np.int32)
                    inside = cv2.pointPolygonTest(poly, center, False)
                    # print(inside)
                    if inside == 1:
                        # print("Yes")
                        hitDrawBallInfoList.append([ContourFound[0]['bbox'], ContourFound[0]['center'], poly])
                        totalScore += polyScore[1]
        print(totalScore)
    imgBlank = np.zeros((imgContour.shape[0], imgContour.shape[1], 3), np.uint8)
    for bbox, center, poly in hitDrawBallInfoList:
        cv2.rectangle(imgContour, bbox, (0, 0, 0), 2)
        cv2.circle(imgContour, center, 5, (255, 255, 255), cv2.FILLED)
        cv2.drawContours(imgBlank, poly, -1, color=(0, 255, 0), thickness=cv2.FILLED)

    imgBoard = cv2.addWeighted(imgBoard, 0.7, imgBlank, 0.5, 0)
    imgBoard, _ = cvzone.putTextRect(imgBoard, f'Total Score: {totalScore}',                                     (10, 40), scale=2, offset=20)

    # cv2.imwrite("0.Resources_GameDev/Prog13_Videos/imgBoard.png", imgBoard)
    imgStacked = cvzone.stackImages([imgContour, imgColor, mask, imgBoard], 2, 0.5)
    cv2.imshow("RamKrishnaMadhav", imgStacked)
    # cv2.imshow("Krishna", imgContour)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break

        # uper wali ek dusari file thi, ab ye ek dusari file hai 
        prog12conti_path_picker
        import cv2, numpy, pickle

polygons = []  # all the polygons and there points
path = []  # current single polygon

img = cv2.imread("Resources/Prog13_Videos/imgBoard.png")

# helps to find where we clicked
def mousePoints(event, x, y, flags, params):
    if event == cv2.EVENT_LBUTTONDOWN:
        path.append([x, y])

while True:
    # help to make circes on image whee we clicked
    for point in path:
        cv2.circle(img, point, 7, (0, 0, 0), cv2.FILLED)
        # cv2 take np.array so we convert path t np.array
    pts = numpy.array(path, numpy.int32).reshape((-1, 1, 2))
    # make polyGon
    img = cv2.polylines(img, [pts], True, (0, 0, 0), 2)
    cv2.imshow("achutam", img)
    # agar ham img pe kahi par click karte hai to ye func ca karo
    cv2.setMouseCallback("achutam", mousePoints)
    key = cv2.waitKey(1)
    # help to save poly gon in polygons list when we press s
    if key == ord("s"):
        score = int(input("Enter Score: "))
        polygons.append([path, score])
        print("Total polyGon", len(polygons))
        path = []
    if key == ord("q"):
        with open("Prog13_Poly_points", 'wb') as f:
            print(polygons)
            pickle.dump(polygons, f)
        break
  `}
                </code>
              </pre>
            </div>
            <div>
              <pre>
                <code>
                  {`virtual calculator
  import cv2
from cvzone.HandTrackingModule import HandDetector


class Button:
    def __init__(self, pos, width, height, value):
        self.pos = pos
        self.width = width
        self.height = height
        self.value = value

    def draw(self, img):
        cv2.rectangle(img, self.pos, (self.pos[0] + self.width, self.pos[1] + self.height),
                      (225, 225, 225), cv2.FILLED)
        cv2.rectangle(img, self.pos, (self.pos[0] + self.width, self.pos[1] + self.height),
                      (50, 50, 50), 3)
        cv2.putText(img, self.value, (self.pos[0] + 30, self.pos[1] + 70), cv2.FONT_HERSHEY_PLAIN,
                    2, (50, 50, 50), 2)

    def checkClick(self, x, y):
        if self.pos[0] < x < self.pos[0] + self.width and \\
                self.pos[1] < y < self.pos[1] + self.height:
            cv2.rectangle(img, (self.pos[0] + 3, self.pos[1] + 3),
                          (self.pos[0] + self.width - 3, self.pos[1] + self.height - 3),
                          (255, 255, 255), cv2.FILLED)
            cv2.putText(img, self.value, (self.pos[0] + 25, self.pos[1] + 80), cv2.FONT_HERSHEY_PLAIN,
                        5, (0, 0, 0), 5)
            return True
        else:
            return False


# Buttons
buttonListValues = [['7', '8', '9', '*'],
                    ['4', '5', '6', '-'],
                    ['1', '2', '3', '+'],
                    ['0', '/', '.', '=']]
buttonList = []
for x in range(4):
    for y in range(4):
        xpos = x * 100 + 800
        ypos = y * 100 + 150

        buttonList.append(Button((xpos, ypos), 100, 100, buttonListValues[y][x]))

# Variables
myEquation = ''
delayCounter = 0
# Webcam
cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.8, maxHands=1)

while True:
    # Get image frame
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img)

    # Draw All
    cv2.rectangle(img, (800, 70), (800 + 400, 70 + 100),
                  (225, 225, 225), cv2.FILLED)

    cv2.rectangle(img, (800, 70), (800 + 400, 70 + 100),
                  (50, 50, 50), 3)
    for button in buttonList:
        button.draw(img)

    # Check for Hand
    if hands:
        # Find distance between fingers
        lmList = hands[0]['lmList']
        length, _, img = detector.findDistance(lmList[8], lmList[12], img)
        print(length)
        x, y = lmList[8]

        # If clicked check which button and perform action
        if length < 100 and delayCounter == 0:
            for i, button in enumerate(buttonList):
                if button.checkClick(x, y):
                    myValue = buttonListValues[int(i % 4)][int(i / 4)]  # get correct number
                    if myValue == '=':
                        myEquation = str(eval(myEquation))
                    else:
                        myEquation += myValue
                    delayCounter = 1

    # to avoid multiple clicks
    if delayCounter != 0:
        delayCounter += 1
        if delayCounter > 10:
            delayCounter = 0

    # Write the Final answer
    cv2.putText(img, myEquation, (810, 130), cv2.FONT_HERSHEY_PLAIN,
                3, (0, 0, 0), 3)

    # Display
    key = cv2.waitKey(1)
    cv2.imshow("Image", img)
    if key == ord('c'):
        myEquation = ''
    if key & 0xFF == ord('q'):  # to get exit from the videos
        break`}
                </code>
              </pre>
            </div>
            <div>
              <div>
                <pre>{`1st file hand distance from screen
  import cv2
from cvzone.HandTrackingModule import HandDetector
from math import sqrt
from numpy import polyfit
from cvzone.Utils import putTextRect

def findScreenDis(x, y):
    x3 = [435, 410, 372, 334, 300, 245, 200, 170, 145, 130, 112, 103, 93, 87, 80, 75, 70, 67, 62, 59, 57]

    y3 = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95,
         100]  # before 20 its not real a measurement in cm but after 20 it is in o real measurement
    coff = polyfit(x3, y3, 2)  # y = Ax^2 + Bx + C
    distance = int(sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2))  # to find from the screen
    A, B, C = coff
    distanceCM = A * distance ** 2 + B * distance + C
    # print(int(distanceCM), distance)
    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 3)
    putTextRect(img, f'{int(distanceCM)} cm', (x + 5, y - 10))

cap = cv2.VideoCapture(0)
detector = HandDetector(maxHands=1)
# Find Function
# x is the raw distance y is the value in cm
# coff = polyfit(x, y, 2)  # y = Ax^2 + Bx + C
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    hands= detector.findHands(img, flipType=False, draw=False)
    if hands:
        hand1 = hands[0]
        lmList = hand1["lmList"]
        x, y, w, h = hand1["bbox"]
        x1, y1 = lmList[5]
        x2, y2 = lmList[17]
        # distance = int(sqrt((y2 - y1)**2 + (x2-x1)**2))   # to find from the screen
        # A, B, C = coff
        # distanceCM = A * distance ** 2 + B * distance + C
        # # print(int(distanceCM), distance)
        # cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 3)
        # putTextRect(img, f'{int(distanceCM)} cm', (x + 5, y - 10))
    cv2.imshow("Ram", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
  `}</pre>
              </div>

              <div>
                <pre>
                  {`maingame.py 
    
    import cv2
from cvzone.HandTrackingModule import HandDetector
from math import sqrt
from numpy import polyfit
from cvzone.Utils import putTextRect
from random import randint
from time import time

cap = cv2.VideoCapture(0)
detector = HandDetector(maxHands=1)
# Find Function
# x is the raw distance y is the value in cm
x = [435, 410, 372, 334, 300, 245, 200, 170, 145, 130, 112, 103, 93, 87, 80, 75, 70, 67, 62, 59, 57]
y = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]  # before 20 its not real a measurement in cm but after 20 it is in o real measurement
coff = polyfit(x, y, 2)  # y = Ax^2 + Bx + C

# Game Variables
cx, cy = 250, 250
color = (255, 0, 0)
counter = 0
score = 0
timeStart = time()
totalTime = 30
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    if time() - timeStart < totalTime:

        hands = detector.findHands(img, flipType=False, draw=False)
        if hands:
            hand1 = hands[0]
            lmList = hand1["lmList"]
            x, y, w, h = hand1["bbox"]
            x1, y1 = lmList[5]
            x2, y2 = lmList[17]
            distance = int(sqrt((y2 - y1)**2 + (x2-x1)**2))   # to find from the screen
            A, B, C = coff
            distanceCM = A * distance ** 2 + B * distance + C

            if distanceCM < 20:
                counter = 1


            cv2.rectangle(img, (x - 30, y - 30), (x + w + 30, y + h + 30), (0, 0, 0), 3)
            putTextRect(img, f'{int(distanceCM)} cm', (x + 5, y - 10))
        if counter:
            counter += 1
            color = (0, 255, 0)
            if counter == 5:
                cx, cy = randint(100, 1100), randint(100, 600)
                color = (255, 0, 0)
                score += 1
                counter = 0
        # Draw Target
        cv2.circle(img, (cx, cy), 30, color, cv2.FILLED)
        cv2.circle(img, (cx, cy), 10, (255, 255, 255), cv2.FILLED)
        cv2.circle(img, (cx, cy), 20, (255, 255, 255), 2)
        cv2.circle(img, (cx, cy), 30, (50, 50, 50), 2)

        # Game Graphics
        img, bbox = putTextRect(img, f"Time: {int(totalTime - (time() - timeStart))}", (1100, 75), scale=3, offset=30)
        img, bbox2 = putTextRect(img, f"Score: {str(score).zfill(2)}", (60, 75), scale=3, offset=30)
    else:
        putTextRect(img, 'Game Over', (400, 400), scale=5, offset=30, thickness=7)
        putTextRect(img, f'Your Score: {score}', (450, 500), scale=3, offset=20)
        putTextRect(img, 'Press R to restart', (460, 575), scale=2, offset=10)

    cv2.imshow("Image", img)
    key = cv2.waitKey(1)

    if key == ord('r'):
        timeStart = time()
        score = 0
    `}{" "}
                </pre>
              </div>
            </div>
            <div>
              <pre>
                <code>
                  {`car parking 
    import cv2
from cvzone.ColorModule import ColorFinder
from cvzone.Utils import findContours, putTextRect, stackImages
from numpy import polyfit
import math

path = "Resources/Prog16_files/vid (4).mp4"
pathImg = "Resources/Prog16_files/ball.png"
cap = cv2.VideoCapture(path)
detector = ColorFinder(False)
frameCounter = 0
# {'hmin': 0, 'smin': 143, 'vmin': 0, 'hmax': 123, 'smax': 255, 'vmax': 237}  # totally remove ackground bt some part of bal is cut (Recommended)
# {'hmin': 0, 'smin': 114, 'vmin': 0, 'hmax': 96, 'smax': 255, 'vmax': 255}  # remain total ball but background is not fully cut

hsv = {'hmin': 0, 'smin': 143, 'vmin': 0, 'hmax': 123, 'smax': 255, 'vmax': 237}

PosListX, PosListY = [], []
xList = [item for item in range(0, 1300)]

while True:
    frameCounter += 1
    # HELPS TO REPLAY VIDEO WHEN IT END
    if frameCounter == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        frameCounter = 0
        PosListX, PosListY = [], []
        cap.set(cv2.CAP_PROP_POS_MSEC, 0)
    success, img = cap.read()
    # img = cv2.imread(pathImg)
    img = cv2.resize(img, (0, 0), None, 0.7, 0.7)
    # img = cv2.flip(img, 1)
    img2 = img[0:460, :]

    # finding color of ball
    imgColor, mask = detector.update(img2, hsv)
    # finding position of ball
    imgContours, contours = findContours(img2, mask, minArea=200)
    imgResult = img2.copy()
    if contours:
        PosListX.append(contours[0]["center"][0])
        PosListY.append(contours[0]["center"][1])

    if PosListX:
        # Prediction by Polynomial Regression y = Ax^2 + Bx + C
        # finding Coefficients
        A, B, C = polyfit(PosListX, PosListY, 2)
        for i, (posx, posy) in enumerate(zip(PosListX, PosListY)):
            pos = (posx, posy)
            if i == 0:
                cv2.line(imgResult, pos, pos, (0, 255, 0), 5)
            else:
                cv2.line(imgResult, pos, (PosListX[i-1], PosListY[i-1]), (0, 255, 0), 7)
            cv2.circle(imgResult, pos, 5, (0, 0, 0), cv2.FILLED)
        for x in xList:
            y = int(A*x**2 + B*x + C)
            cv2.circle(imgResult, (x, y), 2, (255, 0, 0), cv2.FILLED)

        if len(PosListX) < 10:
            # Prediction
            # X values 330 to 430  Y 590
            a = A
            b = B
            c = C - 400

            x = int((-b - math.sqrt(b ** 2 - (4 * a * c))) / (2 * a))
            prediction = 230 < x < 300
            cv2.line(imgResult, (230, 400), (300, 400), (0, 0, 0), 20)

        if prediction:
            putTextRect(imgResult, "Basket", (50, 150),
                               scale=5, thickness=5, colorR=(0, 200, 0), offset=20)
        else:
            putTextRect(imgResult, "No Basket", (50, 150),
                               scale=5, thickness=5, colorR=(0, 0, 200), offset=20)

    img = cv2.resize(img, (910, 460))
    # print(img2.shape[0], img2.shape[1])
    imgStack = stackImages([img2, imgColor, mask, imgContours, imgResult, img], 2, 0.5)
    # cv2.imshow("Ram", img)
    # cv2.imshow("Ram", imgColor)
    cv2.imshow("RamKrishnaHari", imgStack)

    if cv2.waitKey(50) & 0xFF == ord('q'):  # to get exit from the videos
        break
    `}
                </code>
              </pre>

              <pre>
                <code>
                  {`2nd file pickle 
      
      import pickle
import cv2

try:
    with open("Resources/Prog17_CarParkProject/CarParkPos", "rb") as f:
        posList = pickle.load(f)
except:
    posList = []

def mouseClick(events, x, y, flags, param):
    if events == cv2.EVENT_LBUTTONDOWN:
        posList.append((x, y))
    if events == cv2.EVENT_RBUTTONDOWN:
        for i, pos in enumerate(posList):
            x1, y1 = pos
            if x1 < x < x1 + width and y1 < y < y + height:
                posList.pop(i)
    with open("Resources/Prog17_CarParkProject/CarParkPos" , "wb") as f:
        pickle.dump(posList, f)

width, height = 107, 48
while True:
    img = cv2.imread("Resources/Prog17_CarParkProject/carParkImg.png")
    for pos in posList:
        cv2.rectangle(img, pos, (pos[0]+width, pos[1]+height), (255, 0, 0), 4)
    cv2.imshow("Ram", img)
    cv2.setMouseCallback("Ram", mouseClick)

    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
      `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`eye blick counter
    
    import cv2
import cvzone
from cvzone.FaceMeshModule import FaceMeshDetector
from cvzone.PlotModule import LivePlot

cap = cv2.VideoCapture(0)
detector = FaceMeshDetector(maxFaces=1)
plotY = LivePlot(640, 360, [20, 50], invert=True)

idList = [22, 23, 24, 26, 110, 157, 158, 159, 160, 161, 130, 243]
ratioList = []
blinkCounter = 0
counter = 0
color = (255, 0, 255)

while True:

    if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

    success, img = cap.read()
    img, faces = detector.findFaceMesh(img, draw=False)

    if faces:
        face = faces[0]
        # for idd in idList:
        #     cv2.circle(img, face[idd], 5, color, cv2.FILLED)

        leftUp = face[159]
        leftDown = face[23]
        leftLeft = face[130]
        leftRight = face[243]
        lenghtVer, _ = detector.findDistance(leftUp, leftDown)
        lenghtHor, _ = detector.findDistance(leftLeft, leftRight)

        # cv2.line(img, leftUp, leftDown, (0, 200, 0), 3)
        # cv2.line(img, leftLeft, leftRight, (0, 200, 0), 3)

        ratio = int((lenghtVer / lenghtHor) * 100)
        ratioList.append(ratio)
        if len(ratioList) > 3:
            ratioList.pop(0)
        ratioAvg = sum(ratioList) / len(ratioList)

        if ratioAvg < 32 and counter == 0:
            blinkCounter += 1
            color = (0, 200, 0)
            counter = 1
        if counter != 0:
            counter += 1
            if counter > 10:
                counter = 0
                color = (255, 0, 255)

        cvzone.putTextRect(img, f'Blink Count: {blinkCounter}', (50, 100),
                           colorR=color)

        imgPlot = plotY.update(ratioAvg, color)
        img = cv2.resize(img, (640, 360))
        imgStack = cvzone.stackImages([img, imgPlot], 2, 1)
    else:
        img = cv2.resize(img, (640, 360))
        imgStack = cvzone.stackImages([img, img], 2, 1)

    cv2.imshow("RamKrishna", imgStack)
    cv2.waitKey(25)
    `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`1st file dynamic text reader
    import cv2
from cvzone.FaceMeshModule import FaceMeshDetector
from cvzone.Utils import putTextRect, stackImages
import numpy as np

cap = cv2.VideoCapture(0)
detector = FaceMeshDetector(maxFaces=1)
# TextList = ["Welcome to", "anant chandak", "Here we will Talk about", "krishna", "Jagannath", "Jay shree ram", "keshav", "Madhav"]
TextList = ["Welcome to", "Anant chandak", "Here we will Talk about", "Robot", "Open-cv", "python"]
while True:
    success, img = cap.read()
    img, faces = detector.findFaceMesh(img, draw=False)
    imgText = np.zeros_like(img)

    if faces:
        face = faces[0]
        pointLeft = face[145]
        pointRight = face[374]

        w, _ = detector.findDistance(pointLeft, pointRight)
        W = 6.3

        # Finding distance
        f = 840
        d = (W * f) / w
        # print(d)

        putTextRect(img, f'Depth: {int(d)}cm',
                           (face[10][0] - 100, face[10][1] - 50),
                           scale=2)

        for i, text in enumerate(TextList):
            smoothNess = (int(d / 20) * 20)
            singleHeight = 20 + int(smoothNess/4)
            scale = 0.4 + smoothNess / 75
            cv2.putText(imgText, text, (50, 50+(i*singleHeight)), cv2.FONT_ITALIC, scale, (255, 255, 255), 2)

    imgStacked = stackImages([img, imgText],  2, 1)
    cv2.imshow("RamKrishna", imgStacked)
    cv2.waitKey(1)
    `}
                </code>
              </pre>

              <pre>
                <code>
                  {`dynamic text reader face distance 2nd file
        import cv2
from cvzone.FaceMeshModule import FaceMeshDetector
from cvzone.Utils import putTextRect
cap = cv2.VideoCapture(0)
detector = FaceMeshDetector(maxFaces=1)

# formula by which we are measuring distance
#  focal lenght
# f = (w * d)/W  # be case sensitive
# distance
# d = (W * f)/w
while True:
    success, img = cap.read()
    img, faces = detector.findFaceMesh(img, draw=False)

    if faces:
        face = faces[0]
        pointLeft = face[145]
        pointRight = face[374]
        # Drawing
        # cv2.line(img, pointLeft, pointRight, (0, 200, 0), 3)
        # cv2.circle(img, pointLeft, 5, (255, 0, 255), cv2.FILLED)
        # cv2.circle(img, pointRight, 5, (255, 0, 255), cv2.FILLED)
        w, _ = detector.findDistance(pointLeft, pointRight)
        W = 6.3

        # # Finding the Focal Length
        # d = 50
        # f = (w*d)/W
        # print(f)

        # Finding distance
        f = 840
        d = (W * f) / w
        # print(d)

        putTextRect(img, f'Depth: {int(d)}cm',
                           (face[10][0] - 100, face[10][1] - 50),
                           scale=2)

    cv2.imshow("Image", img)
    cv2.waitKey(1)
        `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`shape detector real time
          
          import cv2
from cvzone import stackImages
from cvzone import findContours
import numpy as np

def empty(a):
    pass

cv2.namedWindow("Hanuman")
cv2.resizeWindow("Hanuman", 640, 240)
cv2.createTrackbar("Threshold1", "Hanuman", 22, 255, empty)
cv2.createTrackbar("Threshold2", "Hanuman", 51, 255, empty)
cv2.createTrackbar("Area", "Hanuman", 5000, 30000, empty)

cap = cv2.VideoCapture(0)
while True:
    success, img = cap.read()
    img = cv2.resize(img, (300, 220))
    img = cv2.flip(img, 1)
    imgBlur = cv2.GaussianBlur(img, (7, 7), 1)
    imgGray = cv2.cvtColor(imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos('Threshold1', "Hanuman")
    threshold2 = cv2.getTrackbarPos('Threshold2', "Hanuman")
    imgCanny = cv2.Canny(imgGray, threshold1, threshold2)
    kernal = np.array((7, 7))
    imgDilate = cv2.dilate(imgCanny, kernal, iterations=1)
    areaMin = cv2.getTrackbarPos("Area", "Hanuman")
    imgContour, Contours = findContours(img, imgDilate, minArea=areaMin)
    if Contours:
        cnt = Contours[0]["cnt"]
        peri = cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
        x, y, w, h = Contours[0]["bbox"]
        cv2.putText(imgContour, "Points: " + f"{len(approx)} ", (x + w + 20, y + 20), cv2.FONT_HERSHEY_PLAIN, 0.7, (0, 255, 0), 2)
        cv2.putText(imgContour, "Area: " + f"{int(Contours[0]['area'])} ", (x + w + 20, y + 45), cv2.FONT_HERSHEY_PLAIN, 0.7, (0, 255, 0), 2)

    ramKrishnaHari = stackImages([img, imgBlur, imgGray, imgCanny, imgContour], 2, 1)
    cv2.imshow("RamKrishnaHari", ramKrishnaHari)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>
            <div>
              <pre>
                <code>
                  {` auto matic omr graidng, not working
          import cv2
from cvzone.Utils import findContours, stackImages, cornerRect
import numpy as np


Question = 5
choices = 5
ans = [0, 1, 0, 1, 3]
color = (0, 255, 0)

def splitBoxes(img):
    rows = np.vsplit(img, 5)
    boxes = []
    for r in rows:
        cols = np.hsplit(r, 5)
        for i, box in enumerate(cols):
            boxes.append(box)
    # ram = stackImages(boxes, 3, 1)
    # cv2.imshow(f"ram", ram)
    return boxes

def showAns(img, myIndex, grading, ans2, question, choices):
    secW = int(img.shape[1]/Question)
    secH = int(img.shape[0]/choices)
    for x in range(0, question):
        myAns = myIndex[x]
        cx = (myAns*secW)+secW//2
        cy = (x*secH) + secH//2
        if grading[x] == 1:
            color = (0, 255, 0)
        else:
            color = (0, 0, 255)
            correctAns = ans[x]
            cv2.circle(img, ((correctAns*secW)+secW//2, (x*secH-20)+secH//2), 15, (0, 255, 0), cv2.FILLED)
        cv2.circle(img, (cx, cy-10), 25, color, cv2.FILLED)
    return img

# cap = cv2.VideoCapture(0)

while True:
    # success, img = cap.read()
    img = cv2.imread("Resources/Prog22_OMR.png")
    # img = cv2.resize(img, (1380, 720))
    # img = cv2.flip(img, 1)
    # Preprocess
    img = cv2.detailEnhance(img, sigma_s=10, sigma_r=0.5)
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray, (7, 7), 1)
    imgCanny = cv2.Canny(imgBlur, 10, 50)
    imgDilate = cv2.dilate(imgCanny, (7, 7), iterations=1)
    imgContours, confound = findContours(img, imgDilate, filter=4, minArea=1000)
    BiggestBbox = confound[0]["bbox"]
    BiggestBbox2nd = confound[1]["bbox"]
    # print(BiggestBbox)

    # wrap = Bird(BiggestBbox, img)
    x, y, w, h = BiggestBbox
    x1, y1 = x + w, y + h
    width, height = 200, 100

    pts1 = np.float32([[x, y], [x1, y], [x, y1], [x1, y1]])
    pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])
    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    imgWrapCol = cv2.warpPerspective(img, matrix, (200, 100))
    imgWrapCol = cv2.resize(imgWrapCol, (300, 400))
    # apply threshold
    imgWrapGray = cv2.cvtColor(imgWrapCol, cv2.COLOR_BGR2GRAY)
    imgThresh = cv2.threshold(imgWrapGray, 150, 255, cv2.THRESH_BINARY_INV)[1]
    boxes = splitBoxes(imgThresh)
    # non zero pixel val
    myPixelVal = np.zeros((Question, choices))
    countC, countR = 0, 0
    for image in boxes:
        totalPixels = cv2.countNonZero(image)
        myPixelVal[countR][countC] = totalPixels
        countC += 1
        if countC == choices:
            countR += 1
            countC = 0
    # print(myPixelVal)
    # finding index val of markings
    myIndex = []
    for x in range(0, Question):
        arr = myPixelVal[x]
        myIndexVal = np.where(arr == np.amax(arr))
        # print(myIndexVal[0])
        # print(arr)
        myIndex.append(myIndexVal[0][0])
    # print("myIndex", myIndex)
   # grading
    grading = []
    for i in range(0, Question):
        if ans[i] == myIndex[i]:
            grading.append(1)
        elif ans[i] != myIndex[i]:
            grading.append(0)
    # print("ans", ans)
    # print("grading", grading)

    # Score
    score = (sum(grading)/Question) * 100
    # print(score)

    # Putting text
    cx, cy = confound[1]["center"]
    cv2.putText(img, f"{score}", (cx-20, cy+5), cv2.FONT_HERSHEY_PLAIN, 1, (0, 0, 0), 2)

    # showing ans
    imgResult = imgWrapCol.copy()
    imgResult = showAns(imgResult, myIndex, grading, ans, Question, choices)
    imgDrawings = np.zeros_like(imgWrapCol)
    imgDrawings = showAns(imgDrawings, myIndex, grading, ans, Question, choices)
    imgDrawings = cv2.resize(imgDrawings, (200, 100))
    invmatrix = cv2.getPerspectiveTransform(pts2, pts1)
    imgInvWrap = cv2.warpPerspective(imgDrawings, invmatrix, (250, 261))
    imgFinal = img.copy()
    # print(img.shape)
    imgFinal = cv2.addWeighted(imgFinal, 1, imgInvWrap, 20, 0)
    imgFinal = cv2.resize(imgFinal,  (361, 350))


    img = cornerRect(img, BiggestBbox, l=10, t=2, rt=0)
    img = cornerRect(img, BiggestBbox2nd, l=10, t=2, rt=0, colorC=(0, 0, 255))
    RamKrishnaHari = stackImages([img, imgGray, imgBlur, imgCanny, imgDilate, imgContours], 4, 1)
    BhramaVishnuMahesh = stackImages([imgWrapCol, imgWrapGray, imgThresh], 4, 1)
    cv2.imshow("madhav", imgDrawings)
    cv2.imshow("keshav", imgFinal)
    cv2.imshow("BhramaVishnuMahesh", BhramaVishnuMahesh)
    cv2.imshow("RamKrishnaHari", RamKrishnaHari)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`text detenction 
          
          import cv2
import pytesseract
cap = cv2.VideoCapture(0)
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    print(pytesseract.image_to_string(img))
    cv2.imshow("Ram", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`snake game virtual 
          
          import math
import random
import cv2
import cvzone
from cvzone.HandTrackingModule import HandDetector
from cvzone import overlayPNG
import numpy as np

cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.8, maxHands=1)
class SnakeGame:
    def __init__(self, pathFood):
        self.points = []  # all points of snake
        self.lengths = []  # distance between each point
        self.currentLength = 0  # total length of snake
        self.allowedLength = 150  # length of snake body
        self.previousHead = 0, 0  # previous head point
        self.food = cv2.imread(pathFood, cv2.IMREAD_UNCHANGED)  # food image
        self.hFood, self.wFood, _ = self.food.shape  # getting width and height
        self.foodPoint = 0, 0   # food point
        # to get random location of food
        self.randomLocation()
        # score
        self.score = 0
        # game over
        self.gameOver = False

    def randomLocation(self):
        """set random location"""
        self.foodPoint = random.randint(100, 1000), random.randint(100, 500)

    def update(self, imgMain, currentHead):
        """update snake"""

        if self.gameOver:
            cvzone.putTextRect(imgMain, "Game Over", [300, 400],
                               scale=7, thickness=5, offset=20)
            cvzone.putTextRect(imgMain, f'Your Score: {self.score}', [300, 550],
                               scale=7, thickness=5, offset=20)

        else:
            # previous location
            px, py = self.previousHead
            # current location
            cx, cy = currentHead
            # add kar rahe current pos ko
            self.points.append([cx, cy])
            # distance find kar rahe zayada achhe tarike se
            distance = math.hypot(cx-px, cy-py)
            # length me append kar rahe
            self.lengths.append(distance)
            # current snake ke length ko distance se plus kar rahe
            self.currentLength += distance
            # phir previous pos ko current pos bana rahe
            self.previousHead = cx, cy

            # Length reduction
            # agar snake apni aukat se bahar jae to cat do
            if self.currentLength > self.allowedLength:
                for i, length in enumerate(self.lengths):
                    self.currentLength -= length
                    self.lengths.pop(i)
                    self.points.pop(i)
                    # jabh aukat me aajae tabh all is well
                    if self.currentLength < self.allowedLength:
                        break

            # Check if snake ate the food
            rx, ry = self.foodPoint
            if rx - self.wFood//2 < cx < rx+self.wFood//2 and ry - self.wFood//2 < cy < ry+self.hFood//2:
                self.randomLocation()
                self.allowedLength += 50
                self.score += 1
                print(self.score)

            # Draw snake
            if self.points:
                for i, point in enumerate(self.points):
                    if i != 0:
                        cv2.line(imgMain, self.points[i-1], self.points[i], (0, 0, 255), 20)
                cv2.circle(imgMain, self.points[-1], 4, (0, 0, 0), 20)

            # Draw food
            rx, ry = self.foodPoint
            imgMain = overlayPNG(imgMain, self.food, (rx-self.wFood//2, ry-self.hFood//2))

            # Check collision
            pts = np.array(self.points[:-2], np.int32)
            pts = pts.reshape((-1, 1, 2))
            cv2.polylines(imgMain, [pts], False, (0, 0, 0), 3)
            minDist = cv2.pointPolygonTest(pts, (cx, cy), True)

            if -1 <= minDist <= 1:
                self.gameOver = True
                self.points = []
                self.lengths = []
                self.currentLength = 0
                self.allowedLength = 150
                self.previousHead = 0, 0
                self.score = 0

        return imgMain

path = "Resources/Donut.png"
game = SnakeGame(path)

while True:
    _, img = cap.read()
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)
    if hands:
        hand1 = hands[0]
        lmList = hand1["lmList"]
        pointIndex = lmList[8][:2]
        img = game.update(img, pointIndex)

    cv2.imshow("Ram", img)
    key = cv2.waitKey(1)
    if key & 0xFF == ord('q'):  # to get exit from the videos
        break
    if key == ord("r"):
        game.gameOver = False
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`ai Presentation ungli se chalega
          
          import os
import numpy as np
import cv2
from cvzone.HandTrackingModule import HandDetector

# video
cap = cv2.VideoCapture(0)
# hand detector
detector = HandDetector()

# list of img in ppt
# we have one sorted to bring 2 digit number (after 10) at last
folderPath = "Resources/Prog26_ppt"
ListImg = sorted(os.listdir(folderPath), key=len)
# print(ListImg)

imgNumber = 0

# height of small img (video img)
hs, ws = int(120 * 2), int(213 * 2)  # width and height of small image
# threshold
gesThresh = 300
lol = 450
# to give some pause when we use our finger to move from one slide to another
buttonPress = False
buttonDelay = 10
counter = 0
width, height = 1280, 720
# drawing ke liye
annotation = [[]]
annotationNumber = 0
annotationStart = False

while True:
    # img
    _, img = cap.read()
    img = cv2.resize(img, (width, height))
    img = cv2.flip(img, 1)
    pathImg = os.path.join(folderPath, ListImg[imgNumber])
    imgCurrent = cv2.imread(pathImg)
    imgCurrent = cv2.resize(imgCurrent, (width, height))

    # cv2.rectangle(imgCurrent, (0, 0), (width, height), (0, 0, 0), cv2.FILLED)
    hands, img = detector.findHands(img, flipType=False)
    cv2.line(img, (0, gesThresh), (width, gesThresh), (255, 255, 0), 10)
    # buttonpress isliye kiya taki ek hi ba me bhhot sari slide change na karde jabh ham thubh ya piny finger use kare
    if hands and buttonPress == False:
        hand1 = hands[0]
        lmList = hand1["lmList"]
        cx, cy = hand1["center"]
        finger = detector.fingersUp(hand1)
        # ek specific jagha se pure screen ko access karle pointer se
        xVal = int(np.interp(lmList[8][0], [width // 2, width-50], [0, width]))
        yVal = int(np.interp(lmList[8][1], [150, height - 250], [0, height]))

        indexFinger = xVal, yVal
        # indexFinger = lmList[8][0], lmList[8][1]
        # print(finger)
        # kabhi galti se comp hath ko detect karke khurafati na machae to face ke uper hath aayega tabh kuch karo
        if cy <= gesThresh:
            # Gesture1 - thubh se piche slide pe or pinky se agge wali slide pe janna
            if finger == [1, 0, 0, 0, 0]:
                if imgNumber > 0:
                    imgNumber = imgNumber-1
                    annotation = [[]]
                    annotationNumber = 0
                    annotationStart = False
                    buttonPress = True

            elif finger == [0, 0, 0, 0, 1]:
                if imgNumber < len(ListImg)-1:
                    imgNumber = imgNumber+1
                    annotation = [[]]
                    annotationNumber = 0
                    annotationStart = False
                    buttonPress = True


        # Gesture2 - Pointer
        elif finger == [0, 1, 1, 0, 0]:
            # print(indexFinger)
            cv2.circle(imgCurrent, indexFinger, 15, (0, 0, 200), cv2.FILLED)
            annotationStart = False


        # Gesture3 - painter
        if finger == [0, 1, 0, 0, 0]:
            if annotationStart is False:
                annotationStart = True
                annotationNumber += 1
                annotation.append([])
            cv2.circle(imgCurrent, indexFinger, 15, (0, 0, 255), cv2.FILLED)
            # jabh ye ho to annotation me append kardo
            annotation[annotationNumber].append(indexFinger)
        else:
            annotationStart = False
        # Gesture 4 - undo or eraser
        if finger == [0, 1, 1, 1, 0]:
            if annotation:
                annotation.pop(-1)
                annotationNumber -= 1
                buttonPressed = True
                print(buttonPressed)
                annotationStart = False

    else:
        annotationStart = False

# ki agar next slide pe gae to buttondelay(10 frames) ruko phir agge jana
    if buttonPress:
        counter += 1
        if counter > buttonDelay:
           counter = 0
           buttonPress = False

    # draw kardo matlab previus index finger ki location se abhi ki location tak
    for i in range(len(annotation)):
        for j in range(len(annotation[i])):
            if j != 0:
                cv2.line(imgCurrent, annotation[i][j - 1], annotation[i][j], (0, 0, 255), 12)
    imgSmall = cv2.resize(img, (ws, hs))
    h, w, _ = imgCurrent.shape
    imgCurrent[0:hs, w - ws: w] = imgSmall
    cv2.imshow("Ram", img)
    cv2.imshow("krishna", imgCurrent)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`finger counter
          
          import cv2
import cvzone
from cvzone.HandTrackingModule import HandDetector
import os
################## Variables ######################
detector = HandDetector(detectionCon=0.8, maxHands=2)
frameWidth = 700    # values to set width of the screen
frameHeight = 500    # values to set height of the screen
path = r"C:\\Users\\xyz\\PycharmProjects\\PythonTuts\\Python_other_tuts\\murtaza_workshop\Projects\\Resources\\Prog2_images"
myList = os.listdir(path)
# print(myList)
overlayList = []
cap = cv2.VideoCapture(0)
###################################################
for imPath in myList:
    image = cv2.imread(f"{path}/{imPath}")
    imgResize = cv2.resize(image, (200, 200))
    # print(f"{path}/{imPath}")
    overlayList.append(imgResize)
while True:
    success, img = cap.read()
    img = cv2.resize(img, (1380, 720))  # to set height and width of the screen
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)  # to get hands and flipType is used to get accurate
    if hands:
        hand1 = hands[0]
        lmList1 = hand1["lmList"]
        bbox1 = hand1["bbox"]
        fingers = detector.fingersUp(hand1)
        FingersUp = fingers.count(1)
        img[0:200, 0:200] = overlayList[FingersUp-1]
        cv2.rectangle(img, (20, 225), (170, 425), (0, 0, 0), cv2.FILLED)
        cv2.putText(img, str(FingersUp), (55, 375), cv2.FONT_HERSHEY_PLAIN, 8, (255, 255, 255), 9)
        # print(fingers)
    cv2.imshow("video", img)  # to show video
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {` virtual volume controler, anghute se disco
          import cv2
from numpy import interp
from cvzone.HandTrackingModule import HandDetector
from time import time
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
################## Variables ######################
detector = HandDetector(detectionCon=0.8, maxHands=2)
frameWidth = 680    # values to set width of the screen
frameHeight = 420    # values to set height of the screen
devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(
    IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))
volRange = volume.GetVolumeRange()
pTime = 0  # help to set fps
minVol = volRange[0]
maxVol = volRange[1]
cap = cv2.VideoCapture(0)
volBar = 400
volPercent = 0
vol = 0
###################################################


while True:
    success, img = cap.read()
    img = cv2.resize(img, (frameWidth, frameHeight))  # to set height and width of the screen
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)  # to get hands and flipType is used to get accurate left nad right hand and it wil return img
    if hands:
        hand1 = hands[0]  # 1 hand
        LnList1 = hand1["lmList"]  # List of 21 Landmarks points
        bbox1 = hand1["bbox"]  # Bounding Box info
        # print(bbox1)
        if len(LnList1) != 0:
            # Tabh hi work kare jabh hath ek specific distance pe ho
            area = (bbox1[2] + bbox1[0]) * (bbox1[3]+bbox1[1])//100
            # print(area)
            if 1500 < area < 2500:
                x1, y1 = LnList1[4][0], LnList1[4][1]  # thumb tip
                x2, y2 = LnList1[8][0], LnList1[8][1]  # index finger tip
                x3, y3 = LnList1[12][0], LnList1[12][1]  # middle finger tip
                # print(f"Thumb = {x1, y1}, \\nIndex finger = {x2, y2}")

                l, info, img = detector.findDistance(LnList1[4], LnList1[8], img)  # distance find karta
                l2, info2 = detector.findDistance(LnList1[8], LnList1[12])
                # print(l)
                # hand range = 20 - 150
                # vol range = -65 - 0
                # print(l2)
                if l2 > 50:  # agar middle finger or index finger ki duri isse zayada hai tahh ye karo
                    volBar = interp(l, [20, 200], [400, 160])  # volume bar on image
                    volPercent = interp(l, [20, 200], [0, 100])  # volume persentage
                    # print(l, vol)
                    if l < 20:  # (min volume) thumbh ki duri index finger se itni kam hai to ye karo
                        # to bring smoothness
                        smoothness = 2
                        volPercent = smoothness * round(volPercent/smoothness)
                        cv2.circle(img, (info[4], info[5]), 15, (100, 100, 100), cv2.FILLED)  # distance ke beech wale me color change kae deta
                    elif l > 200:  # (max volume) agar inki duri isse zayda hai to ye karo
                        cv2.circle(img, (info[0], info[1]), 15, (100, 100, 100), cv2.FILLED)  # index pe color change karta
                        cv2.circle(img, (info[2], info[3]), 15, (100, 100, 100), cv2.FILLED)  # middle pe color hange arta
                else:  # jabh middle finger uper ho jae
                    volume.SetMasterVolumeLevelScalar(volPercent/100, None)  # volume set kardo
                    cv2.putText(img, f"Volume set at {int(volPercent)}%", (130, 200), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 255), 5)  # kitni vol hai abhi hai vo display kar vao

    cVol = int(volume.GetMasterVolumeLevelScalar() * 100)  # current volume
    cv2.putText(img, f'Vol Set: {int (cVol)}', (400, 58), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)  # volume kitni hai corner pe batata
    cv2.rectangle(img, (58, 158), (85, 400), (1, 1, 1), 2)
    cv2.rectangle(img, (58, int(volBar)), (85, 400), (1, 1, 1), cv2.FILLED)
    cv2.putText(img, f"{int(volPercent)}%", (40, 150), cv2.FONT_HERSHEY_PLAIN, 3, (1, 1, 1), 3)

# FPS
    cTime = time()
    fps = 1 / (cTime - pTime) + 10
    pTime = cTime
    cv2.putText(img, f"{int(fps)}", (40, 70), cv2.FONT_HERSHEY_PLAIN, 3, (1, 1, 1), 3)
    cv2.imshow("video", img)  # to show video
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
cv2.waitKey(1)
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`gym trainer
          
          from cvzone.PoseModule import PoseDetector as pd
import cv2
import numpy as np

detector = pd()
videoPath = r"C:\\Users\\xyz\\PycharmProjects\\PythonTuts\\Python_other_tuts\\murtaza_workshop\\Projects\\Resources\\Prog3\\1.mp4"
cap = cv2.VideoCapture(videoPath)
path = r"Resources/Prog3\\testu.jpg"
count = 0
dire = 0
while True:
    success, img = cap.read()

    # img = cv2.imread(path)
    img = cv2.resize(img, (1280, 728))
    img = detector.findPose(img, False)

    lmList = detector.findPosition(img, False)
    # print(lmList)
    if len(lmList) != 0:

        angle = detector.findAngle(img, 11, 13, 15, draw=False)
        per = np.interp(angle, (210, 310), (0, 100))
        bar = np.interp(angle, (210, 310), (650, 100))
        color = (255, 0, 255)
        if per == 100:
            color = (255, 255, 0)
            if dire == 0:
                count += 0.5
                dire = 1
        if per == 0:
            color = (255, 255, 0)
            if dire == 1:
                count += 0.5
                dire = 0

        cv2.rectangle(img, (1100, 100), (1175, 650), color, 3)
        cv2.rectangle(img, (1100, int(bar)), (1175, 650), color, cv2.FILLED)
        cv2.putText(img, f"{int(per)}%", (1100, 75), cv2.FONT_HERSHEY_PLAIN, 4, color, 4)
        cv2.rectangle(img, (0, 450), (250, 720), (0, 0, 0), cv2.FILLED)
        cv2.putText(img, str(int(count)), (45, 670), cv2.FONT_HERSHEY_PLAIN, 15, (255, 255, 255), 25)

    cv2.imshow("Image", img)
    cv2.waitKey(1)
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`Virtual painter, ungli se pheko
          
          import numpy
import numpy as np
from cvzone.ColorModule import ColorFinder
from cvzone.HandTrackingModule import HandDetector
from cvzone import stackImages
import cv2
# import os
from cvzone.FPS import FPS
fpsReader = FPS()
# color = ColorFinder()
cap = cv2.VideoCapture(0)
wCap = 1280
hCap = 720
fps = fpsReader.update()
# cv2.resize(cap, (1280, 720))
Taskbar = cv2.imread(r"C:\\Users\\xyz\\PycharmProjects\\PythonTuts\\Python_other_tuts\\murtaza_workshop\\Projects\\Resources\\Taskbar.png")
# Taskbar = cv2.resize(Taskbar, (640, 125))
detector = HandDetector(detectionCon=0.85)
# cf = ColorFinder()

colors = [(255, 255, 255), (255, 0, 255),  (175, 125, 0), (175, 175, 0), (0, 0, 0)]
color = colors[0]
blank = cv2.FILLED
BrushThickNess = 30
xp, yp = 0, 0
imgCanvas = np.zeros((720, 1280, 3), np.uint8)
while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)
    img = cv2.resize(img, (1280, 720))
    # find hands
    hands, img = detector.findHands(img, flipType=False)
    if hands:
        hand1 = hands[0]
        lmList = hand1["lmList"]  # 21 landmarks
        bbox1 = hand1["bbox"]  # Bounding Box info x,y,,n
        if len(lmList) != 0:
            xp, yp = 0, 0
            x1, y1 = lmList[8][0], lmList[8][1]  # index finger tip
            x2, y2 = lmList[12][0], lmList[12][1]  # middle finger tip

            # find fingers up or not
            fingers = detector.fingersUp(hand1)
            # print(fingers)

            # drawing mode
            if fingers[1] != 0 and fingers[2] == 0:
                alll = cv2.circle(img, (x1, y1), 20, color, cv2.FILLED)
                # print("Drawing mode")
                if xp == 0 and yp == 0:
                    xp, yp = x1, y1
                if color == colors[4]:
                    cv2.line(img, (xp, yp), (x1, y1), color, 50)
                    cv2.line(imgCanvas, (xp, yp), (x1, y1), color, 50)
                    cv2.circle(img, (x1, y1), 8, (255, 255, 255), 5)

                else:
                    cv2.line(img, (xp, yp), (x1, y1), color, BrushThickNess)
                    cv2.line(imgCanvas, (xp, yp), (x1, y1), color, BrushThickNess)
                xp, yp = x1, y1

            # selection mode
            elif fingers[1] != 0 and fingers[2] == 1:
                # cv2.circle(img, (x2-30, y2), 20, (255, 0, 255), cv2.FILLED)
                xp, yp = 0, 0
                cv2.rectangle(img, (x1, y1), (x2, y2), color, cv2.FILLED)
                if y1 < 125:
                    if 150 < x1 < 350:
                        color = colors[1]
                    elif 450 < x1 < 650:
                        color = colors[2]
                    elif 750 < x1 < 950:
                        color = colors[3]
                    elif 1050 < x1 < 1250:
                        color = colors[4]
                        # blank = 5
                # print("Selection mode")
    imgGray = cv2.cvtColor(imgCanvas, cv2.COLOR_BGR2GRAY)
    _, imgInv = cv2.threshold(imgGray, 58, 255, cv2.THRESH_BINARY_INV)
    imgInv = cv2.cvtColor(imgInv, cv2.COLOR_GRAY2BGR)
    img = cv2.bitwise_and(img, imgInv)
    img = cv2.bitwise_or(img, imgCanvas)
    # print(lmList)
    img[0:125, 0:1280] = Taskbar
    # print(type(img2))
    # painter = stackImages([img, imgCanvas, imgInv, imgGray], 2, 0.5)
    cv2.imshow("Paint", img)
    # cv2.imshow("Canvas", imgCanvas)
    # cv2.imshow("Painter", painter)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # to get exit from the videos
        break
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`Mouse chalega ungli pe
          
          import cv2
import numpy as np
from cvzone import HandTrackingModule
import time
from pynput.mouse import Button, Controller
# import pyautogui

################################## Variables #########################################
wCap = 600
hCap = 680
controller = HandTrackingModule.HandDetector(detectionCon=0.8)
cap = cv2.VideoCapture(0)
mouse = Controller()
# height, width = pyautogui.size()
# print(width, height)
frameR = 10
smoothing = 2
pLocX, pLocY = 0, 0
cLocX, cLocY = 0, 0
######################################################################################

cap.set(3, wCap)
cap.set(4, hCap)
while True:
    ################# Read Image ###################
    success, img = cap.read()
    img = cv2.flip(img, 1)
    hand, img = controller.findHands(img, flipType=False)
    ################################################
    cv2.rectangle(img, (frameR, frameR), (wCap, hCap - 400), (1, 1, 1), 5)

# detect hand is there or not
    if hand:
        # if True so hand1 = that hand
        hand1 = hand[0]
        # lmlist
        lmList1 = hand1["lmList"]
        # bbox
        bbox1 = hand1["bbox"]
        # print(bbox1)

        if len(lmList1) != 0:
            # index finger
            x1, y1 = lmList1[8][0:]
            # middle finger
            x2, y2 = lmList1[12][0:]
            # print(x1, y1)
            # print(x2, y2)
            # tell that fingers ar eup or not
            fingers = controller.fingersUp(hand1)
            # print(fingers)
            # print(l)
            # bas index finger uper ho tabh ye karo
            if fingers[1] == 1 and fingers[2] == 0:
                # jo box ka sie hai usse pure screen ka sie banado
                x3 = np.interp(x1, (frameR, wCap - 50), (0, 1350.0))
                y3 = np.interp(y1, (frameR, hCap - 200), (0, 1400.0))
                # print(x3, y3)
                # smooth karna hai agar cursor ko to ye kam aaya hai
                cLocX = pLocX + (x3-pLocX) / smoothing
                cLocY = pLocY + (y3-pLocY) / smoothing
                # print("c", cLocX, cLocY)
                # print("p", pLocX, pLocY)
                # ungli ki podtiton se cursor ko hilata
                mouse.position = (cLocX, cLocY)
                # ungli pe circle
                cv2.circle(img, (x1, y1), 15, (1, 1, 1), cv2.FILLED)
                pLocX, pLocY = cLocX, cLocY
                # agar index and middle finger dono uper hai
            elif fingers[1] == 1 and fingers[2] == 1:
                # distance find karta
                l, info, img = controller.findDistance(lmList1[8], lmList1[12], img)
                # click karna
                if l < 22:
                    mouse.click(Button.left, 1)
                    cv2.circle(img, (info[4], info[5]), 15, (100, 100, 100), cv2.FILLED)

    # show video
    cv2.imshow("mouse", img)
    # q dabane pe exit
    if cv2.waitKey(1) & 0xFF == ord('q'):   # to get exit from the videos
        break
cv2.waitKey(1)
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`background change karega
          from cvzone.SelfiSegmentationModule import SelfiSegmentation as sus
import cv2
import cvzone
from os import listdir


segmentor = sus()
cap = cv2.VideoCapture(0)
fps = cvzone.FPS()
ImgName = listdir(r"C:\\Users\\xyz\\PycharmProjects\\PythonTuts\\Python_other_tuts\\murtaza_workshop\\Projects\\Resources\\Prog6_background\\img")
ImgList = []
for imgPath in ImgName:
    imgs = cv2.imread(f"Resources/Prog6_background/img/{imgPath}")
    ImgList.append(imgs)
# print(len(ImgList))
IndexImg = 0
while True:
    success, img = cap.read()
    # success2, lol = video.read()
    lol = cv2.resize(ImgList[IndexImg], (1380, 720))
    img = cv2.resize(img, (1380, 720))
    img = cv2.flip(img, 1)
    # print(IndexImg)imgOut = segmentor.removeBG(img, lol, threshold=0.5)
    imgOut = segmentor.removeBG(img, lol, threshold=0.5)

    stacked = cvzone.stackImages([img, imgOut], 2, 0.5)
    _, stacked = fps.update(stacked)
    # cv2.imshow("img", img)
    # cv2.imshow("imgOut", imgOut)
    cv2.imshow("Stacked", stacked)
    key = cv2.waitKey(1)
    if key == ord('a'):
        if IndexImg>0:
            IndexImg -= 1
    if key == ord('d'):
        if IndexImg < len(ImgList)-1:
            IndexImg += 1
    if key == ord('q'):
        break


          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`kuch to karta hai 
          
          import cvzone.Utils
import cv2
from numpy import zeros, uint8
###############################  overlay Png ######################################
# background image
# ImgBack = cv2.imread("0.Resources_GameDev/Prog7_Images/nature.jpg")
# if you want it on a plain color image
# ImgBack = zeros((480, 640, 3), np.uint8)
# overlay image
# ImgFront = cv2.imread("0.Resources_GameDev/Prog7_Images/gear.png", cv2.IMREAD_UNCHANGED)
# if you want to resize it
# ImgFront = cv2.resize(ImgFront, (0, 0), None, 0.5, 0.5)
# final result
# ImgResult = cvzone.overlayPNG(ImgBack, ImgFront, [20, 20])
# cv2.imshow("ImgBack", ImgBack)
# cv2.imshow("ImgResult", ImgResult)
# cv2.waitKey(0)
#####################################################################################

################################# Logo Overlay ######################################
# # background image
# ImgBack = cv2.imread("0.Resources_GameDev/Prog7_Images/pc.jpg")
# # overlay image
# ImgFront = cv2.imread("0.Resources_GameDev/Prog7_Images/logo.png", cv2.IMREAD_UNCHANGED)
# # if you want to resize it
# ImgFront = cv2.resize(ImgFront, (0, 0), None, 0.2, 0.2)
# # auto matic bringing logo at bottom/
# hf, wf, cf = ImgFront.shape
# hb, wb, cb = ImgBack.shape
# # final result
# ImgResult = cvzone.overlayPNG(ImgBack, ImgFront, [0, hb-hf])
# # cv2.imshow("ImgBack", ImgBack)
# cv2.imshow("ImgResult", ImgResult)
# cv2.waitKey(0)
#####################################################################################

################################## webcam overlay ###################################
# background image
# cap = cv2.VideoCapture(0)
# success, img = cap.read()
# overlay image
# ImgFront = cv2.imread("0.Resources_GameDev/Prog7_Images/logo.png", cv2.IMREAD_UNCHANGED)
# if you want to resize it
# ImgFront = cv2.resize(ImgFront, (0, 0), None, 0.3, 0.3)
# # auto matic bringing logo at bottom/
# hf, wf, cf = ImgFront.shape
# hb, wb, cb = img.shape
# while True:
    # success, img = cap.read()
    # final result
    # ImgResult = cvzone.overlayPNG(img, ImgFront, [0, hb-hf])
    # cv2.imshow("ImgResult", ImgResult)
    # cv2.waitKey(1)
#####################################################################################

################################### Image Rotation ##################################
def empty(a):
    pass
angle = 0
cv2.namedWindow("Parameter")
cv2.resizeWindow("Parameter", 640, 100)
cv2.createTrackbar("Speed", "Parameter", 1, 25, empty)
while True:
    # background image
    ImgBack = zeros((500, 880, 3), uint8)*255
    # overlay image
    val = cv2.getTrackbarPos("Speed", "Parameter")
    ImgG1 = cv2.imread("Resources/Prog7_Images/gear.png", cv2.IMREAD_UNCHANGED)
    ImgG2 = ImgG1.copy()
    ImgG1 = cvzone.rotateImage(ImgG1, angle+23)
    ImgG2 = cvzone.rotateImage(ImgG2, -angle)
    angle += val

    # final result
    ImgResult = cvzone.overlayPNG(ImgBack, ImgG1, [125, 20])
    ImgResult = cvzone.overlayPNG(ImgResult, ImgG2, [400, 20])
    # cv2.imshow("ImgBack", ImgBack)
    cv2.imshow("ImgResult", ImgResult)
    cv2.waitKey(1)
#####################################################################################
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`virtual keybord
          
          import cv2
from cvzone import cornerRect
from pynput.keyboard import Key, Controller
from cvzone.HandTrackingModule import HandDetector
from time import sleep
import numpy


detector = HandDetector(detectionCon=0.8, maxHands=2)
# capture a video
frameWidth = 1280    # values to set width of the screen
frameHeight = 720    # values to set height of the screen
cap = cv2.VideoCapture(0)  # to capture videos
finalText = ""
keys = [["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "<"],
 ["A", "S", "D", "F", "G", "H", "J", "K", "L", ";", " "],
 ["Z", "X", "C", "V", "B", "N", "M", ",", ".", "/"]]
kb = Controller()

def drawAll(img, buttonList):
    for button in buttonList:
        x, y = button.pos
        w, h = button.size
        cornerRect(img, (button.pos[0], button.pos[1], button.size[0], button.size[1]))
        cv2.rectangle(img, button.pos, (x + w, y + h), (0, 0, 0), cv2.FILLED)
        cv2.putText(img, button.text, (x + 20, y + 65),
                    cv2.FONT_HERSHEY_PLAIN, 4, (255, 255, 255), 4)
    return img
class Button:
    def __init__(self, pos, text, size=[85, 85]):
         self.pos = pos
         self.size = size
         self.text = text


buttonList = []
for i in range(len(keys)):
    for j, key in enumerate(keys[i]):
        buttonList.append(Button([100 * j + 58, 100 * i + 50], key))

while True:
    success, img = cap.read()  # to read video
    img = cv2.resize(img, (frameWidth, frameHeight))  # to set height and width of the screen
    img = cv2.flip(img, 1)
    # img = detector.findHands(img)
    hands, img = detector.findHands(img, flipType=False)  # to get hands and flipType is used to get accurate left nad right hand and it wil return img
    img = drawAll(img, buttonList)

    if hands:
        hand1 = hands[0]  # 1 hand
        LnList1 = hand1["lmList"]  # List of 21 Landnarks points
        bbox1 = hand1["bbox"]  # Bounding Box info x,y,n
        for button in buttonList:  # help to draw keys on screen
            x, y = button.pos
            w, h = button.size
            # print(LnList1)
            if x < LnList1[8][0] < x+w and y < LnList1[8][1] < y+h:  # if my hand is between the button  and y change color
                cv2.rectangle(img, (x-7, y-7), (x + w+7, y + h+7), (255, 255, 255), cv2.FILLED)
                cv2.putText(img, button.text, (x + 20, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (0, 0, 0), 4)
                l, info, img = detector.findDistance(LnList1[8], LnList1[12], img)
                # print(l)
                if l < 95:  # if my index finger tip and middle finger tip is lesser than 90 (any cvzone value) click the button
                    if button.text != "<":
                        kb.press(button.text)
                        cv2.rectangle(img, button.pos, (x + w, y + h), (125, 125, 125 ), cv2.FILLED)
                        cv2.putText(img, button.text, (x + 20, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255, 255, 255), 4)
                        finalText += button.text
                        sleep(0.30)
                        if len(finalText) == 20:
                            finalText = ""
                    elif button.text == "<":
                        kb.press(Key.backspace)
                        sleep(0.30)
                        if len(finalText) != 0:
                            le = len(finalText) - 1
                            finalText = finalText.replace(finalText[le], "")

    cv2.rectangle(img, (50, 350), (1000, 450), (0, 0, 0), cv2.FILLED)  # show what i have typed
    cv2.putText(img, finalText, (60, 425),
                cv2.FONT_HERSHEY_PLAIN, 5, (255, 255, 255), 5)
    cv2.imshow("video", img)    # to show video
    if cv2.waitKey(1) & 0xFF == ord('q'):   # to get exit from the videos
        break
cv2.waitKey(1)
          `}
                </code>
              </pre>
            </div>

            <div>
              <pre>
                <code>
                  {`virtual drag and drop
          
          import cv2
from cvzone.HandTrackingModule import HandDetector
from cvzone.Utils import cornerRect
import numpy as np

cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.3, maxHands=1)
colorR = (255, 0, 255)
cx, cy, w, h = 100, 100, 200, 200

class DragRect():
    def __init__(self, posCenter, size=[200, 200]):
        self.posCenter = posCenter
        self.size = size

    def update(self, cursor):
        cx, cy = self.posCenter
        w, h = self.size

        if cx - w // 2 < cursor[0] < cx + w // 2 and cy - h // 2 < cursor[1] < cy + h // 2:
            colorR = (255, 255, 0)
            self.posCenter = cursor
RectList = []
for i in range(5):
    RectList.append(DragRect([i*250+150, 150]))

while True:
    success, img = cap.read()
    img = cv2.resize(img, (1280, 720))
    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img, flipType=False)
    if hands:
        hand1 = hands[0]  # 1 hand
        lmList = hand1["lmList"]  # List of 21 Landnarks points
        bbox = hand1["bbox"]  # Bounding Box info x,y,n
        if lmList:
            l, info = detector.findDistance(lmList[8], lmList[12])
            # print(l)
            if l < 100:
                cursor = lmList[8]
                for rect in RectList:
                    rect.update(cursor)

            else:
                colorR = (255, 0, 255)
    for rect in RectList:
        cx, cy = rect.posCenter
        w, h = rect.size
        cv2.rectangle(img, (cx-w//2, cy-h//2), (cx+w//2, cy+h//2), colorR, cv2.FILLED)
        # cornerRect(img, (cx-w//2, cy-h//2, cx+w//2, cy+h//2, w, h), 20, 4)
    cv2.imshow("img", img)
    cv2.waitKey(1)
          `}
                </code>
              </pre>
            </div>

            <h1>jo resources hai vo dekhlenge me bad me dal dunga</h1>
          </div>

          <div className="bg-cyan-900">
            <h1>ye dusare modules hai jo kam aayenge</h1>
            <div>
              <pre>
                <code>
                  {`
              # import pyfiglet
# out = pyfiglet.figlet_format("I  am \\nProgrammer ")
# print(out)
# output -  ___
#
# |_ _|    __ _ _ __ ___
#  | |    / _' | '_ ' _ \\
#  | |   | (_| | | | | | |
# |___|   \\__,_|_| |_| |_|
              #
              #  ____
              # |  _ \\ _ __ ___   __ _ _ __ __ _ _ __ ___  _ __ ___   ___ _ __
              # | |_) | '__/ _ \\ / _' | '__/ _' | '_ ' _ \\| '_ ' _ \\ / _ \\ '__|
              # |  __/| | | (_) | (_| | | | (_| | | | | | | | | | | |  __/ |
              # |_|   |_|  \\___/ \\__, |_|  \\__,_|_| |_| |_|_| |_| |_|\\___|_|
              #                  |___/
              #
              #
              # thumbnail downloader
              # import ytimg
              # import urllib.request
              #
              # thubhUrl = ytimg.get("https://www.youtube.com/watch?v=8-e1htTLHSI&t=6s")
              # urllib.request.urlretrieve(thubhUrl, 'thumb.jpg')
              #
              # spell checker
              # from textblob import TextBlob
              # speller = input("Enter the word which you want to check\n")
              # print(f"Original text: {str(speller)}")
              #
              # b = TextBlob(speller)
              # print(f"Correct text: {str(b.correct())}")
              #
              # output: Original text: glas
              #         Correct text: glad
              #
              # instaram id loader
              # import instaloader
              # ig = instaloader.Instaloader()
              # dp = input("Enter the Username: ")
              # ig.download_profile(dp, profile_pic_only=True)
              # output : my full information came when i input my id
              #
              # newspaper
              # import newspaper
              # url = 'https://copyassignment.com/15-common-coding-mistakes-by-beginners'
              # url_i = newspaper.Article(url="%s" % url, language='en')
              # url_i.download()
              # url_i.parse()
              # print(url_i.text, end=" ")
              # output tell all things in website (it should be informative website which support this otherwise it will not run)
              #
              # phone number detector
              # import phonenumbers
              # from phonenumbers import geocoder, carrier, timezone
              #
              # phoner = input("Enter your number:\\n") # tell the code also like in india it is +91{number}
              # phone_number = phonenumbers.parse(phoner)
              # # print the country name
              # print(geocoder.description_for_number(phone_number, 'en'))
              # # this will print the service provider
              # print(carrier.name_for_number(phone_number, 'en'))
              # # this will print the timezone
              # print(timezone.time_zones_for_number(phone_number))
              # output: all info of phone number
              #
              # ip address
              # built in
              # import socket
              # hostname = socket.gethostname()
              # IPAddrs = socket.gethostbyname(hostname)
              # print(hostname)  # tell your name if comp belong to you
              # print(f"My IP address:\\n{IPAddrs}")  # tell ip address
              #
              # captcha creator
              # from captcha.image import ImageCaptcha
              # image = ImageCaptcha(width=280, height=98)
              # captcha = text = "Anant The Coder"
              # data = image.generate("bruh")
              # image.write(captcha, "9._Captcha.png")
              #
              # shoutdown computer
              # import os
              # os.system("shutdown now - h")
              #
              # source code of any website
              # import urllib.request
              # print(urllib.request.urlopen(input("Enter the website url:\\n")).read())
              `}
                </code>
              </pre>
            </div>
          </div>

          <div className="bg-amber-950">
            <h1>
              ab ye code maine khud banaya hai, or dimag lagaya isliye ye code
              kam hi nahi kar raha, kyo kyoki ye mere punches ko detect hi nahi
              kar pa raha, esa nahi hai ki ye log isko bana nahi sakte vo sabh
              detect karne ke liye per in logo ne jan vuch ke bekar cheez banae
              hai taki me isse kuch banake kuch kar na pau. or ye bas yaha nahi
              sabh jagaha esa hi ho raha hai. to phir british empire ke code pe
              kyo hi coding karna khud ka computer banana chaihiye, coding
              language to asan hai chahe to sanskrit ko hi banalo basic hai ye
              to. coding vo hoti hai ki hame british empire se cheeze mil rahi
              hai, usme se ek branch ye aagaya user or british empire ke beech
              me jo cheezo ko asan banake dede, or vo hi ho raha tha per phir
              iske ander interference kar diya or phir the end of this logic, ab
              tumhare control me kuch bhi nahi tum iske dam pe kuch bhi nahi kar
              sakte{" "}
            </h1>
            ye pura maine ussi tarike se kiya tha jis tarike se me abhi tumhe
            kaha raha ki in sabh ko skip kardo. kyoki ye tarika maine alag se
            dhundha(simple coding logic) tha, or school pe apply kiya to chal
            gaya, to vaha to kardo, baki aage ka sath milke solve kar lenge
            <pre>
              <code>
                {`
      
      # Import
import time
import pygame
from numpy import rot90
import cv2
import pyttsx3

# setting up pyttsx3 help to make computer speck
engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
# print(voices[0].id)

engine.setProperty('voice', voices[1].id)
engine.setProperty('volume', 100)
engine.setProperty('rate', 200)
def speck(audio):
    """ Help to computer to speck """
    engine.say(audio)
    engine.runAndWait()
    # engine.stop()
fileN = -1
def countt(path):
    pygame.mixer.init()
    pygame.mixer.music.load(path)
    pygame.mixer.music.play()

# Music
# music_dir = 'C:\\Users\\xyz\\OneDrive\\Desktop\\songs'
# songs = os.listdir(music_dir)
# rand = random.randint(0, len(songs) - 1)

# Variable
countF = 00
count = 0
totalTime = 10
startTime = time.time()

# Initialize
pygame.init()

# create window or display
width, height = 1280, 720
window = pygame.display.set_mode((width, height))
pygame.display.set_caption("My Awesome project")

# Initialize Clock for FPS
fps = 30
clock = pygame.time.Clock()

# WebCam
cap = cv2.VideoCapture(0)

# Main loop
start = True
while start:
    # Get events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            start = False
            pygame.quit()
            exit()

    # Apply Logic
    timeRemain = int(totalTime - (time.time() - startTime))
    # print(timeRemain)
    # opencv
    success, img = cap.read()
    img = cv2.resize(img, (1280, 720))
    # img = cv2.flip(img, 1)
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    imgRGB = rot90(imgRGB)
    frame = pygame.surfarray.make_surface(imgRGB).convert()
    window.blit(frame, (0, 0))
    if timeRemain <= 0:
        if count < 100:
            font = pygame.font.Font("./Resources_Karate/Marcellus-Regular.ttf", 150)
            pygame.draw.rect(window, (0, 255, 0), (58, 457, 345, 220), border_radius=50)  # border radius css wala
            countF += 1
            showCount = font.render(f'{count}', True, (50, 50, 255))
            if countF == 25:
                countF = 0
                count += 1
                fileN += 1
                if fileN != 101:
                    path = fr"C:\\Users\\xyz\\PycharmProjects\\PythonTuts\\Python_Project_By_Me\\AI_Karate_Trainer\\Resources_Karate\\Audio\\{fileN}.mp3"
                    countt(path)

            window.blit(showCount, (150, 470))
        elif count >= 100:
            font = pygame.font.Font("./Resources_Karate/Marcellus-Regular.ttf", 50)
            pygame.draw.rect(window, (255, 0, 0), (250, 207, 845, 220), border_radius=20)  # border radius css wala
            TotalPunch = font.render(f'You completed all 100 punches', True, (50, 50, 255))
            window.blit(TotalPunch, (300, 270))
    else:
        pygame.draw.rect(window, (0, 255, 175), (250, 237, 770, 220), border_radius=20)  # border radius css wala
        font = pygame.font.Font("Resources_Karate/Marcellus-Regular.ttf", 50)
        textTime = font.render(f'Training Starts in: {timeRemain}', True, (50, 50, 255))
        window.blit(textTime, (400, 305))


    # Update Display
    pygame.display.update()

    # Set FPS
    clock.tick(fps)


      `}
              </code>
            </pre>
          </div>
          <iframe
            width="560"
            height="315"
            src="https://www.youtube.com/embed/videoseries?si=_ULQpovo53JzDcn-\&amp;list=PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME"
            title="YouTube video player"
          ></iframe>
        </div>
      </div>
    </div>
  );
};

export default page;
